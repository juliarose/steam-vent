// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_timedtrial.steamclient.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

#[doc = "Returns the amount of time a user has left on a timed trial for an app"]
// @@protoc_insertion_point(message:CTimedTrial_GetTimeRemaining_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTimedTrial_GetTimeRemaining_Request {
    // message fields
    // @@protoc_insertion_point(field:CTimedTrial_GetTimeRemaining_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTimedTrial_GetTimeRemaining_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTimedTrial_GetTimeRemaining_Request {
    fn default() -> &'a CTimedTrial_GetTimeRemaining_Request {
        <CTimedTrial_GetTimeRemaining_Request as ::protobuf::Message>::default_instance()
    }
}

impl CTimedTrial_GetTimeRemaining_Request {
    pub fn new() -> CTimedTrial_GetTimeRemaining_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CTimedTrial_GetTimeRemaining_Request {
    const NAME: &'static str = "CTimedTrial_GetTimeRemaining_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTimedTrial_GetTimeRemaining_Request {
        CTimedTrial_GetTimeRemaining_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTimedTrial_GetTimeRemaining_Request {
        static instance: CTimedTrial_GetTimeRemaining_Request = CTimedTrial_GetTimeRemaining_Request {
            appid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CTimedTrial_GetTimeRemaining_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTimedTrial_GetTimeRemaining_Response {
    // message fields
    // @@protoc_insertion_point(field:CTimedTrial_GetTimeRemaining_Response.seconds_played)
    pub seconds_played: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CTimedTrial_GetTimeRemaining_Response.seconds_allowed)
    pub seconds_allowed: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CTimedTrial_GetTimeRemaining_Response.packageid)
    pub packageid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CTimedTrial_GetTimeRemaining_Response.mastersub_appid)
    pub mastersub_appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTimedTrial_GetTimeRemaining_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTimedTrial_GetTimeRemaining_Response {
    fn default() -> &'a CTimedTrial_GetTimeRemaining_Response {
        <CTimedTrial_GetTimeRemaining_Response as ::protobuf::Message>::default_instance()
    }
}

impl CTimedTrial_GetTimeRemaining_Response {
    pub fn new() -> CTimedTrial_GetTimeRemaining_Response {
        ::std::default::Default::default()
    }

    // optional uint32 seconds_played = 1;

    pub fn seconds_played(&self) -> u32 {
        self.seconds_played.unwrap_or(0)
    }

    pub fn clear_seconds_played(&mut self) {
        self.seconds_played = ::std::option::Option::None;
    }

    pub fn has_seconds_played(&self) -> bool {
        self.seconds_played.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_played(&mut self, v: u32) {
        self.seconds_played = ::std::option::Option::Some(v);
    }

    // optional uint32 seconds_allowed = 2;

    pub fn seconds_allowed(&self) -> u32 {
        self.seconds_allowed.unwrap_or(0)
    }

    pub fn clear_seconds_allowed(&mut self) {
        self.seconds_allowed = ::std::option::Option::None;
    }

    pub fn has_seconds_allowed(&self) -> bool {
        self.seconds_allowed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_allowed(&mut self, v: u32) {
        self.seconds_allowed = ::std::option::Option::Some(v);
    }

    // optional uint32 packageid = 3;

    pub fn packageid(&self) -> u32 {
        self.packageid.unwrap_or(0)
    }

    pub fn clear_packageid(&mut self) {
        self.packageid = ::std::option::Option::None;
    }

    pub fn has_packageid(&self) -> bool {
        self.packageid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_packageid(&mut self, v: u32) {
        self.packageid = ::std::option::Option::Some(v);
    }

    // optional uint32 mastersub_appid = 4;

    pub fn mastersub_appid(&self) -> u32 {
        self.mastersub_appid.unwrap_or(0)
    }

    pub fn clear_mastersub_appid(&mut self) {
        self.mastersub_appid = ::std::option::Option::None;
    }

    pub fn has_mastersub_appid(&self) -> bool {
        self.mastersub_appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mastersub_appid(&mut self, v: u32) {
        self.mastersub_appid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CTimedTrial_GetTimeRemaining_Response {
    const NAME: &'static str = "CTimedTrial_GetTimeRemaining_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.seconds_played = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.seconds_allowed = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.packageid = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.mastersub_appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.seconds_played {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.seconds_allowed {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.packageid {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.mastersub_appid {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.seconds_played {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.seconds_allowed {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.packageid {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.mastersub_appid {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTimedTrial_GetTimeRemaining_Response {
        CTimedTrial_GetTimeRemaining_Response::new()
    }

    fn clear(&mut self) {
        self.seconds_played = ::std::option::Option::None;
        self.seconds_allowed = ::std::option::Option::None;
        self.packageid = ::std::option::Option::None;
        self.mastersub_appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTimedTrial_GetTimeRemaining_Response {
        static instance: CTimedTrial_GetTimeRemaining_Response = CTimedTrial_GetTimeRemaining_Response {
            seconds_played: ::std::option::Option::None,
            seconds_allowed: ::std::option::Option::None,
            packageid: ::std::option::Option::None,
            mastersub_appid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Updates the user's remaining playtime while in game"]
// @@protoc_insertion_point(message:CTimedTrial_RecordPlaytime_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTimedTrial_RecordPlaytime_Request {
    // message fields
    // @@protoc_insertion_point(field:CTimedTrial_RecordPlaytime_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CTimedTrial_RecordPlaytime_Request.seconds_played)
    pub seconds_played: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTimedTrial_RecordPlaytime_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTimedTrial_RecordPlaytime_Request {
    fn default() -> &'a CTimedTrial_RecordPlaytime_Request {
        <CTimedTrial_RecordPlaytime_Request as ::protobuf::Message>::default_instance()
    }
}

impl CTimedTrial_RecordPlaytime_Request {
    pub fn new() -> CTimedTrial_RecordPlaytime_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 seconds_played = 2;

    pub fn seconds_played(&self) -> u32 {
        self.seconds_played.unwrap_or(0)
    }

    pub fn clear_seconds_played(&mut self) {
        self.seconds_played = ::std::option::Option::None;
    }

    pub fn has_seconds_played(&self) -> bool {
        self.seconds_played.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_played(&mut self, v: u32) {
        self.seconds_played = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CTimedTrial_RecordPlaytime_Request {
    const NAME: &'static str = "CTimedTrial_RecordPlaytime_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.seconds_played = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.seconds_played {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.seconds_played {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTimedTrial_RecordPlaytime_Request {
        CTimedTrial_RecordPlaytime_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.seconds_played = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTimedTrial_RecordPlaytime_Request {
        static instance: CTimedTrial_RecordPlaytime_Request = CTimedTrial_RecordPlaytime_Request {
            appid: ::std::option::Option::None,
            seconds_played: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CTimedTrial_RecordPlaytime_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTimedTrial_RecordPlaytime_Response {
    // message fields
    // @@protoc_insertion_point(field:CTimedTrial_RecordPlaytime_Response.seconds_played)
    pub seconds_played: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CTimedTrial_RecordPlaytime_Response.seconds_allowed)
    pub seconds_allowed: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTimedTrial_RecordPlaytime_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTimedTrial_RecordPlaytime_Response {
    fn default() -> &'a CTimedTrial_RecordPlaytime_Response {
        <CTimedTrial_RecordPlaytime_Response as ::protobuf::Message>::default_instance()
    }
}

impl CTimedTrial_RecordPlaytime_Response {
    pub fn new() -> CTimedTrial_RecordPlaytime_Response {
        ::std::default::Default::default()
    }

    // optional uint32 seconds_played = 1;

    pub fn seconds_played(&self) -> u32 {
        self.seconds_played.unwrap_or(0)
    }

    pub fn clear_seconds_played(&mut self) {
        self.seconds_played = ::std::option::Option::None;
    }

    pub fn has_seconds_played(&self) -> bool {
        self.seconds_played.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_played(&mut self, v: u32) {
        self.seconds_played = ::std::option::Option::Some(v);
    }

    // optional uint32 seconds_allowed = 2;

    pub fn seconds_allowed(&self) -> u32 {
        self.seconds_allowed.unwrap_or(0)
    }

    pub fn clear_seconds_allowed(&mut self) {
        self.seconds_allowed = ::std::option::Option::None;
    }

    pub fn has_seconds_allowed(&self) -> bool {
        self.seconds_allowed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_allowed(&mut self, v: u32) {
        self.seconds_allowed = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CTimedTrial_RecordPlaytime_Response {
    const NAME: &'static str = "CTimedTrial_RecordPlaytime_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.seconds_played = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.seconds_allowed = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.seconds_played {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.seconds_allowed {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.seconds_played {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.seconds_allowed {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTimedTrial_RecordPlaytime_Response {
        CTimedTrial_RecordPlaytime_Response::new()
    }

    fn clear(&mut self) {
        self.seconds_played = ::std::option::Option::None;
        self.seconds_allowed = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTimedTrial_RecordPlaytime_Response {
        static instance: CTimedTrial_RecordPlaytime_Response = CTimedTrial_RecordPlaytime_Response {
            seconds_played: ::std::option::Option::None,
            seconds_allowed: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Reset the user's remaining playtime (developer only)"]
// @@protoc_insertion_point(message:CTimedTrial_ResetPlaytime_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTimedTrial_ResetPlaytime_Request {
    // message fields
    // @@protoc_insertion_point(field:CTimedTrial_ResetPlaytime_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTimedTrial_ResetPlaytime_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTimedTrial_ResetPlaytime_Request {
    fn default() -> &'a CTimedTrial_ResetPlaytime_Request {
        <CTimedTrial_ResetPlaytime_Request as ::protobuf::Message>::default_instance()
    }
}

impl CTimedTrial_ResetPlaytime_Request {
    pub fn new() -> CTimedTrial_ResetPlaytime_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CTimedTrial_ResetPlaytime_Request {
    const NAME: &'static str = "CTimedTrial_ResetPlaytime_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTimedTrial_ResetPlaytime_Request {
        CTimedTrial_ResetPlaytime_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTimedTrial_ResetPlaytime_Request {
        static instance: CTimedTrial_ResetPlaytime_Request = CTimedTrial_ResetPlaytime_Request {
            appid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CTimedTrial_ResetPlaytime_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTimedTrial_ResetPlaytime_Response {
    // message fields
    // @@protoc_insertion_point(field:CTimedTrial_ResetPlaytime_Response.seconds_played)
    pub seconds_played: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CTimedTrial_ResetPlaytime_Response.seconds_allowed)
    pub seconds_allowed: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTimedTrial_ResetPlaytime_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTimedTrial_ResetPlaytime_Response {
    fn default() -> &'a CTimedTrial_ResetPlaytime_Response {
        <CTimedTrial_ResetPlaytime_Response as ::protobuf::Message>::default_instance()
    }
}

impl CTimedTrial_ResetPlaytime_Response {
    pub fn new() -> CTimedTrial_ResetPlaytime_Response {
        ::std::default::Default::default()
    }

    // optional uint32 seconds_played = 1;

    pub fn seconds_played(&self) -> u32 {
        self.seconds_played.unwrap_or(0)
    }

    pub fn clear_seconds_played(&mut self) {
        self.seconds_played = ::std::option::Option::None;
    }

    pub fn has_seconds_played(&self) -> bool {
        self.seconds_played.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_played(&mut self, v: u32) {
        self.seconds_played = ::std::option::Option::Some(v);
    }

    // optional uint32 seconds_allowed = 2;

    pub fn seconds_allowed(&self) -> u32 {
        self.seconds_allowed.unwrap_or(0)
    }

    pub fn clear_seconds_allowed(&mut self) {
        self.seconds_allowed = ::std::option::Option::None;
    }

    pub fn has_seconds_allowed(&self) -> bool {
        self.seconds_allowed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seconds_allowed(&mut self, v: u32) {
        self.seconds_allowed = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CTimedTrial_ResetPlaytime_Response {
    const NAME: &'static str = "CTimedTrial_ResetPlaytime_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.seconds_played = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.seconds_allowed = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.seconds_played {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.seconds_allowed {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.seconds_played {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.seconds_allowed {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTimedTrial_ResetPlaytime_Response {
        CTimedTrial_ResetPlaytime_Response::new()
    }

    fn clear(&mut self) {
        self.seconds_played = ::std::option::Option::None;
        self.seconds_allowed = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTimedTrial_ResetPlaytime_Response {
        static instance: CTimedTrial_ResetPlaytime_Response = CTimedTrial_ResetPlaytime_Response {
            seconds_played: ::std::option::Option::None,
            seconds_allowed: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}
#[allow(unused_imports)]
use crate::steammessages_base::*;
#[allow(unused_imports)]
use crate::steammessages_unified_base_steamclient::*;
impl crate::RpcMessage for CTimedTrial_GetTimeRemaining_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CTimedTrial_GetTimeRemaining_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CTimedTrial_RecordPlaytime_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CTimedTrial_RecordPlaytime_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CTimedTrial_ResetPlaytime_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CTimedTrial_ResetPlaytime_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
///A service to get user timed trial information
struct TimedTrial {}
impl crate::RpcService for TimedTrial {
    const SERVICE_NAME: &'static str = "TimedTrial";
}
impl crate::RpcMethod for CTimedTrial_GetTimeRemaining_Request {
    const METHOD_NAME: &'static str = "TimedTrial.GetTimeRemaining#1";
    type Response = CTimedTrial_GetTimeRemaining_Response;
}
impl crate::RpcMethod for CTimedTrial_RecordPlaytime_Request {
    const METHOD_NAME: &'static str = "TimedTrial.RecordPlaytime#1";
    type Response = CTimedTrial_RecordPlaytime_Response;
}
impl crate::RpcMethod for CTimedTrial_ResetPlaytime_Request {
    const METHOD_NAME: &'static str = "TimedTrial.ResetPlaytime#1";
    type Response = CTimedTrial_ResetPlaytime_Response;
}
