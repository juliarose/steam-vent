// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `enums_productinfo.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EContentDescriptorID)
pub enum EContentDescriptorID {
    // @@protoc_insertion_point(enum_value:EContentDescriptorID.k_EContentDescriptor_NudityOrSexualContent)
    k_EContentDescriptor_NudityOrSexualContent = 1,
    // @@protoc_insertion_point(enum_value:EContentDescriptorID.k_EContentDescriptor_FrequentViolenceOrGore)
    k_EContentDescriptor_FrequentViolenceOrGore = 2,
    // @@protoc_insertion_point(enum_value:EContentDescriptorID.k_EContentDescriptor_AdultOnlySexualContent)
    k_EContentDescriptor_AdultOnlySexualContent = 3,
    // @@protoc_insertion_point(enum_value:EContentDescriptorID.k_EContentDescriptor_GratuitousSexualContent)
    k_EContentDescriptor_GratuitousSexualContent = 4,
    // @@protoc_insertion_point(enum_value:EContentDescriptorID.k_EContentDescriptor_AnyMatureContent)
    k_EContentDescriptor_AnyMatureContent = 5,
}

impl ::protobuf::Enum for EContentDescriptorID {
    const NAME: &'static str = "EContentDescriptorID";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EContentDescriptorID> {
        match value {
            1 => ::std::option::Option::Some(EContentDescriptorID::k_EContentDescriptor_NudityOrSexualContent),
            2 => ::std::option::Option::Some(EContentDescriptorID::k_EContentDescriptor_FrequentViolenceOrGore),
            3 => ::std::option::Option::Some(EContentDescriptorID::k_EContentDescriptor_AdultOnlySexualContent),
            4 => ::std::option::Option::Some(EContentDescriptorID::k_EContentDescriptor_GratuitousSexualContent),
            5 => ::std::option::Option::Some(EContentDescriptorID::k_EContentDescriptor_AnyMatureContent),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EContentDescriptorID> {
        match str {
            "k_EContentDescriptor_NudityOrSexualContent" => ::std::option::Option::Some(EContentDescriptorID::k_EContentDescriptor_NudityOrSexualContent),
            "k_EContentDescriptor_FrequentViolenceOrGore" => ::std::option::Option::Some(EContentDescriptorID::k_EContentDescriptor_FrequentViolenceOrGore),
            "k_EContentDescriptor_AdultOnlySexualContent" => ::std::option::Option::Some(EContentDescriptorID::k_EContentDescriptor_AdultOnlySexualContent),
            "k_EContentDescriptor_GratuitousSexualContent" => ::std::option::Option::Some(EContentDescriptorID::k_EContentDescriptor_GratuitousSexualContent),
            "k_EContentDescriptor_AnyMatureContent" => ::std::option::Option::Some(EContentDescriptorID::k_EContentDescriptor_AnyMatureContent),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EContentDescriptorID] = &[
        EContentDescriptorID::k_EContentDescriptor_NudityOrSexualContent,
        EContentDescriptorID::k_EContentDescriptor_FrequentViolenceOrGore,
        EContentDescriptorID::k_EContentDescriptor_AdultOnlySexualContent,
        EContentDescriptorID::k_EContentDescriptor_GratuitousSexualContent,
        EContentDescriptorID::k_EContentDescriptor_AnyMatureContent,
    ];
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EContentDescriptorID {
    fn default() -> Self {
        EContentDescriptorID::k_EContentDescriptor_NudityOrSexualContent
    }
}

