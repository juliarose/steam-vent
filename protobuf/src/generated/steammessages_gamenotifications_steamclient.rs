// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_gamenotifications.steamclient.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:CGameNotifications_Variable)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_Variable {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_Variable.key)
    pub key: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CGameNotifications_Variable.value)
    pub value: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_Variable.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_Variable {
    fn default() -> &'a CGameNotifications_Variable {
        <CGameNotifications_Variable as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_Variable {
    pub fn new() -> CGameNotifications_Variable {
        ::std::default::Default::default()
    }

    // optional string key = 1;

    pub fn key(&self) -> &str {
        match self.key.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_key(&mut self) {
        self.key = ::std::option::Option::None;
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        if self.key.is_none() {
            self.key = ::std::option::Option::Some(::std::string::String::new());
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        self.key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string value = 2;

    pub fn value(&self) -> &str {
        match self.value.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        if self.value.is_none() {
            self.value = ::std::option::Option::Some(::std::string::String::new());
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        self.value.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CGameNotifications_Variable {
    const NAME: &'static str = "CGameNotifications_Variable";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.value = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.key.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.value.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.key.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.value.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_Variable {
        CGameNotifications_Variable::new()
    }

    fn clear(&mut self) {
        self.key = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_Variable {
        static instance: CGameNotifications_Variable = CGameNotifications_Variable {
            key: ::std::option::Option::None,
            value: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGameNotifications_LocalizedText)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_LocalizedText {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_LocalizedText.token)
    pub token: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CGameNotifications_LocalizedText.variables)
    pub variables: ::std::vec::Vec<CGameNotifications_Variable>,
    // @@protoc_insertion_point(field:CGameNotifications_LocalizedText.rendered_text)
    pub rendered_text: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_LocalizedText.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_LocalizedText {
    fn default() -> &'a CGameNotifications_LocalizedText {
        <CGameNotifications_LocalizedText as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_LocalizedText {
    pub fn new() -> CGameNotifications_LocalizedText {
        ::std::default::Default::default()
    }

    // optional string token = 1;

    pub fn token(&self) -> &str {
        match self.token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_token(&mut self) {
        self.token = ::std::option::Option::None;
    }

    pub fn has_token(&self) -> bool {
        self.token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        if self.token.is_none() {
            self.token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.token.as_mut().unwrap()
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        self.token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string rendered_text = 3;

    pub fn rendered_text(&self) -> &str {
        match self.rendered_text.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_rendered_text(&mut self) {
        self.rendered_text = ::std::option::Option::None;
    }

    pub fn has_rendered_text(&self) -> bool {
        self.rendered_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rendered_text(&mut self, v: ::std::string::String) {
        self.rendered_text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rendered_text(&mut self) -> &mut ::std::string::String {
        if self.rendered_text.is_none() {
            self.rendered_text = ::std::option::Option::Some(::std::string::String::new());
        }
        self.rendered_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_rendered_text(&mut self) -> ::std::string::String {
        self.rendered_text.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CGameNotifications_LocalizedText {
    const NAME: &'static str = "CGameNotifications_LocalizedText";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.token = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.variables.push(is.read_message()?);
                },
                26 => {
                    self.rendered_text = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.token.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.variables {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.rendered_text.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.token.as_ref() {
            os.write_string(1, v)?;
        }
        for v in &self.variables {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.rendered_text.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_LocalizedText {
        CGameNotifications_LocalizedText::new()
    }

    fn clear(&mut self) {
        self.token = ::std::option::Option::None;
        self.variables.clear();
        self.rendered_text = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_LocalizedText {
        static instance: CGameNotifications_LocalizedText = CGameNotifications_LocalizedText {
            token: ::std::option::Option::None,
            variables: ::std::vec::Vec::new(),
            rendered_text: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGameNotifications_UserStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_UserStatus {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_UserStatus.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameNotifications_UserStatus.state)
    pub state: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CGameNotifications_UserStatus.title)
    pub title: ::protobuf::MessageField<CGameNotifications_LocalizedText>,
    // @@protoc_insertion_point(field:CGameNotifications_UserStatus.message)
    pub message: ::protobuf::MessageField<CGameNotifications_LocalizedText>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_UserStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_UserStatus {
    fn default() -> &'a CGameNotifications_UserStatus {
        <CGameNotifications_UserStatus as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_UserStatus {
    pub fn new() -> CGameNotifications_UserStatus {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional string state = 2;

    pub fn state(&self) -> &str {
        match self.state.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_state(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: ::std::string::String) {
        self.state = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state(&mut self) -> &mut ::std::string::String {
        if self.state.is_none() {
            self.state = ::std::option::Option::Some(::std::string::String::new());
        }
        self.state.as_mut().unwrap()
    }

    // Take field
    pub fn take_state(&mut self) -> ::std::string::String {
        self.state.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CGameNotifications_UserStatus {
    const NAME: &'static str = "CGameNotifications_UserStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    self.state = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.title)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.message)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.state.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.title.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.message.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.state.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.title.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.message.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_UserStatus {
        CGameNotifications_UserStatus::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.state = ::std::option::Option::None;
        self.title.clear();
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_UserStatus {
        static instance: CGameNotifications_UserStatus = CGameNotifications_UserStatus {
            steamid: ::std::option::Option::None,
            state: ::std::option::Option::None,
            title: ::protobuf::MessageField::none(),
            message: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Creates an async game session"]
// @@protoc_insertion_point(message:CGameNotifications_CreateSession_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_CreateSession_Request {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_CreateSession_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameNotifications_CreateSession_Request.context)
    pub context: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameNotifications_CreateSession_Request.title)
    pub title: ::protobuf::MessageField<CGameNotifications_LocalizedText>,
    // @@protoc_insertion_point(field:CGameNotifications_CreateSession_Request.users)
    pub users: ::std::vec::Vec<CGameNotifications_UserStatus>,
    // @@protoc_insertion_point(field:CGameNotifications_CreateSession_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_CreateSession_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_CreateSession_Request {
    fn default() -> &'a CGameNotifications_CreateSession_Request {
        <CGameNotifications_CreateSession_Request as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_CreateSession_Request {
    pub fn new() -> CGameNotifications_CreateSession_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 context = 2;

    pub fn context(&self) -> u64 {
        self.context.unwrap_or(0)
    }

    pub fn clear_context(&mut self) {
        self.context = ::std::option::Option::None;
    }

    pub fn has_context(&self) -> bool {
        self.context.is_some()
    }

    // Param is passed by value, moved
    pub fn set_context(&mut self, v: u64) {
        self.context = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 5;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CGameNotifications_CreateSession_Request {
    const NAME: &'static str = "CGameNotifications_CreateSession_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.context = ::std::option::Option::Some(is.read_uint64()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.title)?;
                },
                34 => {
                    self.users.push(is.read_message()?);
                },
                41 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.context {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.title.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.users {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.context {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.title.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        for v in &self.users {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if let Some(v) = self.steamid {
            os.write_fixed64(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_CreateSession_Request {
        CGameNotifications_CreateSession_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.context = ::std::option::Option::None;
        self.title.clear();
        self.users.clear();
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_CreateSession_Request {
        static instance: CGameNotifications_CreateSession_Request = CGameNotifications_CreateSession_Request {
            appid: ::std::option::Option::None,
            context: ::std::option::Option::None,
            title: ::protobuf::MessageField::none(),
            users: ::std::vec::Vec::new(),
            steamid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGameNotifications_CreateSession_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_CreateSession_Response {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_CreateSession_Response.sessionid)
    pub sessionid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_CreateSession_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_CreateSession_Response {
    fn default() -> &'a CGameNotifications_CreateSession_Response {
        <CGameNotifications_CreateSession_Response as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_CreateSession_Response {
    pub fn new() -> CGameNotifications_CreateSession_Response {
        ::std::default::Default::default()
    }

    // optional uint64 sessionid = 1;

    pub fn sessionid(&self) -> u64 {
        self.sessionid.unwrap_or(0)
    }

    pub fn clear_sessionid(&mut self) {
        self.sessionid = ::std::option::Option::None;
    }

    pub fn has_sessionid(&self) -> bool {
        self.sessionid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sessionid(&mut self, v: u64) {
        self.sessionid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CGameNotifications_CreateSession_Response {
    const NAME: &'static str = "CGameNotifications_CreateSession_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.sessionid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.sessionid {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.sessionid {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_CreateSession_Response {
        CGameNotifications_CreateSession_Response::new()
    }

    fn clear(&mut self) {
        self.sessionid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_CreateSession_Response {
        static instance: CGameNotifications_CreateSession_Response = CGameNotifications_CreateSession_Response {
            sessionid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Deletes an async game session"]
// @@protoc_insertion_point(message:CGameNotifications_DeleteSession_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_DeleteSession_Request {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_DeleteSession_Request.sessionid)
    pub sessionid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameNotifications_DeleteSession_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameNotifications_DeleteSession_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_DeleteSession_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_DeleteSession_Request {
    fn default() -> &'a CGameNotifications_DeleteSession_Request {
        <CGameNotifications_DeleteSession_Request as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_DeleteSession_Request {
    pub fn new() -> CGameNotifications_DeleteSession_Request {
        ::std::default::Default::default()
    }

    // optional uint64 sessionid = 1;

    pub fn sessionid(&self) -> u64 {
        self.sessionid.unwrap_or(0)
    }

    pub fn clear_sessionid(&mut self) {
        self.sessionid = ::std::option::Option::None;
    }

    pub fn has_sessionid(&self) -> bool {
        self.sessionid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sessionid(&mut self, v: u64) {
        self.sessionid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 3;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CGameNotifications_DeleteSession_Request {
    const NAME: &'static str = "CGameNotifications_DeleteSession_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.sessionid = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                25 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.sessionid {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.sessionid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_DeleteSession_Request {
        CGameNotifications_DeleteSession_Request::new()
    }

    fn clear(&mut self) {
        self.sessionid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_DeleteSession_Request {
        static instance: CGameNotifications_DeleteSession_Request = CGameNotifications_DeleteSession_Request {
            sessionid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGameNotifications_DeleteSession_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_DeleteSession_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_DeleteSession_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_DeleteSession_Response {
    fn default() -> &'a CGameNotifications_DeleteSession_Response {
        <CGameNotifications_DeleteSession_Response as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_DeleteSession_Response {
    pub fn new() -> CGameNotifications_DeleteSession_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CGameNotifications_DeleteSession_Response {
    const NAME: &'static str = "CGameNotifications_DeleteSession_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_DeleteSession_Response {
        CGameNotifications_DeleteSession_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_DeleteSession_Response {
        static instance: CGameNotifications_DeleteSession_Response = CGameNotifications_DeleteSession_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Updates an async game session"]
// @@protoc_insertion_point(message:CGameNotifications_UpdateSession_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_UpdateSession_Request {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_UpdateSession_Request.sessionid)
    pub sessionid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameNotifications_UpdateSession_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameNotifications_UpdateSession_Request.title)
    pub title: ::protobuf::MessageField<CGameNotifications_LocalizedText>,
    // @@protoc_insertion_point(field:CGameNotifications_UpdateSession_Request.users)
    pub users: ::std::vec::Vec<CGameNotifications_UserStatus>,
    // @@protoc_insertion_point(field:CGameNotifications_UpdateSession_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_UpdateSession_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_UpdateSession_Request {
    fn default() -> &'a CGameNotifications_UpdateSession_Request {
        <CGameNotifications_UpdateSession_Request as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_UpdateSession_Request {
    pub fn new() -> CGameNotifications_UpdateSession_Request {
        ::std::default::Default::default()
    }

    // optional uint64 sessionid = 1;

    pub fn sessionid(&self) -> u64 {
        self.sessionid.unwrap_or(0)
    }

    pub fn clear_sessionid(&mut self) {
        self.sessionid = ::std::option::Option::None;
    }

    pub fn has_sessionid(&self) -> bool {
        self.sessionid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sessionid(&mut self, v: u64) {
        self.sessionid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 6;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CGameNotifications_UpdateSession_Request {
    const NAME: &'static str = "CGameNotifications_UpdateSession_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.sessionid = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.title)?;
                },
                34 => {
                    self.users.push(is.read_message()?);
                },
                49 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.sessionid {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.title.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.users {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.sessionid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.title.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        for v in &self.users {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if let Some(v) = self.steamid {
            os.write_fixed64(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_UpdateSession_Request {
        CGameNotifications_UpdateSession_Request::new()
    }

    fn clear(&mut self) {
        self.sessionid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.title.clear();
        self.users.clear();
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_UpdateSession_Request {
        static instance: CGameNotifications_UpdateSession_Request = CGameNotifications_UpdateSession_Request {
            sessionid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            title: ::protobuf::MessageField::none(),
            users: ::std::vec::Vec::new(),
            steamid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGameNotifications_UpdateSession_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_UpdateSession_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_UpdateSession_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_UpdateSession_Response {
    fn default() -> &'a CGameNotifications_UpdateSession_Response {
        <CGameNotifications_UpdateSession_Response as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_UpdateSession_Response {
    pub fn new() -> CGameNotifications_UpdateSession_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CGameNotifications_UpdateSession_Response {
    const NAME: &'static str = "CGameNotifications_UpdateSession_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_UpdateSession_Response {
        CGameNotifications_UpdateSession_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_UpdateSession_Response {
        static instance: CGameNotifications_UpdateSession_Response = CGameNotifications_UpdateSession_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Enumerates a user's sessions"]
// @@protoc_insertion_point(message:CGameNotifications_EnumerateSessions_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_EnumerateSessions_Request {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_EnumerateSessions_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameNotifications_EnumerateSessions_Request.include_all_user_messages)
    pub include_all_user_messages: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CGameNotifications_EnumerateSessions_Request.include_auth_user_message)
    pub include_auth_user_message: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CGameNotifications_EnumerateSessions_Request.language)
    pub language: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_EnumerateSessions_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_EnumerateSessions_Request {
    fn default() -> &'a CGameNotifications_EnumerateSessions_Request {
        <CGameNotifications_EnumerateSessions_Request as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_EnumerateSessions_Request {
    pub fn new() -> CGameNotifications_EnumerateSessions_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional bool include_all_user_messages = 3;

    pub fn include_all_user_messages(&self) -> bool {
        self.include_all_user_messages.unwrap_or(false)
    }

    pub fn clear_include_all_user_messages(&mut self) {
        self.include_all_user_messages = ::std::option::Option::None;
    }

    pub fn has_include_all_user_messages(&self) -> bool {
        self.include_all_user_messages.is_some()
    }

    // Param is passed by value, moved
    pub fn set_include_all_user_messages(&mut self, v: bool) {
        self.include_all_user_messages = ::std::option::Option::Some(v);
    }

    // optional bool include_auth_user_message = 4;

    pub fn include_auth_user_message(&self) -> bool {
        self.include_auth_user_message.unwrap_or(false)
    }

    pub fn clear_include_auth_user_message(&mut self) {
        self.include_auth_user_message = ::std::option::Option::None;
    }

    pub fn has_include_auth_user_message(&self) -> bool {
        self.include_auth_user_message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_include_auth_user_message(&mut self, v: bool) {
        self.include_auth_user_message = ::std::option::Option::Some(v);
    }

    // optional string language = 5;

    pub fn language(&self) -> &str {
        match self.language.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        if self.language.is_none() {
            self.language = ::std::option::Option::Some(::std::string::String::new());
        }
        self.language.as_mut().unwrap()
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        self.language.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CGameNotifications_EnumerateSessions_Request {
    const NAME: &'static str = "CGameNotifications_EnumerateSessions_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.include_all_user_messages = ::std::option::Option::Some(is.read_bool()?);
                },
                32 => {
                    self.include_auth_user_message = ::std::option::Option::Some(is.read_bool()?);
                },
                42 => {
                    self.language = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.include_all_user_messages {
            my_size += 1 + 1;
        }
        if let Some(v) = self.include_auth_user_message {
            my_size += 1 + 1;
        }
        if let Some(v) = self.language.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.include_all_user_messages {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.include_auth_user_message {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.language.as_ref() {
            os.write_string(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_EnumerateSessions_Request {
        CGameNotifications_EnumerateSessions_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.include_all_user_messages = ::std::option::Option::None;
        self.include_auth_user_message = ::std::option::Option::None;
        self.language = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_EnumerateSessions_Request {
        static instance: CGameNotifications_EnumerateSessions_Request = CGameNotifications_EnumerateSessions_Request {
            appid: ::std::option::Option::None,
            include_all_user_messages: ::std::option::Option::None,
            include_auth_user_message: ::std::option::Option::None,
            language: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGameNotifications_Session)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_Session {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_Session.sessionid)
    pub sessionid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameNotifications_Session.appid)
    pub appid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameNotifications_Session.context)
    pub context: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameNotifications_Session.title)
    pub title: ::protobuf::MessageField<CGameNotifications_LocalizedText>,
    // @@protoc_insertion_point(field:CGameNotifications_Session.time_created)
    pub time_created: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameNotifications_Session.time_updated)
    pub time_updated: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameNotifications_Session.user_status)
    pub user_status: ::std::vec::Vec<CGameNotifications_UserStatus>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_Session.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_Session {
    fn default() -> &'a CGameNotifications_Session {
        <CGameNotifications_Session as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_Session {
    pub fn new() -> CGameNotifications_Session {
        ::std::default::Default::default()
    }

    // optional uint64 sessionid = 1;

    pub fn sessionid(&self) -> u64 {
        self.sessionid.unwrap_or(0)
    }

    pub fn clear_sessionid(&mut self) {
        self.sessionid = ::std::option::Option::None;
    }

    pub fn has_sessionid(&self) -> bool {
        self.sessionid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sessionid(&mut self, v: u64) {
        self.sessionid = ::std::option::Option::Some(v);
    }

    // optional uint64 appid = 2;

    pub fn appid(&self) -> u64 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u64) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 context = 3;

    pub fn context(&self) -> u64 {
        self.context.unwrap_or(0)
    }

    pub fn clear_context(&mut self) {
        self.context = ::std::option::Option::None;
    }

    pub fn has_context(&self) -> bool {
        self.context.is_some()
    }

    // Param is passed by value, moved
    pub fn set_context(&mut self, v: u64) {
        self.context = ::std::option::Option::Some(v);
    }

    // optional uint32 time_created = 5;

    pub fn time_created(&self) -> u32 {
        self.time_created.unwrap_or(0)
    }

    pub fn clear_time_created(&mut self) {
        self.time_created = ::std::option::Option::None;
    }

    pub fn has_time_created(&self) -> bool {
        self.time_created.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_created(&mut self, v: u32) {
        self.time_created = ::std::option::Option::Some(v);
    }

    // optional uint32 time_updated = 6;

    pub fn time_updated(&self) -> u32 {
        self.time_updated.unwrap_or(0)
    }

    pub fn clear_time_updated(&mut self) {
        self.time_updated = ::std::option::Option::None;
    }

    pub fn has_time_updated(&self) -> bool {
        self.time_updated.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_updated(&mut self, v: u32) {
        self.time_updated = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CGameNotifications_Session {
    const NAME: &'static str = "CGameNotifications_Session";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.sessionid = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.context = ::std::option::Option::Some(is.read_uint64()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.title)?;
                },
                40 => {
                    self.time_created = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.time_updated = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    self.user_status.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.sessionid {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.context {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        if let Some(v) = self.title.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.time_created {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.time_updated {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        for value in &self.user_status {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.sessionid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.context {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.title.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.time_created {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.time_updated {
            os.write_uint32(6, v)?;
        }
        for v in &self.user_status {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_Session {
        CGameNotifications_Session::new()
    }

    fn clear(&mut self) {
        self.sessionid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.context = ::std::option::Option::None;
        self.title.clear();
        self.time_created = ::std::option::Option::None;
        self.time_updated = ::std::option::Option::None;
        self.user_status.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_Session {
        static instance: CGameNotifications_Session = CGameNotifications_Session {
            sessionid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            context: ::std::option::Option::None,
            title: ::protobuf::MessageField::none(),
            time_created: ::std::option::Option::None,
            time_updated: ::std::option::Option::None,
            user_status: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGameNotifications_EnumerateSessions_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_EnumerateSessions_Response {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_EnumerateSessions_Response.sessions)
    pub sessions: ::std::vec::Vec<CGameNotifications_Session>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_EnumerateSessions_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_EnumerateSessions_Response {
    fn default() -> &'a CGameNotifications_EnumerateSessions_Response {
        <CGameNotifications_EnumerateSessions_Response as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_EnumerateSessions_Response {
    pub fn new() -> CGameNotifications_EnumerateSessions_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CGameNotifications_EnumerateSessions_Response {
    const NAME: &'static str = "CGameNotifications_EnumerateSessions_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.sessions.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.sessions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.sessions {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_EnumerateSessions_Response {
        CGameNotifications_EnumerateSessions_Response::new()
    }

    fn clear(&mut self) {
        self.sessions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_EnumerateSessions_Response {
        static instance: CGameNotifications_EnumerateSessions_Response = CGameNotifications_EnumerateSessions_Response {
            sessions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Get the details for a specific session"]
// @@protoc_insertion_point(message:CGameNotifications_GetSessionDetails_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_GetSessionDetails_Request {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_GetSessionDetails_Request.sessions)
    pub sessions: ::std::vec::Vec<cgame_notifications_get_session_details_request::RequestedSession>,
    // @@protoc_insertion_point(field:CGameNotifications_GetSessionDetails_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameNotifications_GetSessionDetails_Request.language)
    pub language: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_GetSessionDetails_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_GetSessionDetails_Request {
    fn default() -> &'a CGameNotifications_GetSessionDetails_Request {
        <CGameNotifications_GetSessionDetails_Request as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_GetSessionDetails_Request {
    pub fn new() -> CGameNotifications_GetSessionDetails_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional string language = 3;

    pub fn language(&self) -> &str {
        match self.language.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        if self.language.is_none() {
            self.language = ::std::option::Option::Some(::std::string::String::new());
        }
        self.language.as_mut().unwrap()
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        self.language.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CGameNotifications_GetSessionDetails_Request {
    const NAME: &'static str = "CGameNotifications_GetSessionDetails_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.sessions.push(is.read_message()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.language = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.sessions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.language.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.sessions {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.language.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_GetSessionDetails_Request {
        CGameNotifications_GetSessionDetails_Request::new()
    }

    fn clear(&mut self) {
        self.sessions.clear();
        self.appid = ::std::option::Option::None;
        self.language = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_GetSessionDetails_Request {
        static instance: CGameNotifications_GetSessionDetails_Request = CGameNotifications_GetSessionDetails_Request {
            sessions: ::std::vec::Vec::new(),
            appid: ::std::option::Option::None,
            language: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CGameNotifications_GetSessionDetails_Request`
pub mod cgame_notifications_get_session_details_request {
    // @@protoc_insertion_point(message:CGameNotifications_GetSessionDetails_Request.RequestedSession)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct RequestedSession {
        // message fields
        // @@protoc_insertion_point(field:CGameNotifications_GetSessionDetails_Request.RequestedSession.sessionid)
        pub sessionid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CGameNotifications_GetSessionDetails_Request.RequestedSession.include_auth_user_message)
        pub include_auth_user_message: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:CGameNotifications_GetSessionDetails_Request.RequestedSession.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a RequestedSession {
        fn default() -> &'a RequestedSession {
            <RequestedSession as ::protobuf::Message>::default_instance()
        }
    }

    impl RequestedSession {
        pub fn new() -> RequestedSession {
            ::std::default::Default::default()
        }

        // optional uint64 sessionid = 1;

        pub fn sessionid(&self) -> u64 {
            self.sessionid.unwrap_or(0)
        }

        pub fn clear_sessionid(&mut self) {
            self.sessionid = ::std::option::Option::None;
        }

        pub fn has_sessionid(&self) -> bool {
            self.sessionid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_sessionid(&mut self, v: u64) {
            self.sessionid = ::std::option::Option::Some(v);
        }

        // optional bool include_auth_user_message = 3;

        pub fn include_auth_user_message(&self) -> bool {
            self.include_auth_user_message.unwrap_or(false)
        }

        pub fn clear_include_auth_user_message(&mut self) {
            self.include_auth_user_message = ::std::option::Option::None;
        }

        pub fn has_include_auth_user_message(&self) -> bool {
            self.include_auth_user_message.is_some()
        }

        // Param is passed by value, moved
        pub fn set_include_auth_user_message(&mut self, v: bool) {
            self.include_auth_user_message = ::std::option::Option::Some(v);
        }
    }

    impl ::protobuf::Message for RequestedSession {
        const NAME: &'static str = "RequestedSession";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.sessionid = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    24 => {
                        self.include_auth_user_message = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.sessionid {
                my_size += ::protobuf::rt::uint64_size(1, v);
            }
            if let Some(v) = self.include_auth_user_message {
                my_size += 1 + 1;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.sessionid {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.include_auth_user_message {
                os.write_bool(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> RequestedSession {
            RequestedSession::new()
        }

        fn clear(&mut self) {
            self.sessionid = ::std::option::Option::None;
            self.include_auth_user_message = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static RequestedSession {
            static instance: RequestedSession = RequestedSession {
                sessionid: ::std::option::Option::None,
                include_auth_user_message: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CGameNotifications_GetSessionDetails_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_GetSessionDetails_Response {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_GetSessionDetails_Response.sessions)
    pub sessions: ::std::vec::Vec<CGameNotifications_Session>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_GetSessionDetails_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_GetSessionDetails_Response {
    fn default() -> &'a CGameNotifications_GetSessionDetails_Response {
        <CGameNotifications_GetSessionDetails_Response as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_GetSessionDetails_Response {
    pub fn new() -> CGameNotifications_GetSessionDetails_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CGameNotifications_GetSessionDetails_Response {
    const NAME: &'static str = "CGameNotifications_GetSessionDetails_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.sessions.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.sessions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.sessions {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_GetSessionDetails_Response {
        CGameNotifications_GetSessionDetails_Response::new()
    }

    fn clear(&mut self) {
        self.sessions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_GetSessionDetails_Response {
        static instance: CGameNotifications_GetSessionDetails_Response = CGameNotifications_GetSessionDetails_Response {
            sessions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:GameNotificationSettings)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GameNotificationSettings {
    // message fields
    // @@protoc_insertion_point(field:GameNotificationSettings.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:GameNotificationSettings.allow_notifications)
    pub allow_notifications: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:GameNotificationSettings.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GameNotificationSettings {
    fn default() -> &'a GameNotificationSettings {
        <GameNotificationSettings as ::protobuf::Message>::default_instance()
    }
}

impl GameNotificationSettings {
    pub fn new() -> GameNotificationSettings {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional bool allow_notifications = 2;

    pub fn allow_notifications(&self) -> bool {
        self.allow_notifications.unwrap_or(false)
    }

    pub fn clear_allow_notifications(&mut self) {
        self.allow_notifications = ::std::option::Option::None;
    }

    pub fn has_allow_notifications(&self) -> bool {
        self.allow_notifications.is_some()
    }

    // Param is passed by value, moved
    pub fn set_allow_notifications(&mut self, v: bool) {
        self.allow_notifications = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for GameNotificationSettings {
    const NAME: &'static str = "GameNotificationSettings";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.allow_notifications = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.allow_notifications {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.allow_notifications {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GameNotificationSettings {
        GameNotificationSettings::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.allow_notifications = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GameNotificationSettings {
        static instance: GameNotificationSettings = GameNotificationSettings {
            appid: ::std::option::Option::None,
            allow_notifications: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Updates whether a user allows game notifications for a specific app"]
// @@protoc_insertion_point(message:CGameNotifications_UpdateNotificationSettings_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_UpdateNotificationSettings_Request {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_UpdateNotificationSettings_Request.game_notification_settings)
    pub game_notification_settings: ::std::vec::Vec<GameNotificationSettings>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_UpdateNotificationSettings_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_UpdateNotificationSettings_Request {
    fn default() -> &'a CGameNotifications_UpdateNotificationSettings_Request {
        <CGameNotifications_UpdateNotificationSettings_Request as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_UpdateNotificationSettings_Request {
    pub fn new() -> CGameNotifications_UpdateNotificationSettings_Request {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CGameNotifications_UpdateNotificationSettings_Request {
    const NAME: &'static str = "CGameNotifications_UpdateNotificationSettings_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.game_notification_settings.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.game_notification_settings {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.game_notification_settings {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_UpdateNotificationSettings_Request {
        CGameNotifications_UpdateNotificationSettings_Request::new()
    }

    fn clear(&mut self) {
        self.game_notification_settings.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_UpdateNotificationSettings_Request {
        static instance: CGameNotifications_UpdateNotificationSettings_Request = CGameNotifications_UpdateNotificationSettings_Request {
            game_notification_settings: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGameNotifications_UpdateNotificationSettings_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_UpdateNotificationSettings_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_UpdateNotificationSettings_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_UpdateNotificationSettings_Response {
    fn default() -> &'a CGameNotifications_UpdateNotificationSettings_Response {
        <CGameNotifications_UpdateNotificationSettings_Response as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_UpdateNotificationSettings_Response {
    pub fn new() -> CGameNotifications_UpdateNotificationSettings_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CGameNotifications_UpdateNotificationSettings_Response {
    const NAME: &'static str = "CGameNotifications_UpdateNotificationSettings_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_UpdateNotificationSettings_Response {
        CGameNotifications_UpdateNotificationSettings_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_UpdateNotificationSettings_Response {
        static instance: CGameNotifications_UpdateNotificationSettings_Response = CGameNotifications_UpdateNotificationSettings_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Requests that the user opt into notifications"]
// @@protoc_insertion_point(message:CGameNotifications_OnNotificationsRequested_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_OnNotificationsRequested_Notification {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_OnNotificationsRequested_Notification.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameNotifications_OnNotificationsRequested_Notification.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_OnNotificationsRequested_Notification.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_OnNotificationsRequested_Notification {
    fn default() -> &'a CGameNotifications_OnNotificationsRequested_Notification {
        <CGameNotifications_OnNotificationsRequested_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_OnNotificationsRequested_Notification {
    pub fn new() -> CGameNotifications_OnNotificationsRequested_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CGameNotifications_OnNotificationsRequested_Notification {
    const NAME: &'static str = "CGameNotifications_OnNotificationsRequested_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_OnNotificationsRequested_Notification {
        CGameNotifications_OnNotificationsRequested_Notification::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_OnNotificationsRequested_Notification {
        static instance: CGameNotifications_OnNotificationsRequested_Notification = CGameNotifications_OnNotificationsRequested_Notification {
            steamid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Notification that the user's status has changed"]
// @@protoc_insertion_point(message:CGameNotifications_OnUserStatusChanged_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameNotifications_OnUserStatusChanged_Notification {
    // message fields
    // @@protoc_insertion_point(field:CGameNotifications_OnUserStatusChanged_Notification.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameNotifications_OnUserStatusChanged_Notification.sessionid)
    pub sessionid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameNotifications_OnUserStatusChanged_Notification.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameNotifications_OnUserStatusChanged_Notification.status)
    pub status: ::protobuf::MessageField<CGameNotifications_UserStatus>,
    // @@protoc_insertion_point(field:CGameNotifications_OnUserStatusChanged_Notification.removed)
    pub removed: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameNotifications_OnUserStatusChanged_Notification.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameNotifications_OnUserStatusChanged_Notification {
    fn default() -> &'a CGameNotifications_OnUserStatusChanged_Notification {
        <CGameNotifications_OnUserStatusChanged_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CGameNotifications_OnUserStatusChanged_Notification {
    pub fn new() -> CGameNotifications_OnUserStatusChanged_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint64 sessionid = 2;

    pub fn sessionid(&self) -> u64 {
        self.sessionid.unwrap_or(0)
    }

    pub fn clear_sessionid(&mut self) {
        self.sessionid = ::std::option::Option::None;
    }

    pub fn has_sessionid(&self) -> bool {
        self.sessionid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sessionid(&mut self, v: u64) {
        self.sessionid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 3;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional bool removed = 5;

    pub fn removed(&self) -> bool {
        self.removed.unwrap_or(false)
    }

    pub fn clear_removed(&mut self) {
        self.removed = ::std::option::Option::None;
    }

    pub fn has_removed(&self) -> bool {
        self.removed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_removed(&mut self, v: bool) {
        self.removed = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CGameNotifications_OnUserStatusChanged_Notification {
    const NAME: &'static str = "CGameNotifications_OnUserStatusChanged_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.sessionid = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.status)?;
                },
                40 => {
                    self.removed = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.sessionid {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.removed {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.sessionid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.status.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.removed {
            os.write_bool(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameNotifications_OnUserStatusChanged_Notification {
        CGameNotifications_OnUserStatusChanged_Notification::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.sessionid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.status.clear();
        self.removed = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameNotifications_OnUserStatusChanged_Notification {
        static instance: CGameNotifications_OnUserStatusChanged_Notification = CGameNotifications_OnUserStatusChanged_Notification {
            steamid: ::std::option::Option::None,
            sessionid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            status: ::protobuf::MessageField::none(),
            removed: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}
#[allow(unused_imports)]
use crate::steammessages_base::*;
#[allow(unused_imports)]
use crate::steammessages_unified_base_steamclient::*;
impl crate::RpcMessage for CGameNotifications_Variable {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CGameNotifications_LocalizedText {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CGameNotifications_UserStatus {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CGameNotifications_CreateSession_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CGameNotifications_CreateSession_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CGameNotifications_DeleteSession_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CGameNotifications_DeleteSession_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CGameNotifications_UpdateSession_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CGameNotifications_UpdateSession_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CGameNotifications_EnumerateSessions_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CGameNotifications_Session {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CGameNotifications_EnumerateSessions_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CGameNotifications_GetSessionDetails_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CGameNotifications_GetSessionDetails_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for GameNotificationSettings {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CGameNotifications_UpdateNotificationSettings_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CGameNotifications_UpdateNotificationSettings_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CGameNotifications_OnNotificationsRequested_Notification {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CGameNotifications_OnUserStatusChanged_Notification {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
///A service for functions related to the asyncronous game notification server.
struct GameNotifications {}
impl crate::RpcService for GameNotifications {
    const SERVICE_NAME: &'static str = "GameNotifications";
}
///Client notifications
struct GameNotificationsClient {}
impl crate::RpcService for GameNotificationsClient {
    const SERVICE_NAME: &'static str = "GameNotificationsClient";
}
impl crate::RpcMethod for CGameNotifications_CreateSession_Request {
    const METHOD_NAME: &'static str = "GameNotifications.UserCreateSession#1";
    type Response = CGameNotifications_CreateSession_Response;
}
impl crate::RpcMethod for CGameNotifications_DeleteSession_Request {
    const METHOD_NAME: &'static str = "GameNotifications.UserDeleteSession#1";
    type Response = CGameNotifications_DeleteSession_Response;
}
impl crate::RpcMethod for CGameNotifications_EnumerateSessions_Request {
    const METHOD_NAME: &'static str = "GameNotifications.EnumerateSessions#1";
    type Response = CGameNotifications_EnumerateSessions_Response;
}
impl crate::RpcMethod for CGameNotifications_GetSessionDetails_Request {
    const METHOD_NAME: &'static str = "GameNotifications.GetSessionDetails#1";
    type Response = CGameNotifications_GetSessionDetails_Response;
}
impl crate::RpcMethod for CGameNotifications_OnNotificationsRequested_Notification {
    const METHOD_NAME: &'static str = "GameNotificationsClient.OnNotificationsRequested#1";
    type Response = ();
}
impl crate::RpcMethod for CGameNotifications_OnUserStatusChanged_Notification {
    const METHOD_NAME: &'static str = "GameNotificationsClient.OnUserStatusChanged#1";
    type Response = ();
}
impl crate::RpcMethod for CGameNotifications_UpdateNotificationSettings_Request {
    const METHOD_NAME: &'static str = "GameNotifications.UpdateNotificationSettings#1";
    type Response = CGameNotifications_UpdateNotificationSettings_Response;
}
impl crate::RpcMethod for CGameNotifications_UpdateSession_Request {
    const METHOD_NAME: &'static str = "GameNotifications.UserUpdateSession#1";
    type Response = CGameNotifications_UpdateSession_Response;
}
