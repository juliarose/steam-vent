// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_useraccount.steamclient.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

#[doc = "Gets the available promotional discounts available to the user"]
// @@protoc_insertion_point(message:CUserAccount_GetAvailableValveDiscountPromotions_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_GetAvailableValveDiscountPromotions_Request {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_GetAvailableValveDiscountPromotions_Request.country_code)
    pub country_code: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_GetAvailableValveDiscountPromotions_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_GetAvailableValveDiscountPromotions_Request {
    fn default() -> &'a CUserAccount_GetAvailableValveDiscountPromotions_Request {
        <CUserAccount_GetAvailableValveDiscountPromotions_Request as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_GetAvailableValveDiscountPromotions_Request {
    pub fn new() -> CUserAccount_GetAvailableValveDiscountPromotions_Request {
        ::std::default::Default::default()
    }

    // optional string country_code = 1;

    pub fn country_code(&self) -> &str {
        match self.country_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_country_code(&mut self) {
        self.country_code = ::std::option::Option::None;
    }

    pub fn has_country_code(&self) -> bool {
        self.country_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_country_code(&mut self, v: ::std::string::String) {
        self.country_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_country_code(&mut self) -> &mut ::std::string::String {
        if self.country_code.is_none() {
            self.country_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.country_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_country_code(&mut self) -> ::std::string::String {
        self.country_code.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CUserAccount_GetAvailableValveDiscountPromotions_Request {
    const NAME: &'static str = "CUserAccount_GetAvailableValveDiscountPromotions_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.country_code = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.country_code.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.country_code.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_GetAvailableValveDiscountPromotions_Request {
        CUserAccount_GetAvailableValveDiscountPromotions_Request::new()
    }

    fn clear(&mut self) {
        self.country_code = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_GetAvailableValveDiscountPromotions_Request {
        static instance: CUserAccount_GetAvailableValveDiscountPromotions_Request = CUserAccount_GetAvailableValveDiscountPromotions_Request {
            country_code: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CUserAccount_GetAvailableValveDiscountPromotions_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_GetAvailableValveDiscountPromotions_Response {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_GetAvailableValveDiscountPromotions_Response.promotions)
    pub promotions: ::std::vec::Vec<cuser_account_get_available_valve_discount_promotions_response::ValveDiscountPromotionDetails>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_GetAvailableValveDiscountPromotions_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_GetAvailableValveDiscountPromotions_Response {
    fn default() -> &'a CUserAccount_GetAvailableValveDiscountPromotions_Response {
        <CUserAccount_GetAvailableValveDiscountPromotions_Response as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_GetAvailableValveDiscountPromotions_Response {
    pub fn new() -> CUserAccount_GetAvailableValveDiscountPromotions_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CUserAccount_GetAvailableValveDiscountPromotions_Response {
    const NAME: &'static str = "CUserAccount_GetAvailableValveDiscountPromotions_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.promotions.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.promotions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.promotions {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_GetAvailableValveDiscountPromotions_Response {
        CUserAccount_GetAvailableValveDiscountPromotions_Response::new()
    }

    fn clear(&mut self) {
        self.promotions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_GetAvailableValveDiscountPromotions_Response {
        static instance: CUserAccount_GetAvailableValveDiscountPromotions_Response = CUserAccount_GetAvailableValveDiscountPromotions_Response {
            promotions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CUserAccount_GetAvailableValveDiscountPromotions_Response`
pub mod cuser_account_get_available_valve_discount_promotions_response {
    // @@protoc_insertion_point(message:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ValveDiscountPromotionDetails {
        // message fields
        // @@protoc_insertion_point(field:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.promotionid)
        pub promotionid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.promotion_description)
        pub promotion_description: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.minimum_cart_amount)
        pub minimum_cart_amount: ::std::option::Option<i64>,
        // @@protoc_insertion_point(field:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.minimum_cart_amount_for_display)
        pub minimum_cart_amount_for_display: ::std::option::Option<i64>,
        // @@protoc_insertion_point(field:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.discount_amount)
        pub discount_amount: ::std::option::Option<i64>,
        // @@protoc_insertion_point(field:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.currency_code)
        pub currency_code: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.available_use_count)
        pub available_use_count: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.promotional_discount_type)
        pub promotional_discount_type: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.loyalty_reward_id)
        pub loyalty_reward_id: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.localized_name_token)
        pub localized_name_token: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.max_use_count)
        pub max_use_count: ::std::option::Option<i32>,
        // special fields
        // @@protoc_insertion_point(special_field:CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ValveDiscountPromotionDetails {
        fn default() -> &'a ValveDiscountPromotionDetails {
            <ValveDiscountPromotionDetails as ::protobuf::Message>::default_instance()
        }
    }

    impl ValveDiscountPromotionDetails {
        pub fn new() -> ValveDiscountPromotionDetails {
            ::std::default::Default::default()
        }

        // optional uint32 promotionid = 1;

        pub fn promotionid(&self) -> u32 {
            self.promotionid.unwrap_or(0)
        }

        pub fn clear_promotionid(&mut self) {
            self.promotionid = ::std::option::Option::None;
        }

        pub fn has_promotionid(&self) -> bool {
            self.promotionid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_promotionid(&mut self, v: u32) {
            self.promotionid = ::std::option::Option::Some(v);
        }

        // optional string promotion_description = 2;

        pub fn promotion_description(&self) -> &str {
            match self.promotion_description.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_promotion_description(&mut self) {
            self.promotion_description = ::std::option::Option::None;
        }

        pub fn has_promotion_description(&self) -> bool {
            self.promotion_description.is_some()
        }

        // Param is passed by value, moved
        pub fn set_promotion_description(&mut self, v: ::std::string::String) {
            self.promotion_description = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_promotion_description(&mut self) -> &mut ::std::string::String {
            if self.promotion_description.is_none() {
                self.promotion_description = ::std::option::Option::Some(::std::string::String::new());
            }
            self.promotion_description.as_mut().unwrap()
        }

        // Take field
        pub fn take_promotion_description(&mut self) -> ::std::string::String {
            self.promotion_description.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional int64 minimum_cart_amount = 3;

        pub fn minimum_cart_amount(&self) -> i64 {
            self.minimum_cart_amount.unwrap_or(0)
        }

        pub fn clear_minimum_cart_amount(&mut self) {
            self.minimum_cart_amount = ::std::option::Option::None;
        }

        pub fn has_minimum_cart_amount(&self) -> bool {
            self.minimum_cart_amount.is_some()
        }

        // Param is passed by value, moved
        pub fn set_minimum_cart_amount(&mut self, v: i64) {
            self.minimum_cart_amount = ::std::option::Option::Some(v);
        }

        // optional int64 minimum_cart_amount_for_display = 4;

        pub fn minimum_cart_amount_for_display(&self) -> i64 {
            self.minimum_cart_amount_for_display.unwrap_or(0)
        }

        pub fn clear_minimum_cart_amount_for_display(&mut self) {
            self.minimum_cart_amount_for_display = ::std::option::Option::None;
        }

        pub fn has_minimum_cart_amount_for_display(&self) -> bool {
            self.minimum_cart_amount_for_display.is_some()
        }

        // Param is passed by value, moved
        pub fn set_minimum_cart_amount_for_display(&mut self, v: i64) {
            self.minimum_cart_amount_for_display = ::std::option::Option::Some(v);
        }

        // optional int64 discount_amount = 5;

        pub fn discount_amount(&self) -> i64 {
            self.discount_amount.unwrap_or(0)
        }

        pub fn clear_discount_amount(&mut self) {
            self.discount_amount = ::std::option::Option::None;
        }

        pub fn has_discount_amount(&self) -> bool {
            self.discount_amount.is_some()
        }

        // Param is passed by value, moved
        pub fn set_discount_amount(&mut self, v: i64) {
            self.discount_amount = ::std::option::Option::Some(v);
        }

        // optional int32 currency_code = 6;

        pub fn currency_code(&self) -> i32 {
            self.currency_code.unwrap_or(0)
        }

        pub fn clear_currency_code(&mut self) {
            self.currency_code = ::std::option::Option::None;
        }

        pub fn has_currency_code(&self) -> bool {
            self.currency_code.is_some()
        }

        // Param is passed by value, moved
        pub fn set_currency_code(&mut self, v: i32) {
            self.currency_code = ::std::option::Option::Some(v);
        }

        // optional int32 available_use_count = 7;

        pub fn available_use_count(&self) -> i32 {
            self.available_use_count.unwrap_or(0)
        }

        pub fn clear_available_use_count(&mut self) {
            self.available_use_count = ::std::option::Option::None;
        }

        pub fn has_available_use_count(&self) -> bool {
            self.available_use_count.is_some()
        }

        // Param is passed by value, moved
        pub fn set_available_use_count(&mut self, v: i32) {
            self.available_use_count = ::std::option::Option::Some(v);
        }

        // optional int32 promotional_discount_type = 8;

        pub fn promotional_discount_type(&self) -> i32 {
            self.promotional_discount_type.unwrap_or(0)
        }

        pub fn clear_promotional_discount_type(&mut self) {
            self.promotional_discount_type = ::std::option::Option::None;
        }

        pub fn has_promotional_discount_type(&self) -> bool {
            self.promotional_discount_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_promotional_discount_type(&mut self, v: i32) {
            self.promotional_discount_type = ::std::option::Option::Some(v);
        }

        // optional int32 loyalty_reward_id = 9;

        pub fn loyalty_reward_id(&self) -> i32 {
            self.loyalty_reward_id.unwrap_or(0)
        }

        pub fn clear_loyalty_reward_id(&mut self) {
            self.loyalty_reward_id = ::std::option::Option::None;
        }

        pub fn has_loyalty_reward_id(&self) -> bool {
            self.loyalty_reward_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_loyalty_reward_id(&mut self, v: i32) {
            self.loyalty_reward_id = ::std::option::Option::Some(v);
        }

        // optional string localized_name_token = 10;

        pub fn localized_name_token(&self) -> &str {
            match self.localized_name_token.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_localized_name_token(&mut self) {
            self.localized_name_token = ::std::option::Option::None;
        }

        pub fn has_localized_name_token(&self) -> bool {
            self.localized_name_token.is_some()
        }

        // Param is passed by value, moved
        pub fn set_localized_name_token(&mut self, v: ::std::string::String) {
            self.localized_name_token = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_localized_name_token(&mut self) -> &mut ::std::string::String {
            if self.localized_name_token.is_none() {
                self.localized_name_token = ::std::option::Option::Some(::std::string::String::new());
            }
            self.localized_name_token.as_mut().unwrap()
        }

        // Take field
        pub fn take_localized_name_token(&mut self) -> ::std::string::String {
            self.localized_name_token.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional int32 max_use_count = 11;

        pub fn max_use_count(&self) -> i32 {
            self.max_use_count.unwrap_or(0)
        }

        pub fn clear_max_use_count(&mut self) {
            self.max_use_count = ::std::option::Option::None;
        }

        pub fn has_max_use_count(&self) -> bool {
            self.max_use_count.is_some()
        }

        // Param is passed by value, moved
        pub fn set_max_use_count(&mut self, v: i32) {
            self.max_use_count = ::std::option::Option::Some(v);
        }
    }

    impl ::protobuf::Message for ValveDiscountPromotionDetails {
        const NAME: &'static str = "ValveDiscountPromotionDetails";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.promotionid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        self.promotion_description = ::std::option::Option::Some(is.read_string()?);
                    },
                    24 => {
                        self.minimum_cart_amount = ::std::option::Option::Some(is.read_int64()?);
                    },
                    32 => {
                        self.minimum_cart_amount_for_display = ::std::option::Option::Some(is.read_int64()?);
                    },
                    40 => {
                        self.discount_amount = ::std::option::Option::Some(is.read_int64()?);
                    },
                    48 => {
                        self.currency_code = ::std::option::Option::Some(is.read_int32()?);
                    },
                    56 => {
                        self.available_use_count = ::std::option::Option::Some(is.read_int32()?);
                    },
                    64 => {
                        self.promotional_discount_type = ::std::option::Option::Some(is.read_int32()?);
                    },
                    72 => {
                        self.loyalty_reward_id = ::std::option::Option::Some(is.read_int32()?);
                    },
                    82 => {
                        self.localized_name_token = ::std::option::Option::Some(is.read_string()?);
                    },
                    88 => {
                        self.max_use_count = ::std::option::Option::Some(is.read_int32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.promotionid {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.promotion_description.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            if let Some(v) = self.minimum_cart_amount {
                my_size += ::protobuf::rt::int64_size(3, v);
            }
            if let Some(v) = self.minimum_cart_amount_for_display {
                my_size += ::protobuf::rt::int64_size(4, v);
            }
            if let Some(v) = self.discount_amount {
                my_size += ::protobuf::rt::int64_size(5, v);
            }
            if let Some(v) = self.currency_code {
                my_size += ::protobuf::rt::int32_size(6, v);
            }
            if let Some(v) = self.available_use_count {
                my_size += ::protobuf::rt::int32_size(7, v);
            }
            if let Some(v) = self.promotional_discount_type {
                my_size += ::protobuf::rt::int32_size(8, v);
            }
            if let Some(v) = self.loyalty_reward_id {
                my_size += ::protobuf::rt::int32_size(9, v);
            }
            if let Some(v) = self.localized_name_token.as_ref() {
                my_size += ::protobuf::rt::string_size(10, &v);
            }
            if let Some(v) = self.max_use_count {
                my_size += ::protobuf::rt::int32_size(11, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.promotionid {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.promotion_description.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.minimum_cart_amount {
                os.write_int64(3, v)?;
            }
            if let Some(v) = self.minimum_cart_amount_for_display {
                os.write_int64(4, v)?;
            }
            if let Some(v) = self.discount_amount {
                os.write_int64(5, v)?;
            }
            if let Some(v) = self.currency_code {
                os.write_int32(6, v)?;
            }
            if let Some(v) = self.available_use_count {
                os.write_int32(7, v)?;
            }
            if let Some(v) = self.promotional_discount_type {
                os.write_int32(8, v)?;
            }
            if let Some(v) = self.loyalty_reward_id {
                os.write_int32(9, v)?;
            }
            if let Some(v) = self.localized_name_token.as_ref() {
                os.write_string(10, v)?;
            }
            if let Some(v) = self.max_use_count {
                os.write_int32(11, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ValveDiscountPromotionDetails {
            ValveDiscountPromotionDetails::new()
        }

        fn clear(&mut self) {
            self.promotionid = ::std::option::Option::None;
            self.promotion_description = ::std::option::Option::None;
            self.minimum_cart_amount = ::std::option::Option::None;
            self.minimum_cart_amount_for_display = ::std::option::Option::None;
            self.discount_amount = ::std::option::Option::None;
            self.currency_code = ::std::option::Option::None;
            self.available_use_count = ::std::option::Option::None;
            self.promotional_discount_type = ::std::option::Option::None;
            self.loyalty_reward_id = ::std::option::Option::None;
            self.localized_name_token = ::std::option::Option::None;
            self.max_use_count = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ValveDiscountPromotionDetails {
            static instance: ValveDiscountPromotionDetails = ValveDiscountPromotionDetails {
                promotionid: ::std::option::Option::None,
                promotion_description: ::std::option::Option::None,
                minimum_cart_amount: ::std::option::Option::None,
                minimum_cart_amount_for_display: ::std::option::Option::None,
                discount_amount: ::std::option::Option::None,
                currency_code: ::std::option::Option::None,
                available_use_count: ::std::option::Option::None,
                promotional_discount_type: ::std::option::Option::None,
                loyalty_reward_id: ::std::option::Option::None,
                localized_name_token: ::std::option::Option::None,
                max_use_count: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

#[doc = "Returns balance and details about any users wallet"]
// @@protoc_insertion_point(message:CUserAccount_GetClientWalletDetails_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_GetClientWalletDetails_Request {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_GetClientWalletDetails_Request.include_balance_in_usd)
    pub include_balance_in_usd: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CUserAccount_GetClientWalletDetails_Request.wallet_region)
    pub wallet_region: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CUserAccount_GetClientWalletDetails_Request.include_formatted_balance)
    pub include_formatted_balance: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_GetClientWalletDetails_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_GetClientWalletDetails_Request {
    fn default() -> &'a CUserAccount_GetClientWalletDetails_Request {
        <CUserAccount_GetClientWalletDetails_Request as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_GetClientWalletDetails_Request {
    pub fn new() -> CUserAccount_GetClientWalletDetails_Request {
        ::std::default::Default::default()
    }

    // optional bool include_balance_in_usd = 1;

    pub fn include_balance_in_usd(&self) -> bool {
        self.include_balance_in_usd.unwrap_or(false)
    }

    pub fn clear_include_balance_in_usd(&mut self) {
        self.include_balance_in_usd = ::std::option::Option::None;
    }

    pub fn has_include_balance_in_usd(&self) -> bool {
        self.include_balance_in_usd.is_some()
    }

    // Param is passed by value, moved
    pub fn set_include_balance_in_usd(&mut self, v: bool) {
        self.include_balance_in_usd = ::std::option::Option::Some(v);
    }

    // optional int32 wallet_region = 2;

    pub fn wallet_region(&self) -> i32 {
        self.wallet_region.unwrap_or(1i32)
    }

    pub fn clear_wallet_region(&mut self) {
        self.wallet_region = ::std::option::Option::None;
    }

    pub fn has_wallet_region(&self) -> bool {
        self.wallet_region.is_some()
    }

    // Param is passed by value, moved
    pub fn set_wallet_region(&mut self, v: i32) {
        self.wallet_region = ::std::option::Option::Some(v);
    }

    // optional bool include_formatted_balance = 3;

    pub fn include_formatted_balance(&self) -> bool {
        self.include_formatted_balance.unwrap_or(false)
    }

    pub fn clear_include_formatted_balance(&mut self) {
        self.include_formatted_balance = ::std::option::Option::None;
    }

    pub fn has_include_formatted_balance(&self) -> bool {
        self.include_formatted_balance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_include_formatted_balance(&mut self, v: bool) {
        self.include_formatted_balance = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CUserAccount_GetClientWalletDetails_Request {
    const NAME: &'static str = "CUserAccount_GetClientWalletDetails_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.include_balance_in_usd = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.wallet_region = ::std::option::Option::Some(is.read_int32()?);
                },
                24 => {
                    self.include_formatted_balance = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.include_balance_in_usd {
            my_size += 1 + 1;
        }
        if let Some(v) = self.wallet_region {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.include_formatted_balance {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.include_balance_in_usd {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.wallet_region {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.include_formatted_balance {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_GetClientWalletDetails_Request {
        CUserAccount_GetClientWalletDetails_Request::new()
    }

    fn clear(&mut self) {
        self.include_balance_in_usd = ::std::option::Option::None;
        self.wallet_region = ::std::option::Option::None;
        self.include_formatted_balance = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_GetClientWalletDetails_Request {
        static instance: CUserAccount_GetClientWalletDetails_Request = CUserAccount_GetClientWalletDetails_Request {
            include_balance_in_usd: ::std::option::Option::None,
            wallet_region: ::std::option::Option::None,
            include_formatted_balance: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CUserAccount_GetWalletDetails_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_GetWalletDetails_Response {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_GetWalletDetails_Response.has_wallet)
    pub has_wallet: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CUserAccount_GetWalletDetails_Response.user_country_code)
    pub user_country_code: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CUserAccount_GetWalletDetails_Response.wallet_country_code)
    pub wallet_country_code: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CUserAccount_GetWalletDetails_Response.wallet_state)
    pub wallet_state: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CUserAccount_GetWalletDetails_Response.balance)
    pub balance: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:CUserAccount_GetWalletDetails_Response.delayed_balance)
    pub delayed_balance: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:CUserAccount_GetWalletDetails_Response.currency_code)
    pub currency_code: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CUserAccount_GetWalletDetails_Response.time_most_recent_txn)
    pub time_most_recent_txn: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CUserAccount_GetWalletDetails_Response.most_recent_txnid)
    pub most_recent_txnid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CUserAccount_GetWalletDetails_Response.balance_in_usd)
    pub balance_in_usd: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:CUserAccount_GetWalletDetails_Response.delayed_balance_in_usd)
    pub delayed_balance_in_usd: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:CUserAccount_GetWalletDetails_Response.has_wallet_in_other_regions)
    pub has_wallet_in_other_regions: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CUserAccount_GetWalletDetails_Response.other_regions)
    pub other_regions: ::std::vec::Vec<i32>,
    // @@protoc_insertion_point(field:CUserAccount_GetWalletDetails_Response.formatted_balance)
    pub formatted_balance: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_GetWalletDetails_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_GetWalletDetails_Response {
    fn default() -> &'a CUserAccount_GetWalletDetails_Response {
        <CUserAccount_GetWalletDetails_Response as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_GetWalletDetails_Response {
    pub fn new() -> CUserAccount_GetWalletDetails_Response {
        ::std::default::Default::default()
    }

    // optional bool has_wallet = 1;

    pub fn has_wallet(&self) -> bool {
        self.has_wallet.unwrap_or(false)
    }

    pub fn clear_has_wallet(&mut self) {
        self.has_wallet = ::std::option::Option::None;
    }

    pub fn has_has_wallet(&self) -> bool {
        self.has_wallet.is_some()
    }

    // Param is passed by value, moved
    pub fn set_has_wallet(&mut self, v: bool) {
        self.has_wallet = ::std::option::Option::Some(v);
    }

    // optional string user_country_code = 2;

    pub fn user_country_code(&self) -> &str {
        match self.user_country_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_user_country_code(&mut self) {
        self.user_country_code = ::std::option::Option::None;
    }

    pub fn has_user_country_code(&self) -> bool {
        self.user_country_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_country_code(&mut self, v: ::std::string::String) {
        self.user_country_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user_country_code(&mut self) -> &mut ::std::string::String {
        if self.user_country_code.is_none() {
            self.user_country_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.user_country_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_user_country_code(&mut self) -> ::std::string::String {
        self.user_country_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string wallet_country_code = 3;

    pub fn wallet_country_code(&self) -> &str {
        match self.wallet_country_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_wallet_country_code(&mut self) {
        self.wallet_country_code = ::std::option::Option::None;
    }

    pub fn has_wallet_country_code(&self) -> bool {
        self.wallet_country_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_wallet_country_code(&mut self, v: ::std::string::String) {
        self.wallet_country_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_wallet_country_code(&mut self) -> &mut ::std::string::String {
        if self.wallet_country_code.is_none() {
            self.wallet_country_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.wallet_country_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_wallet_country_code(&mut self) -> ::std::string::String {
        self.wallet_country_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string wallet_state = 4;

    pub fn wallet_state(&self) -> &str {
        match self.wallet_state.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_wallet_state(&mut self) {
        self.wallet_state = ::std::option::Option::None;
    }

    pub fn has_wallet_state(&self) -> bool {
        self.wallet_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_wallet_state(&mut self, v: ::std::string::String) {
        self.wallet_state = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_wallet_state(&mut self) -> &mut ::std::string::String {
        if self.wallet_state.is_none() {
            self.wallet_state = ::std::option::Option::Some(::std::string::String::new());
        }
        self.wallet_state.as_mut().unwrap()
    }

    // Take field
    pub fn take_wallet_state(&mut self) -> ::std::string::String {
        self.wallet_state.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int64 balance = 5;

    pub fn balance(&self) -> i64 {
        self.balance.unwrap_or(0)
    }

    pub fn clear_balance(&mut self) {
        self.balance = ::std::option::Option::None;
    }

    pub fn has_balance(&self) -> bool {
        self.balance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_balance(&mut self, v: i64) {
        self.balance = ::std::option::Option::Some(v);
    }

    // optional int64 delayed_balance = 6;

    pub fn delayed_balance(&self) -> i64 {
        self.delayed_balance.unwrap_or(0)
    }

    pub fn clear_delayed_balance(&mut self) {
        self.delayed_balance = ::std::option::Option::None;
    }

    pub fn has_delayed_balance(&self) -> bool {
        self.delayed_balance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_delayed_balance(&mut self, v: i64) {
        self.delayed_balance = ::std::option::Option::Some(v);
    }

    // optional int32 currency_code = 7;

    pub fn currency_code(&self) -> i32 {
        self.currency_code.unwrap_or(0)
    }

    pub fn clear_currency_code(&mut self) {
        self.currency_code = ::std::option::Option::None;
    }

    pub fn has_currency_code(&self) -> bool {
        self.currency_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_currency_code(&mut self, v: i32) {
        self.currency_code = ::std::option::Option::Some(v);
    }

    // optional uint32 time_most_recent_txn = 8;

    pub fn time_most_recent_txn(&self) -> u32 {
        self.time_most_recent_txn.unwrap_or(0)
    }

    pub fn clear_time_most_recent_txn(&mut self) {
        self.time_most_recent_txn = ::std::option::Option::None;
    }

    pub fn has_time_most_recent_txn(&self) -> bool {
        self.time_most_recent_txn.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_most_recent_txn(&mut self, v: u32) {
        self.time_most_recent_txn = ::std::option::Option::Some(v);
    }

    // optional uint64 most_recent_txnid = 9;

    pub fn most_recent_txnid(&self) -> u64 {
        self.most_recent_txnid.unwrap_or(0)
    }

    pub fn clear_most_recent_txnid(&mut self) {
        self.most_recent_txnid = ::std::option::Option::None;
    }

    pub fn has_most_recent_txnid(&self) -> bool {
        self.most_recent_txnid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_most_recent_txnid(&mut self, v: u64) {
        self.most_recent_txnid = ::std::option::Option::Some(v);
    }

    // optional int64 balance_in_usd = 10;

    pub fn balance_in_usd(&self) -> i64 {
        self.balance_in_usd.unwrap_or(0)
    }

    pub fn clear_balance_in_usd(&mut self) {
        self.balance_in_usd = ::std::option::Option::None;
    }

    pub fn has_balance_in_usd(&self) -> bool {
        self.balance_in_usd.is_some()
    }

    // Param is passed by value, moved
    pub fn set_balance_in_usd(&mut self, v: i64) {
        self.balance_in_usd = ::std::option::Option::Some(v);
    }

    // optional int64 delayed_balance_in_usd = 11;

    pub fn delayed_balance_in_usd(&self) -> i64 {
        self.delayed_balance_in_usd.unwrap_or(0)
    }

    pub fn clear_delayed_balance_in_usd(&mut self) {
        self.delayed_balance_in_usd = ::std::option::Option::None;
    }

    pub fn has_delayed_balance_in_usd(&self) -> bool {
        self.delayed_balance_in_usd.is_some()
    }

    // Param is passed by value, moved
    pub fn set_delayed_balance_in_usd(&mut self, v: i64) {
        self.delayed_balance_in_usd = ::std::option::Option::Some(v);
    }

    // optional bool has_wallet_in_other_regions = 12;

    pub fn has_wallet_in_other_regions(&self) -> bool {
        self.has_wallet_in_other_regions.unwrap_or(false)
    }

    pub fn clear_has_wallet_in_other_regions(&mut self) {
        self.has_wallet_in_other_regions = ::std::option::Option::None;
    }

    pub fn has_has_wallet_in_other_regions(&self) -> bool {
        self.has_wallet_in_other_regions.is_some()
    }

    // Param is passed by value, moved
    pub fn set_has_wallet_in_other_regions(&mut self, v: bool) {
        self.has_wallet_in_other_regions = ::std::option::Option::Some(v);
    }

    // optional string formatted_balance = 14;

    pub fn formatted_balance(&self) -> &str {
        match self.formatted_balance.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_formatted_balance(&mut self) {
        self.formatted_balance = ::std::option::Option::None;
    }

    pub fn has_formatted_balance(&self) -> bool {
        self.formatted_balance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_formatted_balance(&mut self, v: ::std::string::String) {
        self.formatted_balance = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_formatted_balance(&mut self) -> &mut ::std::string::String {
        if self.formatted_balance.is_none() {
            self.formatted_balance = ::std::option::Option::Some(::std::string::String::new());
        }
        self.formatted_balance.as_mut().unwrap()
    }

    // Take field
    pub fn take_formatted_balance(&mut self) -> ::std::string::String {
        self.formatted_balance.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CUserAccount_GetWalletDetails_Response {
    const NAME: &'static str = "CUserAccount_GetWalletDetails_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.has_wallet = ::std::option::Option::Some(is.read_bool()?);
                },
                18 => {
                    self.user_country_code = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.wallet_country_code = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.wallet_state = ::std::option::Option::Some(is.read_string()?);
                },
                40 => {
                    self.balance = ::std::option::Option::Some(is.read_int64()?);
                },
                48 => {
                    self.delayed_balance = ::std::option::Option::Some(is.read_int64()?);
                },
                56 => {
                    self.currency_code = ::std::option::Option::Some(is.read_int32()?);
                },
                64 => {
                    self.time_most_recent_txn = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.most_recent_txnid = ::std::option::Option::Some(is.read_uint64()?);
                },
                80 => {
                    self.balance_in_usd = ::std::option::Option::Some(is.read_int64()?);
                },
                88 => {
                    self.delayed_balance_in_usd = ::std::option::Option::Some(is.read_int64()?);
                },
                96 => {
                    self.has_wallet_in_other_regions = ::std::option::Option::Some(is.read_bool()?);
                },
                106 => {
                    is.read_repeated_packed_int32_into(&mut self.other_regions)?;
                },
                104 => {
                    self.other_regions.push(is.read_int32()?);
                },
                114 => {
                    self.formatted_balance = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.has_wallet {
            my_size += 1 + 1;
        }
        if let Some(v) = self.user_country_code.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.wallet_country_code.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.wallet_state.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.balance {
            my_size += ::protobuf::rt::int64_size(5, v);
        }
        if let Some(v) = self.delayed_balance {
            my_size += ::protobuf::rt::int64_size(6, v);
        }
        if let Some(v) = self.currency_code {
            my_size += ::protobuf::rt::int32_size(7, v);
        }
        if let Some(v) = self.time_most_recent_txn {
            my_size += ::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.most_recent_txnid {
            my_size += ::protobuf::rt::uint64_size(9, v);
        }
        if let Some(v) = self.balance_in_usd {
            my_size += ::protobuf::rt::int64_size(10, v);
        }
        if let Some(v) = self.delayed_balance_in_usd {
            my_size += ::protobuf::rt::int64_size(11, v);
        }
        if let Some(v) = self.has_wallet_in_other_regions {
            my_size += 1 + 1;
        }
        for value in &self.other_regions {
            my_size += ::protobuf::rt::int32_size(13, *value);
        };
        if let Some(v) = self.formatted_balance.as_ref() {
            my_size += ::protobuf::rt::string_size(14, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.has_wallet {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.user_country_code.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.wallet_country_code.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.wallet_state.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.balance {
            os.write_int64(5, v)?;
        }
        if let Some(v) = self.delayed_balance {
            os.write_int64(6, v)?;
        }
        if let Some(v) = self.currency_code {
            os.write_int32(7, v)?;
        }
        if let Some(v) = self.time_most_recent_txn {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.most_recent_txnid {
            os.write_uint64(9, v)?;
        }
        if let Some(v) = self.balance_in_usd {
            os.write_int64(10, v)?;
        }
        if let Some(v) = self.delayed_balance_in_usd {
            os.write_int64(11, v)?;
        }
        if let Some(v) = self.has_wallet_in_other_regions {
            os.write_bool(12, v)?;
        }
        for v in &self.other_regions {
            os.write_int32(13, *v)?;
        };
        if let Some(v) = self.formatted_balance.as_ref() {
            os.write_string(14, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_GetWalletDetails_Response {
        CUserAccount_GetWalletDetails_Response::new()
    }

    fn clear(&mut self) {
        self.has_wallet = ::std::option::Option::None;
        self.user_country_code = ::std::option::Option::None;
        self.wallet_country_code = ::std::option::Option::None;
        self.wallet_state = ::std::option::Option::None;
        self.balance = ::std::option::Option::None;
        self.delayed_balance = ::std::option::Option::None;
        self.currency_code = ::std::option::Option::None;
        self.time_most_recent_txn = ::std::option::Option::None;
        self.most_recent_txnid = ::std::option::Option::None;
        self.balance_in_usd = ::std::option::Option::None;
        self.delayed_balance_in_usd = ::std::option::Option::None;
        self.has_wallet_in_other_regions = ::std::option::Option::None;
        self.other_regions.clear();
        self.formatted_balance = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_GetWalletDetails_Response {
        static instance: CUserAccount_GetWalletDetails_Response = CUserAccount_GetWalletDetails_Response {
            has_wallet: ::std::option::Option::None,
            user_country_code: ::std::option::Option::None,
            wallet_country_code: ::std::option::Option::None,
            wallet_state: ::std::option::Option::None,
            balance: ::std::option::Option::None,
            delayed_balance: ::std::option::Option::None,
            currency_code: ::std::option::Option::None,
            time_most_recent_txn: ::std::option::Option::None,
            most_recent_txnid: ::std::option::Option::None,
            balance_in_usd: ::std::option::Option::None,
            delayed_balance_in_usd: ::std::option::Option::None,
            has_wallet_in_other_regions: ::std::option::Option::None,
            other_regions: ::std::vec::Vec::new(),
            formatted_balance: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Fetches account link status"]
// @@protoc_insertion_point(message:CUserAccount_GetAccountLinkStatus_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_GetAccountLinkStatus_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_GetAccountLinkStatus_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_GetAccountLinkStatus_Request {
    fn default() -> &'a CUserAccount_GetAccountLinkStatus_Request {
        <CUserAccount_GetAccountLinkStatus_Request as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_GetAccountLinkStatus_Request {
    pub fn new() -> CUserAccount_GetAccountLinkStatus_Request {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CUserAccount_GetAccountLinkStatus_Request {
    const NAME: &'static str = "CUserAccount_GetAccountLinkStatus_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_GetAccountLinkStatus_Request {
        CUserAccount_GetAccountLinkStatus_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_GetAccountLinkStatus_Request {
        static instance: CUserAccount_GetAccountLinkStatus_Request = CUserAccount_GetAccountLinkStatus_Request {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CUserAccount_GetAccountLinkStatus_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_GetAccountLinkStatus_Response {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_GetAccountLinkStatus_Response.pwid)
    pub pwid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CUserAccount_GetAccountLinkStatus_Response.identity_verification)
    pub identity_verification: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CUserAccount_GetAccountLinkStatus_Response.performed_age_verification)
    pub performed_age_verification: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_GetAccountLinkStatus_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_GetAccountLinkStatus_Response {
    fn default() -> &'a CUserAccount_GetAccountLinkStatus_Response {
        <CUserAccount_GetAccountLinkStatus_Response as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_GetAccountLinkStatus_Response {
    pub fn new() -> CUserAccount_GetAccountLinkStatus_Response {
        ::std::default::Default::default()
    }

    // optional uint32 pwid = 1;

    pub fn pwid(&self) -> u32 {
        self.pwid.unwrap_or(0)
    }

    pub fn clear_pwid(&mut self) {
        self.pwid = ::std::option::Option::None;
    }

    pub fn has_pwid(&self) -> bool {
        self.pwid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pwid(&mut self, v: u32) {
        self.pwid = ::std::option::Option::Some(v);
    }

    // optional uint32 identity_verification = 2;

    pub fn identity_verification(&self) -> u32 {
        self.identity_verification.unwrap_or(0)
    }

    pub fn clear_identity_verification(&mut self) {
        self.identity_verification = ::std::option::Option::None;
    }

    pub fn has_identity_verification(&self) -> bool {
        self.identity_verification.is_some()
    }

    // Param is passed by value, moved
    pub fn set_identity_verification(&mut self, v: u32) {
        self.identity_verification = ::std::option::Option::Some(v);
    }

    // optional bool performed_age_verification = 3;

    pub fn performed_age_verification(&self) -> bool {
        self.performed_age_verification.unwrap_or(false)
    }

    pub fn clear_performed_age_verification(&mut self) {
        self.performed_age_verification = ::std::option::Option::None;
    }

    pub fn has_performed_age_verification(&self) -> bool {
        self.performed_age_verification.is_some()
    }

    // Param is passed by value, moved
    pub fn set_performed_age_verification(&mut self, v: bool) {
        self.performed_age_verification = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CUserAccount_GetAccountLinkStatus_Response {
    const NAME: &'static str = "CUserAccount_GetAccountLinkStatus_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.pwid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.identity_verification = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.performed_age_verification = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.pwid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.identity_verification {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.performed_age_verification {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.pwid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.identity_verification {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.performed_age_verification {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_GetAccountLinkStatus_Response {
        CUserAccount_GetAccountLinkStatus_Response::new()
    }

    fn clear(&mut self) {
        self.pwid = ::std::option::Option::None;
        self.identity_verification = ::std::option::Option::None;
        self.performed_age_verification = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_GetAccountLinkStatus_Response {
        static instance: CUserAccount_GetAccountLinkStatus_Response = CUserAccount_GetAccountLinkStatus_Response {
            pwid: ::std::option::Option::None,
            identity_verification: ::std::option::Option::None,
            performed_age_verification: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Cancels a free license for a user"]
// @@protoc_insertion_point(message:CUserAccount_CancelLicenseForApp_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_CancelLicenseForApp_Request {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_CancelLicenseForApp_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_CancelLicenseForApp_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_CancelLicenseForApp_Request {
    fn default() -> &'a CUserAccount_CancelLicenseForApp_Request {
        <CUserAccount_CancelLicenseForApp_Request as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_CancelLicenseForApp_Request {
    pub fn new() -> CUserAccount_CancelLicenseForApp_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CUserAccount_CancelLicenseForApp_Request {
    const NAME: &'static str = "CUserAccount_CancelLicenseForApp_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_CancelLicenseForApp_Request {
        CUserAccount_CancelLicenseForApp_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_CancelLicenseForApp_Request {
        static instance: CUserAccount_CancelLicenseForApp_Request = CUserAccount_CancelLicenseForApp_Request {
            appid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CUserAccount_CancelLicenseForApp_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_CancelLicenseForApp_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_CancelLicenseForApp_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_CancelLicenseForApp_Response {
    fn default() -> &'a CUserAccount_CancelLicenseForApp_Response {
        <CUserAccount_CancelLicenseForApp_Response as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_CancelLicenseForApp_Response {
    pub fn new() -> CUserAccount_CancelLicenseForApp_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CUserAccount_CancelLicenseForApp_Response {
    const NAME: &'static str = "CUserAccount_CancelLicenseForApp_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_CancelLicenseForApp_Response {
        CUserAccount_CancelLicenseForApp_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_CancelLicenseForApp_Response {
        static instance: CUserAccount_CancelLicenseForApp_Response = CUserAccount_CancelLicenseForApp_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Get the country code associated with the passed steamid (only available for logged-in user or support)"]
// @@protoc_insertion_point(message:CUserAccount_GetUserCountry_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_GetUserCountry_Request {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_GetUserCountry_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_GetUserCountry_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_GetUserCountry_Request {
    fn default() -> &'a CUserAccount_GetUserCountry_Request {
        <CUserAccount_GetUserCountry_Request as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_GetUserCountry_Request {
    pub fn new() -> CUserAccount_GetUserCountry_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CUserAccount_GetUserCountry_Request {
    const NAME: &'static str = "CUserAccount_GetUserCountry_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_GetUserCountry_Request {
        CUserAccount_GetUserCountry_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_GetUserCountry_Request {
        static instance: CUserAccount_GetUserCountry_Request = CUserAccount_GetUserCountry_Request {
            steamid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CUserAccount_GetUserCountry_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_GetUserCountry_Response {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_GetUserCountry_Response.country)
    pub country: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_GetUserCountry_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_GetUserCountry_Response {
    fn default() -> &'a CUserAccount_GetUserCountry_Response {
        <CUserAccount_GetUserCountry_Response as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_GetUserCountry_Response {
    pub fn new() -> CUserAccount_GetUserCountry_Response {
        ::std::default::Default::default()
    }

    // optional string country = 1;

    pub fn country(&self) -> &str {
        match self.country.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_country(&mut self) {
        self.country = ::std::option::Option::None;
    }

    pub fn has_country(&self) -> bool {
        self.country.is_some()
    }

    // Param is passed by value, moved
    pub fn set_country(&mut self, v: ::std::string::String) {
        self.country = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_country(&mut self) -> &mut ::std::string::String {
        if self.country.is_none() {
            self.country = ::std::option::Option::Some(::std::string::String::new());
        }
        self.country.as_mut().unwrap()
    }

    // Take field
    pub fn take_country(&mut self) -> ::std::string::String {
        self.country.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CUserAccount_GetUserCountry_Response {
    const NAME: &'static str = "CUserAccount_GetUserCountry_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.country = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.country.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.country.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_GetUserCountry_Response {
        CUserAccount_GetUserCountry_Response::new()
    }

    fn clear(&mut self) {
        self.country = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_GetUserCountry_Response {
        static instance: CUserAccount_GetUserCountry_Response = CUserAccount_GetUserCountry_Response {
            country: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Create a limited-use token that can be used to create a friend request"]
// @@protoc_insertion_point(message:CUserAccount_CreateFriendInviteToken_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_CreateFriendInviteToken_Request {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_CreateFriendInviteToken_Request.invite_limit)
    pub invite_limit: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CUserAccount_CreateFriendInviteToken_Request.invite_duration)
    pub invite_duration: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CUserAccount_CreateFriendInviteToken_Request.invite_note)
    pub invite_note: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_CreateFriendInviteToken_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_CreateFriendInviteToken_Request {
    fn default() -> &'a CUserAccount_CreateFriendInviteToken_Request {
        <CUserAccount_CreateFriendInviteToken_Request as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_CreateFriendInviteToken_Request {
    pub fn new() -> CUserAccount_CreateFriendInviteToken_Request {
        ::std::default::Default::default()
    }

    // optional uint32 invite_limit = 1;

    pub fn invite_limit(&self) -> u32 {
        self.invite_limit.unwrap_or(0)
    }

    pub fn clear_invite_limit(&mut self) {
        self.invite_limit = ::std::option::Option::None;
    }

    pub fn has_invite_limit(&self) -> bool {
        self.invite_limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_limit(&mut self, v: u32) {
        self.invite_limit = ::std::option::Option::Some(v);
    }

    // optional uint32 invite_duration = 2;

    pub fn invite_duration(&self) -> u32 {
        self.invite_duration.unwrap_or(0)
    }

    pub fn clear_invite_duration(&mut self) {
        self.invite_duration = ::std::option::Option::None;
    }

    pub fn has_invite_duration(&self) -> bool {
        self.invite_duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_duration(&mut self, v: u32) {
        self.invite_duration = ::std::option::Option::Some(v);
    }

    // optional string invite_note = 3;

    pub fn invite_note(&self) -> &str {
        match self.invite_note.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_invite_note(&mut self) {
        self.invite_note = ::std::option::Option::None;
    }

    pub fn has_invite_note(&self) -> bool {
        self.invite_note.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_note(&mut self, v: ::std::string::String) {
        self.invite_note = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invite_note(&mut self) -> &mut ::std::string::String {
        if self.invite_note.is_none() {
            self.invite_note = ::std::option::Option::Some(::std::string::String::new());
        }
        self.invite_note.as_mut().unwrap()
    }

    // Take field
    pub fn take_invite_note(&mut self) -> ::std::string::String {
        self.invite_note.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CUserAccount_CreateFriendInviteToken_Request {
    const NAME: &'static str = "CUserAccount_CreateFriendInviteToken_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.invite_limit = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.invite_duration = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.invite_note = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.invite_limit {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.invite_duration {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.invite_note.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.invite_limit {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.invite_duration {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.invite_note.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_CreateFriendInviteToken_Request {
        CUserAccount_CreateFriendInviteToken_Request::new()
    }

    fn clear(&mut self) {
        self.invite_limit = ::std::option::Option::None;
        self.invite_duration = ::std::option::Option::None;
        self.invite_note = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_CreateFriendInviteToken_Request {
        static instance: CUserAccount_CreateFriendInviteToken_Request = CUserAccount_CreateFriendInviteToken_Request {
            invite_limit: ::std::option::Option::None,
            invite_duration: ::std::option::Option::None,
            invite_note: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CUserAccount_CreateFriendInviteToken_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_CreateFriendInviteToken_Response {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_CreateFriendInviteToken_Response.invite_token)
    pub invite_token: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CUserAccount_CreateFriendInviteToken_Response.invite_limit)
    pub invite_limit: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CUserAccount_CreateFriendInviteToken_Response.invite_duration)
    pub invite_duration: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CUserAccount_CreateFriendInviteToken_Response.time_created)
    pub time_created: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CUserAccount_CreateFriendInviteToken_Response.valid)
    pub valid: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_CreateFriendInviteToken_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_CreateFriendInviteToken_Response {
    fn default() -> &'a CUserAccount_CreateFriendInviteToken_Response {
        <CUserAccount_CreateFriendInviteToken_Response as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_CreateFriendInviteToken_Response {
    pub fn new() -> CUserAccount_CreateFriendInviteToken_Response {
        ::std::default::Default::default()
    }

    // optional string invite_token = 1;

    pub fn invite_token(&self) -> &str {
        match self.invite_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_invite_token(&mut self) {
        self.invite_token = ::std::option::Option::None;
    }

    pub fn has_invite_token(&self) -> bool {
        self.invite_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_token(&mut self, v: ::std::string::String) {
        self.invite_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invite_token(&mut self) -> &mut ::std::string::String {
        if self.invite_token.is_none() {
            self.invite_token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.invite_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_invite_token(&mut self) -> ::std::string::String {
        self.invite_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 invite_limit = 2;

    pub fn invite_limit(&self) -> u64 {
        self.invite_limit.unwrap_or(0)
    }

    pub fn clear_invite_limit(&mut self) {
        self.invite_limit = ::std::option::Option::None;
    }

    pub fn has_invite_limit(&self) -> bool {
        self.invite_limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_limit(&mut self, v: u64) {
        self.invite_limit = ::std::option::Option::Some(v);
    }

    // optional uint64 invite_duration = 3;

    pub fn invite_duration(&self) -> u64 {
        self.invite_duration.unwrap_or(0)
    }

    pub fn clear_invite_duration(&mut self) {
        self.invite_duration = ::std::option::Option::None;
    }

    pub fn has_invite_duration(&self) -> bool {
        self.invite_duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_duration(&mut self, v: u64) {
        self.invite_duration = ::std::option::Option::Some(v);
    }

    // optional fixed32 time_created = 4;

    pub fn time_created(&self) -> u32 {
        self.time_created.unwrap_or(0)
    }

    pub fn clear_time_created(&mut self) {
        self.time_created = ::std::option::Option::None;
    }

    pub fn has_time_created(&self) -> bool {
        self.time_created.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_created(&mut self, v: u32) {
        self.time_created = ::std::option::Option::Some(v);
    }

    // optional bool valid = 5;

    pub fn valid(&self) -> bool {
        self.valid.unwrap_or(false)
    }

    pub fn clear_valid(&mut self) {
        self.valid = ::std::option::Option::None;
    }

    pub fn has_valid(&self) -> bool {
        self.valid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_valid(&mut self, v: bool) {
        self.valid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CUserAccount_CreateFriendInviteToken_Response {
    const NAME: &'static str = "CUserAccount_CreateFriendInviteToken_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.invite_token = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.invite_limit = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.invite_duration = ::std::option::Option::Some(is.read_uint64()?);
                },
                37 => {
                    self.time_created = ::std::option::Option::Some(is.read_fixed32()?);
                },
                40 => {
                    self.valid = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.invite_token.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.invite_limit {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.invite_duration {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        if let Some(v) = self.time_created {
            my_size += 1 + 4;
        }
        if let Some(v) = self.valid {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.invite_token.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.invite_limit {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.invite_duration {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.time_created {
            os.write_fixed32(4, v)?;
        }
        if let Some(v) = self.valid {
            os.write_bool(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_CreateFriendInviteToken_Response {
        CUserAccount_CreateFriendInviteToken_Response::new()
    }

    fn clear(&mut self) {
        self.invite_token = ::std::option::Option::None;
        self.invite_limit = ::std::option::Option::None;
        self.invite_duration = ::std::option::Option::None;
        self.time_created = ::std::option::Option::None;
        self.valid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_CreateFriendInviteToken_Response {
        static instance: CUserAccount_CreateFriendInviteToken_Response = CUserAccount_CreateFriendInviteToken_Response {
            invite_token: ::std::option::Option::None,
            invite_limit: ::std::option::Option::None,
            invite_duration: ::std::option::Option::None,
            time_created: ::std::option::Option::None,
            valid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Get the set of active tokens for the user"]
// @@protoc_insertion_point(message:CUserAccount_GetFriendInviteTokens_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_GetFriendInviteTokens_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_GetFriendInviteTokens_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_GetFriendInviteTokens_Request {
    fn default() -> &'a CUserAccount_GetFriendInviteTokens_Request {
        <CUserAccount_GetFriendInviteTokens_Request as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_GetFriendInviteTokens_Request {
    pub fn new() -> CUserAccount_GetFriendInviteTokens_Request {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CUserAccount_GetFriendInviteTokens_Request {
    const NAME: &'static str = "CUserAccount_GetFriendInviteTokens_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_GetFriendInviteTokens_Request {
        CUserAccount_GetFriendInviteTokens_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_GetFriendInviteTokens_Request {
        static instance: CUserAccount_GetFriendInviteTokens_Request = CUserAccount_GetFriendInviteTokens_Request {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CUserAccount_GetFriendInviteTokens_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_GetFriendInviteTokens_Response {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_GetFriendInviteTokens_Response.tokens)
    pub tokens: ::std::vec::Vec<CUserAccount_CreateFriendInviteToken_Response>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_GetFriendInviteTokens_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_GetFriendInviteTokens_Response {
    fn default() -> &'a CUserAccount_GetFriendInviteTokens_Response {
        <CUserAccount_GetFriendInviteTokens_Response as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_GetFriendInviteTokens_Response {
    pub fn new() -> CUserAccount_GetFriendInviteTokens_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CUserAccount_GetFriendInviteTokens_Response {
    const NAME: &'static str = "CUserAccount_GetFriendInviteTokens_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.tokens.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.tokens {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.tokens {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_GetFriendInviteTokens_Response {
        CUserAccount_GetFriendInviteTokens_Response::new()
    }

    fn clear(&mut self) {
        self.tokens.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_GetFriendInviteTokens_Response {
        static instance: CUserAccount_GetFriendInviteTokens_Response = CUserAccount_GetFriendInviteTokens_Response {
            tokens: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "View details about an invite token "]
// @@protoc_insertion_point(message:CUserAccount_ViewFriendInviteToken_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_ViewFriendInviteToken_Request {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_ViewFriendInviteToken_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CUserAccount_ViewFriendInviteToken_Request.invite_token)
    pub invite_token: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_ViewFriendInviteToken_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_ViewFriendInviteToken_Request {
    fn default() -> &'a CUserAccount_ViewFriendInviteToken_Request {
        <CUserAccount_ViewFriendInviteToken_Request as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_ViewFriendInviteToken_Request {
    pub fn new() -> CUserAccount_ViewFriendInviteToken_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional string invite_token = 2;

    pub fn invite_token(&self) -> &str {
        match self.invite_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_invite_token(&mut self) {
        self.invite_token = ::std::option::Option::None;
    }

    pub fn has_invite_token(&self) -> bool {
        self.invite_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_token(&mut self, v: ::std::string::String) {
        self.invite_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invite_token(&mut self) -> &mut ::std::string::String {
        if self.invite_token.is_none() {
            self.invite_token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.invite_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_invite_token(&mut self) -> ::std::string::String {
        self.invite_token.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CUserAccount_ViewFriendInviteToken_Request {
    const NAME: &'static str = "CUserAccount_ViewFriendInviteToken_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    self.invite_token = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.invite_token.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.invite_token.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_ViewFriendInviteToken_Request {
        CUserAccount_ViewFriendInviteToken_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.invite_token = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_ViewFriendInviteToken_Request {
        static instance: CUserAccount_ViewFriendInviteToken_Request = CUserAccount_ViewFriendInviteToken_Request {
            steamid: ::std::option::Option::None,
            invite_token: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CUserAccount_ViewFriendInviteToken_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_ViewFriendInviteToken_Response {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_ViewFriendInviteToken_Response.valid)
    pub valid: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CUserAccount_ViewFriendInviteToken_Response.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CUserAccount_ViewFriendInviteToken_Response.invite_duration)
    pub invite_duration: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_ViewFriendInviteToken_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_ViewFriendInviteToken_Response {
    fn default() -> &'a CUserAccount_ViewFriendInviteToken_Response {
        <CUserAccount_ViewFriendInviteToken_Response as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_ViewFriendInviteToken_Response {
    pub fn new() -> CUserAccount_ViewFriendInviteToken_Response {
        ::std::default::Default::default()
    }

    // optional bool valid = 1;

    pub fn valid(&self) -> bool {
        self.valid.unwrap_or(false)
    }

    pub fn clear_valid(&mut self) {
        self.valid = ::std::option::Option::None;
    }

    pub fn has_valid(&self) -> bool {
        self.valid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_valid(&mut self, v: bool) {
        self.valid = ::std::option::Option::Some(v);
    }

    // optional uint64 steamid = 2;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint64 invite_duration = 3;

    pub fn invite_duration(&self) -> u64 {
        self.invite_duration.unwrap_or(0)
    }

    pub fn clear_invite_duration(&mut self) {
        self.invite_duration = ::std::option::Option::None;
    }

    pub fn has_invite_duration(&self) -> bool {
        self.invite_duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_duration(&mut self, v: u64) {
        self.invite_duration = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CUserAccount_ViewFriendInviteToken_Response {
    const NAME: &'static str = "CUserAccount_ViewFriendInviteToken_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.valid = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.steamid = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.invite_duration = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.valid {
            my_size += 1 + 1;
        }
        if let Some(v) = self.steamid {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.invite_duration {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.valid {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.invite_duration {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_ViewFriendInviteToken_Response {
        CUserAccount_ViewFriendInviteToken_Response::new()
    }

    fn clear(&mut self) {
        self.valid = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.invite_duration = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_ViewFriendInviteToken_Response {
        static instance: CUserAccount_ViewFriendInviteToken_Response = CUserAccount_ViewFriendInviteToken_Response {
            valid: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            invite_duration: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Create a friend relationship using the given invite token"]
// @@protoc_insertion_point(message:CUserAccount_RedeemFriendInviteToken_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_RedeemFriendInviteToken_Request {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_RedeemFriendInviteToken_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CUserAccount_RedeemFriendInviteToken_Request.invite_token)
    pub invite_token: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_RedeemFriendInviteToken_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_RedeemFriendInviteToken_Request {
    fn default() -> &'a CUserAccount_RedeemFriendInviteToken_Request {
        <CUserAccount_RedeemFriendInviteToken_Request as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_RedeemFriendInviteToken_Request {
    pub fn new() -> CUserAccount_RedeemFriendInviteToken_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional string invite_token = 2;

    pub fn invite_token(&self) -> &str {
        match self.invite_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_invite_token(&mut self) {
        self.invite_token = ::std::option::Option::None;
    }

    pub fn has_invite_token(&self) -> bool {
        self.invite_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_token(&mut self, v: ::std::string::String) {
        self.invite_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invite_token(&mut self) -> &mut ::std::string::String {
        if self.invite_token.is_none() {
            self.invite_token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.invite_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_invite_token(&mut self) -> ::std::string::String {
        self.invite_token.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CUserAccount_RedeemFriendInviteToken_Request {
    const NAME: &'static str = "CUserAccount_RedeemFriendInviteToken_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    self.invite_token = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.invite_token.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.invite_token.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_RedeemFriendInviteToken_Request {
        CUserAccount_RedeemFriendInviteToken_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.invite_token = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_RedeemFriendInviteToken_Request {
        static instance: CUserAccount_RedeemFriendInviteToken_Request = CUserAccount_RedeemFriendInviteToken_Request {
            steamid: ::std::option::Option::None,
            invite_token: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CUserAccount_RedeemFriendInviteToken_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_RedeemFriendInviteToken_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_RedeemFriendInviteToken_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_RedeemFriendInviteToken_Response {
    fn default() -> &'a CUserAccount_RedeemFriendInviteToken_Response {
        <CUserAccount_RedeemFriendInviteToken_Response as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_RedeemFriendInviteToken_Response {
    pub fn new() -> CUserAccount_RedeemFriendInviteToken_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CUserAccount_RedeemFriendInviteToken_Response {
    const NAME: &'static str = "CUserAccount_RedeemFriendInviteToken_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_RedeemFriendInviteToken_Response {
        CUserAccount_RedeemFriendInviteToken_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_RedeemFriendInviteToken_Response {
        static instance: CUserAccount_RedeemFriendInviteToken_Response = CUserAccount_RedeemFriendInviteToken_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Revoke an active friend invite token"]
// @@protoc_insertion_point(message:CUserAccount_RevokeFriendInviteToken_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_RevokeFriendInviteToken_Request {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_RevokeFriendInviteToken_Request.invite_token)
    pub invite_token: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_RevokeFriendInviteToken_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_RevokeFriendInviteToken_Request {
    fn default() -> &'a CUserAccount_RevokeFriendInviteToken_Request {
        <CUserAccount_RevokeFriendInviteToken_Request as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_RevokeFriendInviteToken_Request {
    pub fn new() -> CUserAccount_RevokeFriendInviteToken_Request {
        ::std::default::Default::default()
    }

    // optional string invite_token = 1;

    pub fn invite_token(&self) -> &str {
        match self.invite_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_invite_token(&mut self) {
        self.invite_token = ::std::option::Option::None;
    }

    pub fn has_invite_token(&self) -> bool {
        self.invite_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_token(&mut self, v: ::std::string::String) {
        self.invite_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invite_token(&mut self) -> &mut ::std::string::String {
        if self.invite_token.is_none() {
            self.invite_token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.invite_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_invite_token(&mut self) -> ::std::string::String {
        self.invite_token.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CUserAccount_RevokeFriendInviteToken_Request {
    const NAME: &'static str = "CUserAccount_RevokeFriendInviteToken_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.invite_token = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.invite_token.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.invite_token.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_RevokeFriendInviteToken_Request {
        CUserAccount_RevokeFriendInviteToken_Request::new()
    }

    fn clear(&mut self) {
        self.invite_token = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_RevokeFriendInviteToken_Request {
        static instance: CUserAccount_RevokeFriendInviteToken_Request = CUserAccount_RevokeFriendInviteToken_Request {
            invite_token: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CUserAccount_RevokeFriendInviteToken_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_RevokeFriendInviteToken_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_RevokeFriendInviteToken_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_RevokeFriendInviteToken_Response {
    fn default() -> &'a CUserAccount_RevokeFriendInviteToken_Response {
        <CUserAccount_RevokeFriendInviteToken_Response as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_RevokeFriendInviteToken_Response {
    pub fn new() -> CUserAccount_RevokeFriendInviteToken_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CUserAccount_RevokeFriendInviteToken_Response {
    const NAME: &'static str = "CUserAccount_RevokeFriendInviteToken_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_RevokeFriendInviteToken_Response {
        CUserAccount_RevokeFriendInviteToken_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_RevokeFriendInviteToken_Response {
        static instance: CUserAccount_RevokeFriendInviteToken_Response = CUserAccount_RevokeFriendInviteToken_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Register intended account usage of a tool"]
// @@protoc_insertion_point(message:CUserAccount_RegisterCompatTool_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_RegisterCompatTool_Request {
    // message fields
    // @@protoc_insertion_point(field:CUserAccount_RegisterCompatTool_Request.compat_tool)
    pub compat_tool: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_RegisterCompatTool_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_RegisterCompatTool_Request {
    fn default() -> &'a CUserAccount_RegisterCompatTool_Request {
        <CUserAccount_RegisterCompatTool_Request as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_RegisterCompatTool_Request {
    pub fn new() -> CUserAccount_RegisterCompatTool_Request {
        ::std::default::Default::default()
    }

    // optional uint32 compat_tool = 1;

    pub fn compat_tool(&self) -> u32 {
        self.compat_tool.unwrap_or(0)
    }

    pub fn clear_compat_tool(&mut self) {
        self.compat_tool = ::std::option::Option::None;
    }

    pub fn has_compat_tool(&self) -> bool {
        self.compat_tool.is_some()
    }

    // Param is passed by value, moved
    pub fn set_compat_tool(&mut self, v: u32) {
        self.compat_tool = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CUserAccount_RegisterCompatTool_Request {
    const NAME: &'static str = "CUserAccount_RegisterCompatTool_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.compat_tool = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.compat_tool {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.compat_tool {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_RegisterCompatTool_Request {
        CUserAccount_RegisterCompatTool_Request::new()
    }

    fn clear(&mut self) {
        self.compat_tool = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_RegisterCompatTool_Request {
        static instance: CUserAccount_RegisterCompatTool_Request = CUserAccount_RegisterCompatTool_Request {
            compat_tool: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CUserAccount_RegisterCompatTool_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserAccount_RegisterCompatTool_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CUserAccount_RegisterCompatTool_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserAccount_RegisterCompatTool_Response {
    fn default() -> &'a CUserAccount_RegisterCompatTool_Response {
        <CUserAccount_RegisterCompatTool_Response as ::protobuf::Message>::default_instance()
    }
}

impl CUserAccount_RegisterCompatTool_Response {
    pub fn new() -> CUserAccount_RegisterCompatTool_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CUserAccount_RegisterCompatTool_Response {
    const NAME: &'static str = "CUserAccount_RegisterCompatTool_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserAccount_RegisterCompatTool_Response {
        CUserAccount_RegisterCompatTool_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserAccount_RegisterCompatTool_Response {
        static instance: CUserAccount_RegisterCompatTool_Response = CUserAccount_RegisterCompatTool_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "List all my active linked external accounts; may be requested to return the access token"]
// @@protoc_insertion_point(message:CAccountLinking_GetLinkedAccountInfo_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountLinking_GetLinkedAccountInfo_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountLinking_GetLinkedAccountInfo_Request.account_type)
    pub account_type: ::std::option::Option<::protobuf::EnumOrUnknown<EInternalAccountType>>,
    // @@protoc_insertion_point(field:CAccountLinking_GetLinkedAccountInfo_Request.account_id)
    pub account_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAccountLinking_GetLinkedAccountInfo_Request.filter)
    pub filter: ::std::option::Option<::protobuf::EnumOrUnknown<EExternalAccountType>>,
    // @@protoc_insertion_point(field:CAccountLinking_GetLinkedAccountInfo_Request.return_access_token)
    pub return_access_token: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountLinking_GetLinkedAccountInfo_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountLinking_GetLinkedAccountInfo_Request {
    fn default() -> &'a CAccountLinking_GetLinkedAccountInfo_Request {
        <CAccountLinking_GetLinkedAccountInfo_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAccountLinking_GetLinkedAccountInfo_Request {
    pub fn new() -> CAccountLinking_GetLinkedAccountInfo_Request {
        ::std::default::Default::default()
    }

    // optional .EInternalAccountType account_type = 1;

    pub fn account_type(&self) -> EInternalAccountType {
        match self.account_type {
            Some(e) => e.enum_value_or(EInternalAccountType::k_EInternalSteamAccountType),
            None => EInternalAccountType::k_EInternalSteamAccountType,
        }
    }

    pub fn clear_account_type(&mut self) {
        self.account_type = ::std::option::Option::None;
    }

    pub fn has_account_type(&self) -> bool {
        self.account_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_type(&mut self, v: EInternalAccountType) {
        self.account_type = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint64 account_id = 2;

    pub fn account_id(&self) -> u64 {
        self.account_id.unwrap_or(0)
    }

    pub fn clear_account_id(&mut self) {
        self.account_id = ::std::option::Option::None;
    }

    pub fn has_account_id(&self) -> bool {
        self.account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: u64) {
        self.account_id = ::std::option::Option::Some(v);
    }

    // optional .EExternalAccountType filter = 3;

    pub fn filter(&self) -> EExternalAccountType {
        match self.filter {
            Some(e) => e.enum_value_or(EExternalAccountType::k_EExternalNone),
            None => EExternalAccountType::k_EExternalNone,
        }
    }

    pub fn clear_filter(&mut self) {
        self.filter = ::std::option::Option::None;
    }

    pub fn has_filter(&self) -> bool {
        self.filter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: EExternalAccountType) {
        self.filter = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional bool return_access_token = 4;

    pub fn return_access_token(&self) -> bool {
        self.return_access_token.unwrap_or(false)
    }

    pub fn clear_return_access_token(&mut self) {
        self.return_access_token = ::std::option::Option::None;
    }

    pub fn has_return_access_token(&self) -> bool {
        self.return_access_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_return_access_token(&mut self, v: bool) {
        self.return_access_token = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CAccountLinking_GetLinkedAccountInfo_Request {
    const NAME: &'static str = "CAccountLinking_GetLinkedAccountInfo_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.account_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                16 => {
                    self.account_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.filter = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                32 => {
                    self.return_access_token = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.account_type {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.account_id {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.filter {
            my_size += ::protobuf::rt::int32_size(3, v.value());
        }
        if let Some(v) = self.return_access_token {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.account_type {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.account_id {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.filter {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.return_access_token {
            os.write_bool(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountLinking_GetLinkedAccountInfo_Request {
        CAccountLinking_GetLinkedAccountInfo_Request::new()
    }

    fn clear(&mut self) {
        self.account_type = ::std::option::Option::None;
        self.account_id = ::std::option::Option::None;
        self.filter = ::std::option::Option::None;
        self.return_access_token = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountLinking_GetLinkedAccountInfo_Request {
        static instance: CAccountLinking_GetLinkedAccountInfo_Request = CAccountLinking_GetLinkedAccountInfo_Request {
            account_type: ::std::option::Option::None,
            account_id: ::std::option::Option::None,
            filter: ::std::option::Option::None,
            return_access_token: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CAccountLinking_GetLinkedAccountInfo_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountLinking_GetLinkedAccountInfo_Response {
    // message fields
    // @@protoc_insertion_point(field:CAccountLinking_GetLinkedAccountInfo_Response.external_accounts)
    pub external_accounts: ::std::vec::Vec<caccount_linking_get_linked_account_info_response::CExternalAccountTuple_Response>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountLinking_GetLinkedAccountInfo_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountLinking_GetLinkedAccountInfo_Response {
    fn default() -> &'a CAccountLinking_GetLinkedAccountInfo_Response {
        <CAccountLinking_GetLinkedAccountInfo_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAccountLinking_GetLinkedAccountInfo_Response {
    pub fn new() -> CAccountLinking_GetLinkedAccountInfo_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CAccountLinking_GetLinkedAccountInfo_Response {
    const NAME: &'static str = "CAccountLinking_GetLinkedAccountInfo_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.external_accounts.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.external_accounts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.external_accounts {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountLinking_GetLinkedAccountInfo_Response {
        CAccountLinking_GetLinkedAccountInfo_Response::new()
    }

    fn clear(&mut self) {
        self.external_accounts.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountLinking_GetLinkedAccountInfo_Response {
        static instance: CAccountLinking_GetLinkedAccountInfo_Response = CAccountLinking_GetLinkedAccountInfo_Response {
            external_accounts: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CAccountLinking_GetLinkedAccountInfo_Response`
pub mod caccount_linking_get_linked_account_info_response {
    // @@protoc_insertion_point(message:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct CExternalAccountTuple_Response {
        // message fields
        // @@protoc_insertion_point(field:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_type)
        pub external_type: ::std::option::Option<::protobuf::EnumOrUnknown<super::EExternalAccountType>>,
        // @@protoc_insertion_point(field:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_id)
        pub external_id: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_user_name)
        pub external_user_name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_url)
        pub external_url: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token)
        pub access_token: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token_secret)
        pub access_token_secret: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.is_valid)
        pub is_valid: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a CExternalAccountTuple_Response {
        fn default() -> &'a CExternalAccountTuple_Response {
            <CExternalAccountTuple_Response as ::protobuf::Message>::default_instance()
        }
    }

    impl CExternalAccountTuple_Response {
        pub fn new() -> CExternalAccountTuple_Response {
            ::std::default::Default::default()
        }

        // optional .EExternalAccountType external_type = 1;

        pub fn external_type(&self) -> super::EExternalAccountType {
            match self.external_type {
                Some(e) => e.enum_value_or(super::EExternalAccountType::k_EExternalNone),
                None => super::EExternalAccountType::k_EExternalNone,
            }
        }

        pub fn clear_external_type(&mut self) {
            self.external_type = ::std::option::Option::None;
        }

        pub fn has_external_type(&self) -> bool {
            self.external_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_external_type(&mut self, v: super::EExternalAccountType) {
            self.external_type = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
        }

        // optional string external_id = 2;

        pub fn external_id(&self) -> &str {
            match self.external_id.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_external_id(&mut self) {
            self.external_id = ::std::option::Option::None;
        }

        pub fn has_external_id(&self) -> bool {
            self.external_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_external_id(&mut self, v: ::std::string::String) {
            self.external_id = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_external_id(&mut self) -> &mut ::std::string::String {
            if self.external_id.is_none() {
                self.external_id = ::std::option::Option::Some(::std::string::String::new());
            }
            self.external_id.as_mut().unwrap()
        }

        // Take field
        pub fn take_external_id(&mut self) -> ::std::string::String {
            self.external_id.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string external_user_name = 3;

        pub fn external_user_name(&self) -> &str {
            match self.external_user_name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_external_user_name(&mut self) {
            self.external_user_name = ::std::option::Option::None;
        }

        pub fn has_external_user_name(&self) -> bool {
            self.external_user_name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_external_user_name(&mut self, v: ::std::string::String) {
            self.external_user_name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_external_user_name(&mut self) -> &mut ::std::string::String {
            if self.external_user_name.is_none() {
                self.external_user_name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.external_user_name.as_mut().unwrap()
        }

        // Take field
        pub fn take_external_user_name(&mut self) -> ::std::string::String {
            self.external_user_name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string external_url = 4;

        pub fn external_url(&self) -> &str {
            match self.external_url.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_external_url(&mut self) {
            self.external_url = ::std::option::Option::None;
        }

        pub fn has_external_url(&self) -> bool {
            self.external_url.is_some()
        }

        // Param is passed by value, moved
        pub fn set_external_url(&mut self, v: ::std::string::String) {
            self.external_url = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_external_url(&mut self) -> &mut ::std::string::String {
            if self.external_url.is_none() {
                self.external_url = ::std::option::Option::Some(::std::string::String::new());
            }
            self.external_url.as_mut().unwrap()
        }

        // Take field
        pub fn take_external_url(&mut self) -> ::std::string::String {
            self.external_url.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string access_token = 5;

        pub fn access_token(&self) -> &str {
            match self.access_token.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_access_token(&mut self) {
            self.access_token = ::std::option::Option::None;
        }

        pub fn has_access_token(&self) -> bool {
            self.access_token.is_some()
        }

        // Param is passed by value, moved
        pub fn set_access_token(&mut self, v: ::std::string::String) {
            self.access_token = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_access_token(&mut self) -> &mut ::std::string::String {
            if self.access_token.is_none() {
                self.access_token = ::std::option::Option::Some(::std::string::String::new());
            }
            self.access_token.as_mut().unwrap()
        }

        // Take field
        pub fn take_access_token(&mut self) -> ::std::string::String {
            self.access_token.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string access_token_secret = 6;

        pub fn access_token_secret(&self) -> &str {
            match self.access_token_secret.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_access_token_secret(&mut self) {
            self.access_token_secret = ::std::option::Option::None;
        }

        pub fn has_access_token_secret(&self) -> bool {
            self.access_token_secret.is_some()
        }

        // Param is passed by value, moved
        pub fn set_access_token_secret(&mut self, v: ::std::string::String) {
            self.access_token_secret = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_access_token_secret(&mut self) -> &mut ::std::string::String {
            if self.access_token_secret.is_none() {
                self.access_token_secret = ::std::option::Option::Some(::std::string::String::new());
            }
            self.access_token_secret.as_mut().unwrap()
        }

        // Take field
        pub fn take_access_token_secret(&mut self) -> ::std::string::String {
            self.access_token_secret.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional bool is_valid = 7;

        pub fn is_valid(&self) -> bool {
            self.is_valid.unwrap_or(false)
        }

        pub fn clear_is_valid(&mut self) {
            self.is_valid = ::std::option::Option::None;
        }

        pub fn has_is_valid(&self) -> bool {
            self.is_valid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_is_valid(&mut self, v: bool) {
            self.is_valid = ::std::option::Option::Some(v);
        }
    }

    impl ::protobuf::Message for CExternalAccountTuple_Response {
        const NAME: &'static str = "CExternalAccountTuple_Response";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.external_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    18 => {
                        self.external_id = ::std::option::Option::Some(is.read_string()?);
                    },
                    26 => {
                        self.external_user_name = ::std::option::Option::Some(is.read_string()?);
                    },
                    34 => {
                        self.external_url = ::std::option::Option::Some(is.read_string()?);
                    },
                    42 => {
                        self.access_token = ::std::option::Option::Some(is.read_string()?);
                    },
                    50 => {
                        self.access_token_secret = ::std::option::Option::Some(is.read_string()?);
                    },
                    56 => {
                        self.is_valid = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.external_type {
                my_size += ::protobuf::rt::int32_size(1, v.value());
            }
            if let Some(v) = self.external_id.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            if let Some(v) = self.external_user_name.as_ref() {
                my_size += ::protobuf::rt::string_size(3, &v);
            }
            if let Some(v) = self.external_url.as_ref() {
                my_size += ::protobuf::rt::string_size(4, &v);
            }
            if let Some(v) = self.access_token.as_ref() {
                my_size += ::protobuf::rt::string_size(5, &v);
            }
            if let Some(v) = self.access_token_secret.as_ref() {
                my_size += ::protobuf::rt::string_size(6, &v);
            }
            if let Some(v) = self.is_valid {
                my_size += 1 + 1;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.external_type {
                os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
            }
            if let Some(v) = self.external_id.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.external_user_name.as_ref() {
                os.write_string(3, v)?;
            }
            if let Some(v) = self.external_url.as_ref() {
                os.write_string(4, v)?;
            }
            if let Some(v) = self.access_token.as_ref() {
                os.write_string(5, v)?;
            }
            if let Some(v) = self.access_token_secret.as_ref() {
                os.write_string(6, v)?;
            }
            if let Some(v) = self.is_valid {
                os.write_bool(7, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> CExternalAccountTuple_Response {
            CExternalAccountTuple_Response::new()
        }

        fn clear(&mut self) {
            self.external_type = ::std::option::Option::None;
            self.external_id = ::std::option::Option::None;
            self.external_user_name = ::std::option::Option::None;
            self.external_url = ::std::option::Option::None;
            self.access_token = ::std::option::Option::None;
            self.access_token_secret = ::std::option::Option::None;
            self.is_valid = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static CExternalAccountTuple_Response {
            static instance: CExternalAccountTuple_Response = CExternalAccountTuple_Response {
                external_type: ::std::option::Option::None,
                external_id: ::std::option::Option::None,
                external_user_name: ::std::option::Option::None,
                external_url: ::std::option::Option::None,
                access_token: ::std::option::Option::None,
                access_token_secret: ::std::option::Option::None,
                is_valid: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

#[doc = "Use a logged-in (password/etc) session to create a durable access token"]
// @@protoc_insertion_point(message:CEmbeddedClient_AuthorizeCurrentDevice_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CEmbeddedClient_AuthorizeCurrentDevice_Request {
    // message fields
    // @@protoc_insertion_point(field:CEmbeddedClient_AuthorizeCurrentDevice_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CEmbeddedClient_AuthorizeCurrentDevice_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CEmbeddedClient_AuthorizeCurrentDevice_Request.device_info)
    pub device_info: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CEmbeddedClient_AuthorizeCurrentDevice_Request.deviceid)
    pub deviceid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CEmbeddedClient_AuthorizeCurrentDevice_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CEmbeddedClient_AuthorizeCurrentDevice_Request {
    fn default() -> &'a CEmbeddedClient_AuthorizeCurrentDevice_Request {
        <CEmbeddedClient_AuthorizeCurrentDevice_Request as ::protobuf::Message>::default_instance()
    }
}

impl CEmbeddedClient_AuthorizeCurrentDevice_Request {
    pub fn new() -> CEmbeddedClient_AuthorizeCurrentDevice_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional string device_info = 3;

    pub fn device_info(&self) -> &str {
        match self.device_info.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_device_info(&mut self) {
        self.device_info = ::std::option::Option::None;
    }

    pub fn has_device_info(&self) -> bool {
        self.device_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_info(&mut self, v: ::std::string::String) {
        self.device_info = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_info(&mut self) -> &mut ::std::string::String {
        if self.device_info.is_none() {
            self.device_info = ::std::option::Option::Some(::std::string::String::new());
        }
        self.device_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_info(&mut self) -> ::std::string::String {
        self.device_info.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 deviceid = 4;

    pub fn deviceid(&self) -> u32 {
        self.deviceid.unwrap_or(0)
    }

    pub fn clear_deviceid(&mut self) {
        self.deviceid = ::std::option::Option::None;
    }

    pub fn has_deviceid(&self) -> bool {
        self.deviceid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deviceid(&mut self, v: u32) {
        self.deviceid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CEmbeddedClient_AuthorizeCurrentDevice_Request {
    const NAME: &'static str = "CEmbeddedClient_AuthorizeCurrentDevice_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.device_info = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.deviceid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.device_info.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.deviceid {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.device_info.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.deviceid {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CEmbeddedClient_AuthorizeCurrentDevice_Request {
        CEmbeddedClient_AuthorizeCurrentDevice_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.device_info = ::std::option::Option::None;
        self.deviceid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CEmbeddedClient_AuthorizeCurrentDevice_Request {
        static instance: CEmbeddedClient_AuthorizeCurrentDevice_Request = CEmbeddedClient_AuthorizeCurrentDevice_Request {
            steamid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            device_info: ::std::option::Option::None,
            deviceid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CEmbeddedClient_Token)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CEmbeddedClient_Token {
    // message fields
    // @@protoc_insertion_point(field:CEmbeddedClient_Token.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CEmbeddedClient_Token.client_token)
    pub client_token: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:CEmbeddedClient_Token.expiry)
    pub expiry: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CEmbeddedClient_Token.deviceid)
    pub deviceid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CEmbeddedClient_Token.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CEmbeddedClient_Token {
    fn default() -> &'a CEmbeddedClient_Token {
        <CEmbeddedClient_Token as ::protobuf::Message>::default_instance()
    }
}

impl CEmbeddedClient_Token {
    pub fn new() -> CEmbeddedClient_Token {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional bytes client_token = 2;

    pub fn client_token(&self) -> &[u8] {
        match self.client_token.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_client_token(&mut self) {
        self.client_token = ::std::option::Option::None;
    }

    pub fn has_client_token(&self) -> bool {
        self.client_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_token(&mut self, v: ::std::vec::Vec<u8>) {
        self.client_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_token(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.client_token.is_none() {
            self.client_token = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.client_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_client_token(&mut self) -> ::std::vec::Vec<u8> {
        self.client_token.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint32 expiry = 3;

    pub fn expiry(&self) -> u32 {
        self.expiry.unwrap_or(0)
    }

    pub fn clear_expiry(&mut self) {
        self.expiry = ::std::option::Option::None;
    }

    pub fn has_expiry(&self) -> bool {
        self.expiry.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expiry(&mut self, v: u32) {
        self.expiry = ::std::option::Option::Some(v);
    }

    // optional uint32 deviceid = 4;

    pub fn deviceid(&self) -> u32 {
        self.deviceid.unwrap_or(0)
    }

    pub fn clear_deviceid(&mut self) {
        self.deviceid = ::std::option::Option::None;
    }

    pub fn has_deviceid(&self) -> bool {
        self.deviceid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deviceid(&mut self, v: u32) {
        self.deviceid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CEmbeddedClient_Token {
    const NAME: &'static str = "CEmbeddedClient_Token";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    self.client_token = ::std::option::Option::Some(is.read_bytes()?);
                },
                24 => {
                    self.expiry = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.deviceid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.client_token.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.expiry {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.deviceid {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.client_token.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.expiry {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.deviceid {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CEmbeddedClient_Token {
        CEmbeddedClient_Token::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.client_token = ::std::option::Option::None;
        self.expiry = ::std::option::Option::None;
        self.deviceid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CEmbeddedClient_Token {
        static instance: CEmbeddedClient_Token = CEmbeddedClient_Token {
            steamid: ::std::option::Option::None,
            client_token: ::std::option::Option::None,
            expiry: ::std::option::Option::None,
            deviceid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CEmbeddedClient_AuthorizeDevice_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CEmbeddedClient_AuthorizeDevice_Response {
    // message fields
    // @@protoc_insertion_point(field:CEmbeddedClient_AuthorizeDevice_Response.result)
    pub result: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CEmbeddedClient_AuthorizeDevice_Response.token)
    pub token: ::protobuf::MessageField<CEmbeddedClient_Token>,
    // special fields
    // @@protoc_insertion_point(special_field:CEmbeddedClient_AuthorizeDevice_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CEmbeddedClient_AuthorizeDevice_Response {
    fn default() -> &'a CEmbeddedClient_AuthorizeDevice_Response {
        <CEmbeddedClient_AuthorizeDevice_Response as ::protobuf::Message>::default_instance()
    }
}

impl CEmbeddedClient_AuthorizeDevice_Response {
    pub fn new() -> CEmbeddedClient_AuthorizeDevice_Response {
        ::std::default::Default::default()
    }

    // optional uint32 result = 1;

    pub fn result(&self) -> u32 {
        self.result.unwrap_or(0)
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: u32) {
        self.result = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CEmbeddedClient_AuthorizeDevice_Response {
    const NAME: &'static str = "CEmbeddedClient_AuthorizeDevice_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.token)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.token.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.token.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CEmbeddedClient_AuthorizeDevice_Response {
        CEmbeddedClient_AuthorizeDevice_Response::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.token.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CEmbeddedClient_AuthorizeDevice_Response {
        static instance: CEmbeddedClient_AuthorizeDevice_Response = CEmbeddedClient_AuthorizeDevice_Response {
            result: ::std::option::Option::None,
            token: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EInternalAccountType)
pub enum EInternalAccountType {
    // @@protoc_insertion_point(enum_value:EInternalAccountType.k_EInternalSteamAccountType)
    k_EInternalSteamAccountType = 1,
    // @@protoc_insertion_point(enum_value:EInternalAccountType.k_EInternalClanType)
    k_EInternalClanType = 2,
    // @@protoc_insertion_point(enum_value:EInternalAccountType.k_EInternalAppType)
    k_EInternalAppType = 3,
    // @@protoc_insertion_point(enum_value:EInternalAccountType.k_EInternalBroadcastChannelType)
    k_EInternalBroadcastChannelType = 4,
}

impl ::protobuf::Enum for EInternalAccountType {
    const NAME: &'static str = "EInternalAccountType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EInternalAccountType> {
        match value {
            1 => ::std::option::Option::Some(EInternalAccountType::k_EInternalSteamAccountType),
            2 => ::std::option::Option::Some(EInternalAccountType::k_EInternalClanType),
            3 => ::std::option::Option::Some(EInternalAccountType::k_EInternalAppType),
            4 => ::std::option::Option::Some(EInternalAccountType::k_EInternalBroadcastChannelType),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EInternalAccountType> {
        match str {
            "k_EInternalSteamAccountType" => ::std::option::Option::Some(EInternalAccountType::k_EInternalSteamAccountType),
            "k_EInternalClanType" => ::std::option::Option::Some(EInternalAccountType::k_EInternalClanType),
            "k_EInternalAppType" => ::std::option::Option::Some(EInternalAccountType::k_EInternalAppType),
            "k_EInternalBroadcastChannelType" => ::std::option::Option::Some(EInternalAccountType::k_EInternalBroadcastChannelType),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EInternalAccountType] = &[
        EInternalAccountType::k_EInternalSteamAccountType,
        EInternalAccountType::k_EInternalClanType,
        EInternalAccountType::k_EInternalAppType,
        EInternalAccountType::k_EInternalBroadcastChannelType,
    ];
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EInternalAccountType {
    fn default() -> Self {
        EInternalAccountType::k_EInternalSteamAccountType
    }
}


#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EExternalAccountType)
pub enum EExternalAccountType {
    // @@protoc_insertion_point(enum_value:EExternalAccountType.k_EExternalNone)
    k_EExternalNone = 0,
    // @@protoc_insertion_point(enum_value:EExternalAccountType.k_EExternalSteamAccount)
    k_EExternalSteamAccount = 1,
    // @@protoc_insertion_point(enum_value:EExternalAccountType.k_EExternalGoogleAccount)
    k_EExternalGoogleAccount = 2,
    // @@protoc_insertion_point(enum_value:EExternalAccountType.k_EExternalFacebookAccount)
    k_EExternalFacebookAccount = 3,
    // @@protoc_insertion_point(enum_value:EExternalAccountType.k_EExternalTwitterAccount)
    k_EExternalTwitterAccount = 4,
    // @@protoc_insertion_point(enum_value:EExternalAccountType.k_EExternalTwitchAccount)
    k_EExternalTwitchAccount = 5,
    // @@protoc_insertion_point(enum_value:EExternalAccountType.k_EExternalYouTubeChannelAccount)
    k_EExternalYouTubeChannelAccount = 6,
    // @@protoc_insertion_point(enum_value:EExternalAccountType.k_EExternalFacebookPage)
    k_EExternalFacebookPage = 7,
}

impl ::protobuf::Enum for EExternalAccountType {
    const NAME: &'static str = "EExternalAccountType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EExternalAccountType> {
        match value {
            0 => ::std::option::Option::Some(EExternalAccountType::k_EExternalNone),
            1 => ::std::option::Option::Some(EExternalAccountType::k_EExternalSteamAccount),
            2 => ::std::option::Option::Some(EExternalAccountType::k_EExternalGoogleAccount),
            3 => ::std::option::Option::Some(EExternalAccountType::k_EExternalFacebookAccount),
            4 => ::std::option::Option::Some(EExternalAccountType::k_EExternalTwitterAccount),
            5 => ::std::option::Option::Some(EExternalAccountType::k_EExternalTwitchAccount),
            6 => ::std::option::Option::Some(EExternalAccountType::k_EExternalYouTubeChannelAccount),
            7 => ::std::option::Option::Some(EExternalAccountType::k_EExternalFacebookPage),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EExternalAccountType> {
        match str {
            "k_EExternalNone" => ::std::option::Option::Some(EExternalAccountType::k_EExternalNone),
            "k_EExternalSteamAccount" => ::std::option::Option::Some(EExternalAccountType::k_EExternalSteamAccount),
            "k_EExternalGoogleAccount" => ::std::option::Option::Some(EExternalAccountType::k_EExternalGoogleAccount),
            "k_EExternalFacebookAccount" => ::std::option::Option::Some(EExternalAccountType::k_EExternalFacebookAccount),
            "k_EExternalTwitterAccount" => ::std::option::Option::Some(EExternalAccountType::k_EExternalTwitterAccount),
            "k_EExternalTwitchAccount" => ::std::option::Option::Some(EExternalAccountType::k_EExternalTwitchAccount),
            "k_EExternalYouTubeChannelAccount" => ::std::option::Option::Some(EExternalAccountType::k_EExternalYouTubeChannelAccount),
            "k_EExternalFacebookPage" => ::std::option::Option::Some(EExternalAccountType::k_EExternalFacebookPage),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EExternalAccountType] = &[
        EExternalAccountType::k_EExternalNone,
        EExternalAccountType::k_EExternalSteamAccount,
        EExternalAccountType::k_EExternalGoogleAccount,
        EExternalAccountType::k_EExternalFacebookAccount,
        EExternalAccountType::k_EExternalTwitterAccount,
        EExternalAccountType::k_EExternalTwitchAccount,
        EExternalAccountType::k_EExternalYouTubeChannelAccount,
        EExternalAccountType::k_EExternalFacebookPage,
    ];
}

impl ::std::default::Default for EExternalAccountType {
    fn default() -> Self {
        EExternalAccountType::k_EExternalNone
    }
}

#[allow(unused_imports)]
use crate::steammessages_base::*;
#[allow(unused_imports)]
use crate::steammessages_unified_base_steamclient::*;
impl crate::RpcMessage for CUserAccount_GetAvailableValveDiscountPromotions_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CUserAccount_GetAvailableValveDiscountPromotions_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CUserAccount_GetClientWalletDetails_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CUserAccount_GetWalletDetails_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CUserAccount_GetAccountLinkStatus_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CUserAccount_GetAccountLinkStatus_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CUserAccount_CancelLicenseForApp_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CUserAccount_CancelLicenseForApp_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CUserAccount_GetUserCountry_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CUserAccount_GetUserCountry_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CUserAccount_CreateFriendInviteToken_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CUserAccount_CreateFriendInviteToken_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CUserAccount_GetFriendInviteTokens_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CUserAccount_GetFriendInviteTokens_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CUserAccount_ViewFriendInviteToken_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CUserAccount_ViewFriendInviteToken_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CUserAccount_RedeemFriendInviteToken_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CUserAccount_RedeemFriendInviteToken_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CUserAccount_RevokeFriendInviteToken_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CUserAccount_RevokeFriendInviteToken_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CUserAccount_RegisterCompatTool_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CUserAccount_RegisterCompatTool_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CAccountLinking_GetLinkedAccountInfo_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CAccountLinking_GetLinkedAccountInfo_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CEmbeddedClient_AuthorizeCurrentDevice_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CEmbeddedClient_Token {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CEmbeddedClient_AuthorizeDevice_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
///A service to get user account information
struct UserAccount {}
impl crate::RpcService for UserAccount {
    const SERVICE_NAME: &'static str = "UserAccount";
}
///A service to manage and link to external accounts
struct AccountLinking {}
impl crate::RpcService for AccountLinking {
    const SERVICE_NAME: &'static str = "AccountLinking";
}
///Service to authorize and manage Steam functions directly embedded in games
struct EmbeddedClient {}
impl crate::RpcService for EmbeddedClient {
    const SERVICE_NAME: &'static str = "EmbeddedClient";
}
impl crate::RpcMethod for CAccountLinking_GetLinkedAccountInfo_Request {
    const METHOD_NAME: &'static str = "AccountLinking.GetLinkedAccountInfo#1";
    type Response = CAccountLinking_GetLinkedAccountInfo_Response;
}
impl crate::RpcMethod for CEmbeddedClient_AuthorizeCurrentDevice_Request {
    const METHOD_NAME: &'static str = "EmbeddedClient.AuthorizeCurrentDevice#1";
    type Response = CEmbeddedClient_AuthorizeDevice_Response;
}
impl crate::RpcMethod for CUserAccount_CancelLicenseForApp_Request {
    const METHOD_NAME: &'static str = "UserAccount.CancelLicenseForApp#1";
    type Response = CUserAccount_CancelLicenseForApp_Response;
}
impl crate::RpcMethod for CUserAccount_CreateFriendInviteToken_Request {
    const METHOD_NAME: &'static str = "UserAccount.CreateFriendInviteToken#1";
    type Response = CUserAccount_CreateFriendInviteToken_Response;
}
impl crate::RpcMethod for CUserAccount_GetAccountLinkStatus_Request {
    const METHOD_NAME: &'static str = "UserAccount.GetAccountLinkStatus#1";
    type Response = CUserAccount_GetAccountLinkStatus_Response;
}
impl crate::RpcMethod for CUserAccount_GetAvailableValveDiscountPromotions_Request {
    const METHOD_NAME: &'static str = "UserAccount.GetAvailableValveDiscountPromotions#1";
    type Response = CUserAccount_GetAvailableValveDiscountPromotions_Response;
}
impl crate::RpcMethod for CUserAccount_GetClientWalletDetails_Request {
    const METHOD_NAME: &'static str = "UserAccount.GetClientWalletDetails#1";
    type Response = CUserAccount_GetWalletDetails_Response;
}
impl crate::RpcMethod for CUserAccount_GetFriendInviteTokens_Request {
    const METHOD_NAME: &'static str = "UserAccount.GetFriendInviteTokens#1";
    type Response = CUserAccount_GetFriendInviteTokens_Response;
}
impl crate::RpcMethod for CUserAccount_GetUserCountry_Request {
    const METHOD_NAME: &'static str = "UserAccount.GetUserCountry#1";
    type Response = CUserAccount_GetUserCountry_Response;
}
impl crate::RpcMethod for CUserAccount_RedeemFriendInviteToken_Request {
    const METHOD_NAME: &'static str = "UserAccount.RedeemFriendInviteToken#1";
    type Response = CUserAccount_RedeemFriendInviteToken_Response;
}
impl crate::RpcMethod for CUserAccount_RegisterCompatTool_Request {
    const METHOD_NAME: &'static str = "UserAccount.RegisterCompatTool#1";
    type Response = CUserAccount_RegisterCompatTool_Response;
}
impl crate::RpcMethod for CUserAccount_RevokeFriendInviteToken_Request {
    const METHOD_NAME: &'static str = "UserAccount.RevokeFriendInviteToken#1";
    type Response = CUserAccount_RevokeFriendInviteToken_Response;
}
impl crate::RpcMethod for CUserAccount_ViewFriendInviteToken_Request {
    const METHOD_NAME: &'static str = "UserAccount.ViewFriendInviteToken#1";
    type Response = CUserAccount_ViewFriendInviteToken_Response;
}
