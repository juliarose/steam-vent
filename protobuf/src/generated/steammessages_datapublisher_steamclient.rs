// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_datapublisher.steamclient.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:CDataPublisher_ClientContentCorruptionReport_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDataPublisher_ClientContentCorruptionReport_Notification {
    // message fields
    // @@protoc_insertion_point(field:CDataPublisher_ClientContentCorruptionReport_Notification.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientContentCorruptionReport_Notification.depotid)
    pub depotid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientContentCorruptionReport_Notification.download_source)
    pub download_source: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientContentCorruptionReport_Notification.objectid)
    pub objectid: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientContentCorruptionReport_Notification.cellid)
    pub cellid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientContentCorruptionReport_Notification.is_manifest)
    pub is_manifest: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientContentCorruptionReport_Notification.object_size)
    pub object_size: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientContentCorruptionReport_Notification.corruption_type)
    pub corruption_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientContentCorruptionReport_Notification.used_https)
    pub used_https: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientContentCorruptionReport_Notification.oc_proxy_detected)
    pub oc_proxy_detected: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CDataPublisher_ClientContentCorruptionReport_Notification.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDataPublisher_ClientContentCorruptionReport_Notification {
    fn default() -> &'a CDataPublisher_ClientContentCorruptionReport_Notification {
        <CDataPublisher_ClientContentCorruptionReport_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CDataPublisher_ClientContentCorruptionReport_Notification {
    pub fn new() -> CDataPublisher_ClientContentCorruptionReport_Notification {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 depotid = 2;

    pub fn depotid(&self) -> u32 {
        self.depotid.unwrap_or(0)
    }

    pub fn clear_depotid(&mut self) {
        self.depotid = ::std::option::Option::None;
    }

    pub fn has_depotid(&self) -> bool {
        self.depotid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_depotid(&mut self, v: u32) {
        self.depotid = ::std::option::Option::Some(v);
    }

    // optional string download_source = 3;

    pub fn download_source(&self) -> &str {
        match self.download_source.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_download_source(&mut self) {
        self.download_source = ::std::option::Option::None;
    }

    pub fn has_download_source(&self) -> bool {
        self.download_source.is_some()
    }

    // Param is passed by value, moved
    pub fn set_download_source(&mut self, v: ::std::string::String) {
        self.download_source = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_download_source(&mut self) -> &mut ::std::string::String {
        if self.download_source.is_none() {
            self.download_source = ::std::option::Option::Some(::std::string::String::new());
        }
        self.download_source.as_mut().unwrap()
    }

    // Take field
    pub fn take_download_source(&mut self) -> ::std::string::String {
        self.download_source.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string objectid = 4;

    pub fn objectid(&self) -> &str {
        match self.objectid.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_objectid(&mut self) {
        self.objectid = ::std::option::Option::None;
    }

    pub fn has_objectid(&self) -> bool {
        self.objectid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_objectid(&mut self, v: ::std::string::String) {
        self.objectid = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_objectid(&mut self) -> &mut ::std::string::String {
        if self.objectid.is_none() {
            self.objectid = ::std::option::Option::Some(::std::string::String::new());
        }
        self.objectid.as_mut().unwrap()
    }

    // Take field
    pub fn take_objectid(&mut self) -> ::std::string::String {
        self.objectid.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 cellid = 5;

    pub fn cellid(&self) -> u32 {
        self.cellid.unwrap_or(0)
    }

    pub fn clear_cellid(&mut self) {
        self.cellid = ::std::option::Option::None;
    }

    pub fn has_cellid(&self) -> bool {
        self.cellid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cellid(&mut self, v: u32) {
        self.cellid = ::std::option::Option::Some(v);
    }

    // optional bool is_manifest = 6;

    pub fn is_manifest(&self) -> bool {
        self.is_manifest.unwrap_or(false)
    }

    pub fn clear_is_manifest(&mut self) {
        self.is_manifest = ::std::option::Option::None;
    }

    pub fn has_is_manifest(&self) -> bool {
        self.is_manifest.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_manifest(&mut self, v: bool) {
        self.is_manifest = ::std::option::Option::Some(v);
    }

    // optional uint64 object_size = 7;

    pub fn object_size(&self) -> u64 {
        self.object_size.unwrap_or(0)
    }

    pub fn clear_object_size(&mut self) {
        self.object_size = ::std::option::Option::None;
    }

    pub fn has_object_size(&self) -> bool {
        self.object_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_object_size(&mut self, v: u64) {
        self.object_size = ::std::option::Option::Some(v);
    }

    // optional uint32 corruption_type = 8;

    pub fn corruption_type(&self) -> u32 {
        self.corruption_type.unwrap_or(0)
    }

    pub fn clear_corruption_type(&mut self) {
        self.corruption_type = ::std::option::Option::None;
    }

    pub fn has_corruption_type(&self) -> bool {
        self.corruption_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_corruption_type(&mut self, v: u32) {
        self.corruption_type = ::std::option::Option::Some(v);
    }

    // optional bool used_https = 9;

    pub fn used_https(&self) -> bool {
        self.used_https.unwrap_or(false)
    }

    pub fn clear_used_https(&mut self) {
        self.used_https = ::std::option::Option::None;
    }

    pub fn has_used_https(&self) -> bool {
        self.used_https.is_some()
    }

    // Param is passed by value, moved
    pub fn set_used_https(&mut self, v: bool) {
        self.used_https = ::std::option::Option::Some(v);
    }

    // optional bool oc_proxy_detected = 10;

    pub fn oc_proxy_detected(&self) -> bool {
        self.oc_proxy_detected.unwrap_or(false)
    }

    pub fn clear_oc_proxy_detected(&mut self) {
        self.oc_proxy_detected = ::std::option::Option::None;
    }

    pub fn has_oc_proxy_detected(&self) -> bool {
        self.oc_proxy_detected.is_some()
    }

    // Param is passed by value, moved
    pub fn set_oc_proxy_detected(&mut self, v: bool) {
        self.oc_proxy_detected = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CDataPublisher_ClientContentCorruptionReport_Notification {
    const NAME: &'static str = "CDataPublisher_ClientContentCorruptionReport_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.depotid = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.download_source = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.objectid = ::std::option::Option::Some(is.read_string()?);
                },
                40 => {
                    self.cellid = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.is_manifest = ::std::option::Option::Some(is.read_bool()?);
                },
                56 => {
                    self.object_size = ::std::option::Option::Some(is.read_uint64()?);
                },
                64 => {
                    self.corruption_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.used_https = ::std::option::Option::Some(is.read_bool()?);
                },
                80 => {
                    self.oc_proxy_detected = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.depotid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.download_source.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.objectid.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.cellid {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.is_manifest {
            my_size += 1 + 1;
        }
        if let Some(v) = self.object_size {
            my_size += ::protobuf::rt::uint64_size(7, v);
        }
        if let Some(v) = self.corruption_type {
            my_size += ::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.used_https {
            my_size += 1 + 1;
        }
        if let Some(v) = self.oc_proxy_detected {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.depotid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.download_source.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.objectid.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.cellid {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.is_manifest {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.object_size {
            os.write_uint64(7, v)?;
        }
        if let Some(v) = self.corruption_type {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.used_https {
            os.write_bool(9, v)?;
        }
        if let Some(v) = self.oc_proxy_detected {
            os.write_bool(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDataPublisher_ClientContentCorruptionReport_Notification {
        CDataPublisher_ClientContentCorruptionReport_Notification::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.depotid = ::std::option::Option::None;
        self.download_source = ::std::option::Option::None;
        self.objectid = ::std::option::Option::None;
        self.cellid = ::std::option::Option::None;
        self.is_manifest = ::std::option::Option::None;
        self.object_size = ::std::option::Option::None;
        self.corruption_type = ::std::option::Option::None;
        self.used_https = ::std::option::Option::None;
        self.oc_proxy_detected = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDataPublisher_ClientContentCorruptionReport_Notification {
        static instance: CDataPublisher_ClientContentCorruptionReport_Notification = CDataPublisher_ClientContentCorruptionReport_Notification {
            appid: ::std::option::Option::None,
            depotid: ::std::option::Option::None,
            download_source: ::std::option::Option::None,
            objectid: ::std::option::Option::None,
            cellid: ::std::option::Option::None,
            is_manifest: ::std::option::Option::None,
            object_size: ::std::option::Option::None,
            corruption_type: ::std::option::Option::None,
            used_https: ::std::option::Option::None,
            oc_proxy_detected: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CDataPublisher_ClientUpdateAppJob_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDataPublisher_ClientUpdateAppJob_Notification {
    // message fields
    // @@protoc_insertion_point(field:CDataPublisher_ClientUpdateAppJob_Notification.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientUpdateAppJob_Notification.depot_ids)
    pub depot_ids: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientUpdateAppJob_Notification.app_state)
    pub app_state: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientUpdateAppJob_Notification.job_app_error)
    pub job_app_error: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientUpdateAppJob_Notification.error_details)
    pub error_details: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientUpdateAppJob_Notification.job_duration)
    pub job_duration: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientUpdateAppJob_Notification.files_validation_failed)
    pub files_validation_failed: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientUpdateAppJob_Notification.job_bytes_downloaded)
    pub job_bytes_downloaded: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientUpdateAppJob_Notification.job_bytes_staged)
    pub job_bytes_staged: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientUpdateAppJob_Notification.bytes_comitted)
    pub bytes_comitted: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientUpdateAppJob_Notification.start_app_state)
    pub start_app_state: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientUpdateAppJob_Notification.stats_machine_id)
    pub stats_machine_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientUpdateAppJob_Notification.branch_name)
    pub branch_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientUpdateAppJob_Notification.total_bytes_downloaded)
    pub total_bytes_downloaded: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientUpdateAppJob_Notification.total_bytes_staged)
    pub total_bytes_staged: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientUpdateAppJob_Notification.total_bytes_restored)
    pub total_bytes_restored: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientUpdateAppJob_Notification.is_borrowed)
    pub is_borrowed: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientUpdateAppJob_Notification.is_free_weekend)
    pub is_free_weekend: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientUpdateAppJob_Notification.total_bytes_patched)
    pub total_bytes_patched: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientUpdateAppJob_Notification.total_bytes_saved)
    pub total_bytes_saved: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CDataPublisher_ClientUpdateAppJob_Notification.cell_id)
    pub cell_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CDataPublisher_ClientUpdateAppJob_Notification.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDataPublisher_ClientUpdateAppJob_Notification {
    fn default() -> &'a CDataPublisher_ClientUpdateAppJob_Notification {
        <CDataPublisher_ClientUpdateAppJob_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CDataPublisher_ClientUpdateAppJob_Notification {
    pub fn new() -> CDataPublisher_ClientUpdateAppJob_Notification {
        ::std::default::Default::default()
    }

    // optional uint32 app_id = 1;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional uint32 app_state = 3;

    pub fn app_state(&self) -> u32 {
        self.app_state.unwrap_or(0)
    }

    pub fn clear_app_state(&mut self) {
        self.app_state = ::std::option::Option::None;
    }

    pub fn has_app_state(&self) -> bool {
        self.app_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_state(&mut self, v: u32) {
        self.app_state = ::std::option::Option::Some(v);
    }

    // optional uint32 job_app_error = 4;

    pub fn job_app_error(&self) -> u32 {
        self.job_app_error.unwrap_or(0)
    }

    pub fn clear_job_app_error(&mut self) {
        self.job_app_error = ::std::option::Option::None;
    }

    pub fn has_job_app_error(&self) -> bool {
        self.job_app_error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_job_app_error(&mut self, v: u32) {
        self.job_app_error = ::std::option::Option::Some(v);
    }

    // optional string error_details = 5;

    pub fn error_details(&self) -> &str {
        match self.error_details.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_error_details(&mut self) {
        self.error_details = ::std::option::Option::None;
    }

    pub fn has_error_details(&self) -> bool {
        self.error_details.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error_details(&mut self, v: ::std::string::String) {
        self.error_details = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error_details(&mut self) -> &mut ::std::string::String {
        if self.error_details.is_none() {
            self.error_details = ::std::option::Option::Some(::std::string::String::new());
        }
        self.error_details.as_mut().unwrap()
    }

    // Take field
    pub fn take_error_details(&mut self) -> ::std::string::String {
        self.error_details.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 job_duration = 6;

    pub fn job_duration(&self) -> u32 {
        self.job_duration.unwrap_or(0)
    }

    pub fn clear_job_duration(&mut self) {
        self.job_duration = ::std::option::Option::None;
    }

    pub fn has_job_duration(&self) -> bool {
        self.job_duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_job_duration(&mut self, v: u32) {
        self.job_duration = ::std::option::Option::Some(v);
    }

    // optional uint32 files_validation_failed = 7;

    pub fn files_validation_failed(&self) -> u32 {
        self.files_validation_failed.unwrap_or(0)
    }

    pub fn clear_files_validation_failed(&mut self) {
        self.files_validation_failed = ::std::option::Option::None;
    }

    pub fn has_files_validation_failed(&self) -> bool {
        self.files_validation_failed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_files_validation_failed(&mut self, v: u32) {
        self.files_validation_failed = ::std::option::Option::Some(v);
    }

    // optional uint64 job_bytes_downloaded = 8;

    pub fn job_bytes_downloaded(&self) -> u64 {
        self.job_bytes_downloaded.unwrap_or(0)
    }

    pub fn clear_job_bytes_downloaded(&mut self) {
        self.job_bytes_downloaded = ::std::option::Option::None;
    }

    pub fn has_job_bytes_downloaded(&self) -> bool {
        self.job_bytes_downloaded.is_some()
    }

    // Param is passed by value, moved
    pub fn set_job_bytes_downloaded(&mut self, v: u64) {
        self.job_bytes_downloaded = ::std::option::Option::Some(v);
    }

    // optional uint64 job_bytes_staged = 9;

    pub fn job_bytes_staged(&self) -> u64 {
        self.job_bytes_staged.unwrap_or(0)
    }

    pub fn clear_job_bytes_staged(&mut self) {
        self.job_bytes_staged = ::std::option::Option::None;
    }

    pub fn has_job_bytes_staged(&self) -> bool {
        self.job_bytes_staged.is_some()
    }

    // Param is passed by value, moved
    pub fn set_job_bytes_staged(&mut self, v: u64) {
        self.job_bytes_staged = ::std::option::Option::Some(v);
    }

    // optional uint64 bytes_comitted = 10;

    pub fn bytes_comitted(&self) -> u64 {
        self.bytes_comitted.unwrap_or(0)
    }

    pub fn clear_bytes_comitted(&mut self) {
        self.bytes_comitted = ::std::option::Option::None;
    }

    pub fn has_bytes_comitted(&self) -> bool {
        self.bytes_comitted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bytes_comitted(&mut self, v: u64) {
        self.bytes_comitted = ::std::option::Option::Some(v);
    }

    // optional uint32 start_app_state = 11;

    pub fn start_app_state(&self) -> u32 {
        self.start_app_state.unwrap_or(0)
    }

    pub fn clear_start_app_state(&mut self) {
        self.start_app_state = ::std::option::Option::None;
    }

    pub fn has_start_app_state(&self) -> bool {
        self.start_app_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_app_state(&mut self, v: u32) {
        self.start_app_state = ::std::option::Option::Some(v);
    }

    // optional fixed64 stats_machine_id = 12;

    pub fn stats_machine_id(&self) -> u64 {
        self.stats_machine_id.unwrap_or(0)
    }

    pub fn clear_stats_machine_id(&mut self) {
        self.stats_machine_id = ::std::option::Option::None;
    }

    pub fn has_stats_machine_id(&self) -> bool {
        self.stats_machine_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stats_machine_id(&mut self, v: u64) {
        self.stats_machine_id = ::std::option::Option::Some(v);
    }

    // optional string branch_name = 13;

    pub fn branch_name(&self) -> &str {
        match self.branch_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_branch_name(&mut self) {
        self.branch_name = ::std::option::Option::None;
    }

    pub fn has_branch_name(&self) -> bool {
        self.branch_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_branch_name(&mut self, v: ::std::string::String) {
        self.branch_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_branch_name(&mut self) -> &mut ::std::string::String {
        if self.branch_name.is_none() {
            self.branch_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.branch_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_branch_name(&mut self) -> ::std::string::String {
        self.branch_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 total_bytes_downloaded = 14;

    pub fn total_bytes_downloaded(&self) -> u64 {
        self.total_bytes_downloaded.unwrap_or(0)
    }

    pub fn clear_total_bytes_downloaded(&mut self) {
        self.total_bytes_downloaded = ::std::option::Option::None;
    }

    pub fn has_total_bytes_downloaded(&self) -> bool {
        self.total_bytes_downloaded.is_some()
    }

    // Param is passed by value, moved
    pub fn set_total_bytes_downloaded(&mut self, v: u64) {
        self.total_bytes_downloaded = ::std::option::Option::Some(v);
    }

    // optional uint64 total_bytes_staged = 15;

    pub fn total_bytes_staged(&self) -> u64 {
        self.total_bytes_staged.unwrap_or(0)
    }

    pub fn clear_total_bytes_staged(&mut self) {
        self.total_bytes_staged = ::std::option::Option::None;
    }

    pub fn has_total_bytes_staged(&self) -> bool {
        self.total_bytes_staged.is_some()
    }

    // Param is passed by value, moved
    pub fn set_total_bytes_staged(&mut self, v: u64) {
        self.total_bytes_staged = ::std::option::Option::Some(v);
    }

    // optional uint64 total_bytes_restored = 16;

    pub fn total_bytes_restored(&self) -> u64 {
        self.total_bytes_restored.unwrap_or(0)
    }

    pub fn clear_total_bytes_restored(&mut self) {
        self.total_bytes_restored = ::std::option::Option::None;
    }

    pub fn has_total_bytes_restored(&self) -> bool {
        self.total_bytes_restored.is_some()
    }

    // Param is passed by value, moved
    pub fn set_total_bytes_restored(&mut self, v: u64) {
        self.total_bytes_restored = ::std::option::Option::Some(v);
    }

    // optional bool is_borrowed = 17;

    pub fn is_borrowed(&self) -> bool {
        self.is_borrowed.unwrap_or(false)
    }

    pub fn clear_is_borrowed(&mut self) {
        self.is_borrowed = ::std::option::Option::None;
    }

    pub fn has_is_borrowed(&self) -> bool {
        self.is_borrowed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_borrowed(&mut self, v: bool) {
        self.is_borrowed = ::std::option::Option::Some(v);
    }

    // optional bool is_free_weekend = 18;

    pub fn is_free_weekend(&self) -> bool {
        self.is_free_weekend.unwrap_or(false)
    }

    pub fn clear_is_free_weekend(&mut self) {
        self.is_free_weekend = ::std::option::Option::None;
    }

    pub fn has_is_free_weekend(&self) -> bool {
        self.is_free_weekend.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_free_weekend(&mut self, v: bool) {
        self.is_free_weekend = ::std::option::Option::Some(v);
    }

    // optional uint64 total_bytes_patched = 20;

    pub fn total_bytes_patched(&self) -> u64 {
        self.total_bytes_patched.unwrap_or(0)
    }

    pub fn clear_total_bytes_patched(&mut self) {
        self.total_bytes_patched = ::std::option::Option::None;
    }

    pub fn has_total_bytes_patched(&self) -> bool {
        self.total_bytes_patched.is_some()
    }

    // Param is passed by value, moved
    pub fn set_total_bytes_patched(&mut self, v: u64) {
        self.total_bytes_patched = ::std::option::Option::Some(v);
    }

    // optional uint64 total_bytes_saved = 21;

    pub fn total_bytes_saved(&self) -> u64 {
        self.total_bytes_saved.unwrap_or(0)
    }

    pub fn clear_total_bytes_saved(&mut self) {
        self.total_bytes_saved = ::std::option::Option::None;
    }

    pub fn has_total_bytes_saved(&self) -> bool {
        self.total_bytes_saved.is_some()
    }

    // Param is passed by value, moved
    pub fn set_total_bytes_saved(&mut self, v: u64) {
        self.total_bytes_saved = ::std::option::Option::Some(v);
    }

    // optional uint32 cell_id = 22;

    pub fn cell_id(&self) -> u32 {
        self.cell_id.unwrap_or(0)
    }

    pub fn clear_cell_id(&mut self) {
        self.cell_id = ::std::option::Option::None;
    }

    pub fn has_cell_id(&self) -> bool {
        self.cell_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cell_id(&mut self, v: u32) {
        self.cell_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CDataPublisher_ClientUpdateAppJob_Notification {
    const NAME: &'static str = "CDataPublisher_ClientUpdateAppJob_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    is.read_repeated_packed_uint32_into(&mut self.depot_ids)?;
                },
                16 => {
                    self.depot_ids.push(is.read_uint32()?);
                },
                24 => {
                    self.app_state = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.job_app_error = ::std::option::Option::Some(is.read_uint32()?);
                },
                42 => {
                    self.error_details = ::std::option::Option::Some(is.read_string()?);
                },
                48 => {
                    self.job_duration = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.files_validation_failed = ::std::option::Option::Some(is.read_uint32()?);
                },
                64 => {
                    self.job_bytes_downloaded = ::std::option::Option::Some(is.read_uint64()?);
                },
                72 => {
                    self.job_bytes_staged = ::std::option::Option::Some(is.read_uint64()?);
                },
                80 => {
                    self.bytes_comitted = ::std::option::Option::Some(is.read_uint64()?);
                },
                88 => {
                    self.start_app_state = ::std::option::Option::Some(is.read_uint32()?);
                },
                97 => {
                    self.stats_machine_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                106 => {
                    self.branch_name = ::std::option::Option::Some(is.read_string()?);
                },
                112 => {
                    self.total_bytes_downloaded = ::std::option::Option::Some(is.read_uint64()?);
                },
                120 => {
                    self.total_bytes_staged = ::std::option::Option::Some(is.read_uint64()?);
                },
                128 => {
                    self.total_bytes_restored = ::std::option::Option::Some(is.read_uint64()?);
                },
                136 => {
                    self.is_borrowed = ::std::option::Option::Some(is.read_bool()?);
                },
                144 => {
                    self.is_free_weekend = ::std::option::Option::Some(is.read_bool()?);
                },
                160 => {
                    self.total_bytes_patched = ::std::option::Option::Some(is.read_uint64()?);
                },
                168 => {
                    self.total_bytes_saved = ::std::option::Option::Some(is.read_uint64()?);
                },
                176 => {
                    self.cell_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        for value in &self.depot_ids {
            my_size += ::protobuf::rt::uint32_size(2, *value);
        };
        if let Some(v) = self.app_state {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.job_app_error {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.error_details.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.job_duration {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.files_validation_failed {
            my_size += ::protobuf::rt::uint32_size(7, v);
        }
        if let Some(v) = self.job_bytes_downloaded {
            my_size += ::protobuf::rt::uint64_size(8, v);
        }
        if let Some(v) = self.job_bytes_staged {
            my_size += ::protobuf::rt::uint64_size(9, v);
        }
        if let Some(v) = self.bytes_comitted {
            my_size += ::protobuf::rt::uint64_size(10, v);
        }
        if let Some(v) = self.start_app_state {
            my_size += ::protobuf::rt::uint32_size(11, v);
        }
        if let Some(v) = self.stats_machine_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.branch_name.as_ref() {
            my_size += ::protobuf::rt::string_size(13, &v);
        }
        if let Some(v) = self.total_bytes_downloaded {
            my_size += ::protobuf::rt::uint64_size(14, v);
        }
        if let Some(v) = self.total_bytes_staged {
            my_size += ::protobuf::rt::uint64_size(15, v);
        }
        if let Some(v) = self.total_bytes_restored {
            my_size += ::protobuf::rt::uint64_size(16, v);
        }
        if let Some(v) = self.is_borrowed {
            my_size += 2 + 1;
        }
        if let Some(v) = self.is_free_weekend {
            my_size += 2 + 1;
        }
        if let Some(v) = self.total_bytes_patched {
            my_size += ::protobuf::rt::uint64_size(20, v);
        }
        if let Some(v) = self.total_bytes_saved {
            my_size += ::protobuf::rt::uint64_size(21, v);
        }
        if let Some(v) = self.cell_id {
            my_size += ::protobuf::rt::uint32_size(22, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.app_id {
            os.write_uint32(1, v)?;
        }
        for v in &self.depot_ids {
            os.write_uint32(2, *v)?;
        };
        if let Some(v) = self.app_state {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.job_app_error {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.error_details.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.job_duration {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.files_validation_failed {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.job_bytes_downloaded {
            os.write_uint64(8, v)?;
        }
        if let Some(v) = self.job_bytes_staged {
            os.write_uint64(9, v)?;
        }
        if let Some(v) = self.bytes_comitted {
            os.write_uint64(10, v)?;
        }
        if let Some(v) = self.start_app_state {
            os.write_uint32(11, v)?;
        }
        if let Some(v) = self.stats_machine_id {
            os.write_fixed64(12, v)?;
        }
        if let Some(v) = self.branch_name.as_ref() {
            os.write_string(13, v)?;
        }
        if let Some(v) = self.total_bytes_downloaded {
            os.write_uint64(14, v)?;
        }
        if let Some(v) = self.total_bytes_staged {
            os.write_uint64(15, v)?;
        }
        if let Some(v) = self.total_bytes_restored {
            os.write_uint64(16, v)?;
        }
        if let Some(v) = self.is_borrowed {
            os.write_bool(17, v)?;
        }
        if let Some(v) = self.is_free_weekend {
            os.write_bool(18, v)?;
        }
        if let Some(v) = self.total_bytes_patched {
            os.write_uint64(20, v)?;
        }
        if let Some(v) = self.total_bytes_saved {
            os.write_uint64(21, v)?;
        }
        if let Some(v) = self.cell_id {
            os.write_uint32(22, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDataPublisher_ClientUpdateAppJob_Notification {
        CDataPublisher_ClientUpdateAppJob_Notification::new()
    }

    fn clear(&mut self) {
        self.app_id = ::std::option::Option::None;
        self.depot_ids.clear();
        self.app_state = ::std::option::Option::None;
        self.job_app_error = ::std::option::Option::None;
        self.error_details = ::std::option::Option::None;
        self.job_duration = ::std::option::Option::None;
        self.files_validation_failed = ::std::option::Option::None;
        self.job_bytes_downloaded = ::std::option::Option::None;
        self.job_bytes_staged = ::std::option::Option::None;
        self.bytes_comitted = ::std::option::Option::None;
        self.start_app_state = ::std::option::Option::None;
        self.stats_machine_id = ::std::option::Option::None;
        self.branch_name = ::std::option::Option::None;
        self.total_bytes_downloaded = ::std::option::Option::None;
        self.total_bytes_staged = ::std::option::Option::None;
        self.total_bytes_restored = ::std::option::Option::None;
        self.is_borrowed = ::std::option::Option::None;
        self.is_free_weekend = ::std::option::Option::None;
        self.total_bytes_patched = ::std::option::Option::None;
        self.total_bytes_saved = ::std::option::Option::None;
        self.cell_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDataPublisher_ClientUpdateAppJob_Notification {
        static instance: CDataPublisher_ClientUpdateAppJob_Notification = CDataPublisher_ClientUpdateAppJob_Notification {
            app_id: ::std::option::Option::None,
            depot_ids: ::std::vec::Vec::new(),
            app_state: ::std::option::Option::None,
            job_app_error: ::std::option::Option::None,
            error_details: ::std::option::Option::None,
            job_duration: ::std::option::Option::None,
            files_validation_failed: ::std::option::Option::None,
            job_bytes_downloaded: ::std::option::Option::None,
            job_bytes_staged: ::std::option::Option::None,
            bytes_comitted: ::std::option::Option::None,
            start_app_state: ::std::option::Option::None,
            stats_machine_id: ::std::option::Option::None,
            branch_name: ::std::option::Option::None,
            total_bytes_downloaded: ::std::option::Option::None,
            total_bytes_staged: ::std::option::Option::None,
            total_bytes_restored: ::std::option::Option::None,
            is_borrowed: ::std::option::Option::None,
            is_free_weekend: ::std::option::Option::None,
            total_bytes_patched: ::std::option::Option::None,
            total_bytes_saved: ::std::option::Option::None,
            cell_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Generate a debug report of what devices are in the survey"]
// @@protoc_insertion_point(message:CDataPublisher_GetVRDeviceInfo_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDataPublisher_GetVRDeviceInfo_Request {
    // message fields
    // @@protoc_insertion_point(field:CDataPublisher_GetVRDeviceInfo_Request.month_count)
    pub month_count: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CDataPublisher_GetVRDeviceInfo_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDataPublisher_GetVRDeviceInfo_Request {
    fn default() -> &'a CDataPublisher_GetVRDeviceInfo_Request {
        <CDataPublisher_GetVRDeviceInfo_Request as ::protobuf::Message>::default_instance()
    }
}

impl CDataPublisher_GetVRDeviceInfo_Request {
    pub fn new() -> CDataPublisher_GetVRDeviceInfo_Request {
        ::std::default::Default::default()
    }

    // optional uint32 month_count = 1;

    pub fn month_count(&self) -> u32 {
        self.month_count.unwrap_or(0)
    }

    pub fn clear_month_count(&mut self) {
        self.month_count = ::std::option::Option::None;
    }

    pub fn has_month_count(&self) -> bool {
        self.month_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_month_count(&mut self, v: u32) {
        self.month_count = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CDataPublisher_GetVRDeviceInfo_Request {
    const NAME: &'static str = "CDataPublisher_GetVRDeviceInfo_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.month_count = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.month_count {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.month_count {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDataPublisher_GetVRDeviceInfo_Request {
        CDataPublisher_GetVRDeviceInfo_Request::new()
    }

    fn clear(&mut self) {
        self.month_count = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDataPublisher_GetVRDeviceInfo_Request {
        static instance: CDataPublisher_GetVRDeviceInfo_Request = CDataPublisher_GetVRDeviceInfo_Request {
            month_count: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CDataPublisher_GetVRDeviceInfo_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDataPublisher_GetVRDeviceInfo_Response {
    // message fields
    // @@protoc_insertion_point(field:CDataPublisher_GetVRDeviceInfo_Response.device)
    pub device: ::std::vec::Vec<cdata_publisher_get_vrdevice_info_response::Device>,
    // special fields
    // @@protoc_insertion_point(special_field:CDataPublisher_GetVRDeviceInfo_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDataPublisher_GetVRDeviceInfo_Response {
    fn default() -> &'a CDataPublisher_GetVRDeviceInfo_Response {
        <CDataPublisher_GetVRDeviceInfo_Response as ::protobuf::Message>::default_instance()
    }
}

impl CDataPublisher_GetVRDeviceInfo_Response {
    pub fn new() -> CDataPublisher_GetVRDeviceInfo_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CDataPublisher_GetVRDeviceInfo_Response {
    const NAME: &'static str = "CDataPublisher_GetVRDeviceInfo_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.device.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.device {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.device {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDataPublisher_GetVRDeviceInfo_Response {
        CDataPublisher_GetVRDeviceInfo_Response::new()
    }

    fn clear(&mut self) {
        self.device.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDataPublisher_GetVRDeviceInfo_Response {
        static instance: CDataPublisher_GetVRDeviceInfo_Response = CDataPublisher_GetVRDeviceInfo_Response {
            device: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CDataPublisher_GetVRDeviceInfo_Response`
pub mod cdata_publisher_get_vrdevice_info_response {
    // @@protoc_insertion_point(message:CDataPublisher_GetVRDeviceInfo_Response.Device)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Device {
        // message fields
        // @@protoc_insertion_point(field:CDataPublisher_GetVRDeviceInfo_Response.Device.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CDataPublisher_GetVRDeviceInfo_Response.Device.ref)
        pub ref_: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CDataPublisher_GetVRDeviceInfo_Response.Device.aggregation_ref)
        pub aggregation_ref: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CDataPublisher_GetVRDeviceInfo_Response.Device.total)
        pub total: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CDataPublisher_GetVRDeviceInfo_Response.Device.driver)
        pub driver: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CDataPublisher_GetVRDeviceInfo_Response.Device.device_class)
        pub device_class: ::std::option::Option<i32>,
        // special fields
        // @@protoc_insertion_point(special_field:CDataPublisher_GetVRDeviceInfo_Response.Device.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Device {
        fn default() -> &'a Device {
            <Device as ::protobuf::Message>::default_instance()
        }
    }

    impl Device {
        pub fn new() -> Device {
            ::std::default::Default::default()
        }

        // optional string name = 1;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint32 ref = 2;

        pub fn ref_(&self) -> u32 {
            self.ref_.unwrap_or(0)
        }

        pub fn clear_ref_(&mut self) {
            self.ref_ = ::std::option::Option::None;
        }

        pub fn has_ref(&self) -> bool {
            self.ref_.is_some()
        }

        // Param is passed by value, moved
        pub fn set_ref(&mut self, v: u32) {
            self.ref_ = ::std::option::Option::Some(v);
        }

        // optional uint32 aggregation_ref = 3;

        pub fn aggregation_ref(&self) -> u32 {
            self.aggregation_ref.unwrap_or(0)
        }

        pub fn clear_aggregation_ref(&mut self) {
            self.aggregation_ref = ::std::option::Option::None;
        }

        pub fn has_aggregation_ref(&self) -> bool {
            self.aggregation_ref.is_some()
        }

        // Param is passed by value, moved
        pub fn set_aggregation_ref(&mut self, v: u32) {
            self.aggregation_ref = ::std::option::Option::Some(v);
        }

        // optional uint32 total = 4;

        pub fn total(&self) -> u32 {
            self.total.unwrap_or(0)
        }

        pub fn clear_total(&mut self) {
            self.total = ::std::option::Option::None;
        }

        pub fn has_total(&self) -> bool {
            self.total.is_some()
        }

        // Param is passed by value, moved
        pub fn set_total(&mut self, v: u32) {
            self.total = ::std::option::Option::Some(v);
        }

        // optional string driver = 5;

        pub fn driver(&self) -> &str {
            match self.driver.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_driver(&mut self) {
            self.driver = ::std::option::Option::None;
        }

        pub fn has_driver(&self) -> bool {
            self.driver.is_some()
        }

        // Param is passed by value, moved
        pub fn set_driver(&mut self, v: ::std::string::String) {
            self.driver = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_driver(&mut self) -> &mut ::std::string::String {
            if self.driver.is_none() {
                self.driver = ::std::option::Option::Some(::std::string::String::new());
            }
            self.driver.as_mut().unwrap()
        }

        // Take field
        pub fn take_driver(&mut self) -> ::std::string::String {
            self.driver.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional int32 device_class = 6;

        pub fn device_class(&self) -> i32 {
            self.device_class.unwrap_or(0)
        }

        pub fn clear_device_class(&mut self) {
            self.device_class = ::std::option::Option::None;
        }

        pub fn has_device_class(&self) -> bool {
            self.device_class.is_some()
        }

        // Param is passed by value, moved
        pub fn set_device_class(&mut self, v: i32) {
            self.device_class = ::std::option::Option::Some(v);
        }
    }

    impl ::protobuf::Message for Device {
        const NAME: &'static str = "Device";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    16 => {
                        self.ref_ = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.aggregation_ref = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.total = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    42 => {
                        self.driver = ::std::option::Option::Some(is.read_string()?);
                    },
                    48 => {
                        self.device_class = ::std::option::Option::Some(is.read_int32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.name.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.ref_ {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.aggregation_ref {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.total {
                my_size += ::protobuf::rt::uint32_size(4, v);
            }
            if let Some(v) = self.driver.as_ref() {
                my_size += ::protobuf::rt::string_size(5, &v);
            }
            if let Some(v) = self.device_class {
                my_size += ::protobuf::rt::int32_size(6, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.name.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.ref_ {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.aggregation_ref {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.total {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.driver.as_ref() {
                os.write_string(5, v)?;
            }
            if let Some(v) = self.device_class {
                os.write_int32(6, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Device {
            Device::new()
        }

        fn clear(&mut self) {
            self.name = ::std::option::Option::None;
            self.ref_ = ::std::option::Option::None;
            self.aggregation_ref = ::std::option::Option::None;
            self.total = ::std::option::Option::None;
            self.driver = ::std::option::Option::None;
            self.device_class = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Device {
            static instance: Device = Device {
                name: ::std::option::Option::None,
                ref_: ::std::option::Option::None,
                aggregation_ref: ::std::option::Option::None,
                total: ::std::option::Option::None,
                driver: ::std::option::Option::None,
                device_class: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

#[doc = "Set the rollup reference of a single VR device"]
// @@protoc_insertion_point(message:CDataPublisher_SetVRDeviceInfoAggregationReference_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDataPublisher_SetVRDeviceInfoAggregationReference_Request {
    // message fields
    // @@protoc_insertion_point(field:CDataPublisher_SetVRDeviceInfoAggregationReference_Request.ref)
    pub ref_: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CDataPublisher_SetVRDeviceInfoAggregationReference_Request.aggregation_ref)
    pub aggregation_ref: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CDataPublisher_SetVRDeviceInfoAggregationReference_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDataPublisher_SetVRDeviceInfoAggregationReference_Request {
    fn default() -> &'a CDataPublisher_SetVRDeviceInfoAggregationReference_Request {
        <CDataPublisher_SetVRDeviceInfoAggregationReference_Request as ::protobuf::Message>::default_instance()
    }
}

impl CDataPublisher_SetVRDeviceInfoAggregationReference_Request {
    pub fn new() -> CDataPublisher_SetVRDeviceInfoAggregationReference_Request {
        ::std::default::Default::default()
    }

    // optional uint32 ref = 1;

    pub fn ref_(&self) -> u32 {
        self.ref_.unwrap_or(0)
    }

    pub fn clear_ref_(&mut self) {
        self.ref_ = ::std::option::Option::None;
    }

    pub fn has_ref(&self) -> bool {
        self.ref_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ref(&mut self, v: u32) {
        self.ref_ = ::std::option::Option::Some(v);
    }

    // optional uint32 aggregation_ref = 2;

    pub fn aggregation_ref(&self) -> u32 {
        self.aggregation_ref.unwrap_or(0)
    }

    pub fn clear_aggregation_ref(&mut self) {
        self.aggregation_ref = ::std::option::Option::None;
    }

    pub fn has_aggregation_ref(&self) -> bool {
        self.aggregation_ref.is_some()
    }

    // Param is passed by value, moved
    pub fn set_aggregation_ref(&mut self, v: u32) {
        self.aggregation_ref = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CDataPublisher_SetVRDeviceInfoAggregationReference_Request {
    const NAME: &'static str = "CDataPublisher_SetVRDeviceInfoAggregationReference_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ref_ = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.aggregation_ref = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ref_ {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.aggregation_ref {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.ref_ {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.aggregation_ref {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDataPublisher_SetVRDeviceInfoAggregationReference_Request {
        CDataPublisher_SetVRDeviceInfoAggregationReference_Request::new()
    }

    fn clear(&mut self) {
        self.ref_ = ::std::option::Option::None;
        self.aggregation_ref = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDataPublisher_SetVRDeviceInfoAggregationReference_Request {
        static instance: CDataPublisher_SetVRDeviceInfoAggregationReference_Request = CDataPublisher_SetVRDeviceInfoAggregationReference_Request {
            ref_: ::std::option::Option::None,
            aggregation_ref: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CDataPublisher_SetVRDeviceInfoAggregationReference_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDataPublisher_SetVRDeviceInfoAggregationReference_Response {
    // message fields
    // @@protoc_insertion_point(field:CDataPublisher_SetVRDeviceInfoAggregationReference_Response.result)
    pub result: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CDataPublisher_SetVRDeviceInfoAggregationReference_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDataPublisher_SetVRDeviceInfoAggregationReference_Response {
    fn default() -> &'a CDataPublisher_SetVRDeviceInfoAggregationReference_Response {
        <CDataPublisher_SetVRDeviceInfoAggregationReference_Response as ::protobuf::Message>::default_instance()
    }
}

impl CDataPublisher_SetVRDeviceInfoAggregationReference_Response {
    pub fn new() -> CDataPublisher_SetVRDeviceInfoAggregationReference_Response {
        ::std::default::Default::default()
    }

    // optional uint32 result = 1;

    pub fn result(&self) -> u32 {
        self.result.unwrap_or(0)
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: u32) {
        self.result = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CDataPublisher_SetVRDeviceInfoAggregationReference_Response {
    const NAME: &'static str = "CDataPublisher_SetVRDeviceInfoAggregationReference_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDataPublisher_SetVRDeviceInfoAggregationReference_Response {
        CDataPublisher_SetVRDeviceInfoAggregationReference_Response::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDataPublisher_SetVRDeviceInfoAggregationReference_Response {
        static instance: CDataPublisher_SetVRDeviceInfoAggregationReference_Response = CDataPublisher_SetVRDeviceInfoAggregationReference_Response {
            result: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Adds a device to the VRDeviceInfo table for the hardware survey"]
// @@protoc_insertion_point(message:CDataPublisher_AddVRDeviceInfo_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDataPublisher_AddVRDeviceInfo_Request {
    // message fields
    // @@protoc_insertion_point(field:CDataPublisher_AddVRDeviceInfo_Request.manufacturer)
    pub manufacturer: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CDataPublisher_AddVRDeviceInfo_Request.model)
    pub model: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CDataPublisher_AddVRDeviceInfo_Request.driver)
    pub driver: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CDataPublisher_AddVRDeviceInfo_Request.controller_type)
    pub controller_type: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CDataPublisher_AddVRDeviceInfo_Request.device_class)
    pub device_class: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CDataPublisher_AddVRDeviceInfo_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDataPublisher_AddVRDeviceInfo_Request {
    fn default() -> &'a CDataPublisher_AddVRDeviceInfo_Request {
        <CDataPublisher_AddVRDeviceInfo_Request as ::protobuf::Message>::default_instance()
    }
}

impl CDataPublisher_AddVRDeviceInfo_Request {
    pub fn new() -> CDataPublisher_AddVRDeviceInfo_Request {
        ::std::default::Default::default()
    }

    // optional string manufacturer = 1;

    pub fn manufacturer(&self) -> &str {
        match self.manufacturer.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_manufacturer(&mut self) {
        self.manufacturer = ::std::option::Option::None;
    }

    pub fn has_manufacturer(&self) -> bool {
        self.manufacturer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_manufacturer(&mut self, v: ::std::string::String) {
        self.manufacturer = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_manufacturer(&mut self) -> &mut ::std::string::String {
        if self.manufacturer.is_none() {
            self.manufacturer = ::std::option::Option::Some(::std::string::String::new());
        }
        self.manufacturer.as_mut().unwrap()
    }

    // Take field
    pub fn take_manufacturer(&mut self) -> ::std::string::String {
        self.manufacturer.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string model = 2;

    pub fn model(&self) -> &str {
        match self.model.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_model(&mut self) {
        self.model = ::std::option::Option::None;
    }

    pub fn has_model(&self) -> bool {
        self.model.is_some()
    }

    // Param is passed by value, moved
    pub fn set_model(&mut self, v: ::std::string::String) {
        self.model = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_model(&mut self) -> &mut ::std::string::String {
        if self.model.is_none() {
            self.model = ::std::option::Option::Some(::std::string::String::new());
        }
        self.model.as_mut().unwrap()
    }

    // Take field
    pub fn take_model(&mut self) -> ::std::string::String {
        self.model.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string driver = 3;

    pub fn driver(&self) -> &str {
        match self.driver.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_driver(&mut self) {
        self.driver = ::std::option::Option::None;
    }

    pub fn has_driver(&self) -> bool {
        self.driver.is_some()
    }

    // Param is passed by value, moved
    pub fn set_driver(&mut self, v: ::std::string::String) {
        self.driver = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_driver(&mut self) -> &mut ::std::string::String {
        if self.driver.is_none() {
            self.driver = ::std::option::Option::Some(::std::string::String::new());
        }
        self.driver.as_mut().unwrap()
    }

    // Take field
    pub fn take_driver(&mut self) -> ::std::string::String {
        self.driver.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string controller_type = 4;

    pub fn controller_type(&self) -> &str {
        match self.controller_type.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_controller_type(&mut self) {
        self.controller_type = ::std::option::Option::None;
    }

    pub fn has_controller_type(&self) -> bool {
        self.controller_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controller_type(&mut self, v: ::std::string::String) {
        self.controller_type = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controller_type(&mut self) -> &mut ::std::string::String {
        if self.controller_type.is_none() {
            self.controller_type = ::std::option::Option::Some(::std::string::String::new());
        }
        self.controller_type.as_mut().unwrap()
    }

    // Take field
    pub fn take_controller_type(&mut self) -> ::std::string::String {
        self.controller_type.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 device_class = 5;

    pub fn device_class(&self) -> i32 {
        self.device_class.unwrap_or(0)
    }

    pub fn clear_device_class(&mut self) {
        self.device_class = ::std::option::Option::None;
    }

    pub fn has_device_class(&self) -> bool {
        self.device_class.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_class(&mut self, v: i32) {
        self.device_class = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CDataPublisher_AddVRDeviceInfo_Request {
    const NAME: &'static str = "CDataPublisher_AddVRDeviceInfo_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.manufacturer = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.model = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.driver = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.controller_type = ::std::option::Option::Some(is.read_string()?);
                },
                40 => {
                    self.device_class = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.manufacturer.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.model.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.driver.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.controller_type.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.device_class {
            my_size += ::protobuf::rt::int32_size(5, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.manufacturer.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.model.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.driver.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.controller_type.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.device_class {
            os.write_int32(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDataPublisher_AddVRDeviceInfo_Request {
        CDataPublisher_AddVRDeviceInfo_Request::new()
    }

    fn clear(&mut self) {
        self.manufacturer = ::std::option::Option::None;
        self.model = ::std::option::Option::None;
        self.driver = ::std::option::Option::None;
        self.controller_type = ::std::option::Option::None;
        self.device_class = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDataPublisher_AddVRDeviceInfo_Request {
        static instance: CDataPublisher_AddVRDeviceInfo_Request = CDataPublisher_AddVRDeviceInfo_Request {
            manufacturer: ::std::option::Option::None,
            model: ::std::option::Option::None,
            driver: ::std::option::Option::None,
            controller_type: ::std::option::Option::None,
            device_class: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CDataPublisher_AddVRDeviceInfo_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CDataPublisher_AddVRDeviceInfo_Response {
    // message fields
    // @@protoc_insertion_point(field:CDataPublisher_AddVRDeviceInfo_Response.result)
    pub result: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CDataPublisher_AddVRDeviceInfo_Response.ref)
    pub ref_: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CDataPublisher_AddVRDeviceInfo_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CDataPublisher_AddVRDeviceInfo_Response {
    fn default() -> &'a CDataPublisher_AddVRDeviceInfo_Response {
        <CDataPublisher_AddVRDeviceInfo_Response as ::protobuf::Message>::default_instance()
    }
}

impl CDataPublisher_AddVRDeviceInfo_Response {
    pub fn new() -> CDataPublisher_AddVRDeviceInfo_Response {
        ::std::default::Default::default()
    }

    // optional uint32 result = 1;

    pub fn result(&self) -> u32 {
        self.result.unwrap_or(0)
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: u32) {
        self.result = ::std::option::Option::Some(v);
    }

    // optional uint32 ref = 2;

    pub fn ref_(&self) -> u32 {
        self.ref_.unwrap_or(0)
    }

    pub fn clear_ref_(&mut self) {
        self.ref_ = ::std::option::Option::None;
    }

    pub fn has_ref(&self) -> bool {
        self.ref_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ref(&mut self, v: u32) {
        self.ref_ = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CDataPublisher_AddVRDeviceInfo_Response {
    const NAME: &'static str = "CDataPublisher_AddVRDeviceInfo_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.ref_ = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.ref_ {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.ref_ {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CDataPublisher_AddVRDeviceInfo_Response {
        CDataPublisher_AddVRDeviceInfo_Response::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.ref_ = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CDataPublisher_AddVRDeviceInfo_Response {
        static instance: CDataPublisher_AddVRDeviceInfo_Response = CDataPublisher_AddVRDeviceInfo_Response {
            result: ::std::option::Option::None,
            ref_: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Should I run the survey"]
// @@protoc_insertion_point(message:CValveHWSurvey_GetSurveySchedule_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CValveHWSurvey_GetSurveySchedule_Request {
    // message fields
    // @@protoc_insertion_point(field:CValveHWSurvey_GetSurveySchedule_Request.surveydatetoken)
    pub surveydatetoken: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CValveHWSurvey_GetSurveySchedule_Request.surveydatetokenversion)
    pub surveydatetokenversion: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CValveHWSurvey_GetSurveySchedule_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CValveHWSurvey_GetSurveySchedule_Request {
    fn default() -> &'a CValveHWSurvey_GetSurveySchedule_Request {
        <CValveHWSurvey_GetSurveySchedule_Request as ::protobuf::Message>::default_instance()
    }
}

impl CValveHWSurvey_GetSurveySchedule_Request {
    pub fn new() -> CValveHWSurvey_GetSurveySchedule_Request {
        ::std::default::Default::default()
    }

    // optional string surveydatetoken = 1;

    pub fn surveydatetoken(&self) -> &str {
        match self.surveydatetoken.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_surveydatetoken(&mut self) {
        self.surveydatetoken = ::std::option::Option::None;
    }

    pub fn has_surveydatetoken(&self) -> bool {
        self.surveydatetoken.is_some()
    }

    // Param is passed by value, moved
    pub fn set_surveydatetoken(&mut self, v: ::std::string::String) {
        self.surveydatetoken = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_surveydatetoken(&mut self) -> &mut ::std::string::String {
        if self.surveydatetoken.is_none() {
            self.surveydatetoken = ::std::option::Option::Some(::std::string::String::new());
        }
        self.surveydatetoken.as_mut().unwrap()
    }

    // Take field
    pub fn take_surveydatetoken(&mut self) -> ::std::string::String {
        self.surveydatetoken.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed64 surveydatetokenversion = 2;

    pub fn surveydatetokenversion(&self) -> u64 {
        self.surveydatetokenversion.unwrap_or(0)
    }

    pub fn clear_surveydatetokenversion(&mut self) {
        self.surveydatetokenversion = ::std::option::Option::None;
    }

    pub fn has_surveydatetokenversion(&self) -> bool {
        self.surveydatetokenversion.is_some()
    }

    // Param is passed by value, moved
    pub fn set_surveydatetokenversion(&mut self, v: u64) {
        self.surveydatetokenversion = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CValveHWSurvey_GetSurveySchedule_Request {
    const NAME: &'static str = "CValveHWSurvey_GetSurveySchedule_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.surveydatetoken = ::std::option::Option::Some(is.read_string()?);
                },
                17 => {
                    self.surveydatetokenversion = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.surveydatetoken.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.surveydatetokenversion {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.surveydatetoken.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.surveydatetokenversion {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CValveHWSurvey_GetSurveySchedule_Request {
        CValveHWSurvey_GetSurveySchedule_Request::new()
    }

    fn clear(&mut self) {
        self.surveydatetoken = ::std::option::Option::None;
        self.surveydatetokenversion = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CValveHWSurvey_GetSurveySchedule_Request {
        static instance: CValveHWSurvey_GetSurveySchedule_Request = CValveHWSurvey_GetSurveySchedule_Request {
            surveydatetoken: ::std::option::Option::None,
            surveydatetokenversion: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CValveHWSurvey_GetSurveySchedule_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CValveHWSurvey_GetSurveySchedule_Response {
    // message fields
    // @@protoc_insertion_point(field:CValveHWSurvey_GetSurveySchedule_Response.surveydatetoken)
    pub surveydatetoken: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CValveHWSurvey_GetSurveySchedule_Response.surveydatetokenversion)
    pub surveydatetokenversion: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CValveHWSurvey_GetSurveySchedule_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CValveHWSurvey_GetSurveySchedule_Response {
    fn default() -> &'a CValveHWSurvey_GetSurveySchedule_Response {
        <CValveHWSurvey_GetSurveySchedule_Response as ::protobuf::Message>::default_instance()
    }
}

impl CValveHWSurvey_GetSurveySchedule_Response {
    pub fn new() -> CValveHWSurvey_GetSurveySchedule_Response {
        ::std::default::Default::default()
    }

    // optional uint32 surveydatetoken = 1;

    pub fn surveydatetoken(&self) -> u32 {
        self.surveydatetoken.unwrap_or(0)
    }

    pub fn clear_surveydatetoken(&mut self) {
        self.surveydatetoken = ::std::option::Option::None;
    }

    pub fn has_surveydatetoken(&self) -> bool {
        self.surveydatetoken.is_some()
    }

    // Param is passed by value, moved
    pub fn set_surveydatetoken(&mut self, v: u32) {
        self.surveydatetoken = ::std::option::Option::Some(v);
    }

    // optional fixed64 surveydatetokenversion = 2;

    pub fn surveydatetokenversion(&self) -> u64 {
        self.surveydatetokenversion.unwrap_or(0)
    }

    pub fn clear_surveydatetokenversion(&mut self) {
        self.surveydatetokenversion = ::std::option::Option::None;
    }

    pub fn has_surveydatetokenversion(&self) -> bool {
        self.surveydatetokenversion.is_some()
    }

    // Param is passed by value, moved
    pub fn set_surveydatetokenversion(&mut self, v: u64) {
        self.surveydatetokenversion = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CValveHWSurvey_GetSurveySchedule_Response {
    const NAME: &'static str = "CValveHWSurvey_GetSurveySchedule_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.surveydatetoken = ::std::option::Option::Some(is.read_uint32()?);
                },
                17 => {
                    self.surveydatetokenversion = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.surveydatetoken {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.surveydatetokenversion {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.surveydatetoken {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.surveydatetokenversion {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CValveHWSurvey_GetSurveySchedule_Response {
        CValveHWSurvey_GetSurveySchedule_Response::new()
    }

    fn clear(&mut self) {
        self.surveydatetoken = ::std::option::Option::None;
        self.surveydatetokenversion = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CValveHWSurvey_GetSurveySchedule_Response {
        static instance: CValveHWSurvey_GetSurveySchedule_Response = CValveHWSurvey_GetSurveySchedule_Response {
            surveydatetoken: ::std::option::Option::None,
            surveydatetokenversion: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}
#[allow(unused_imports)]
use crate::steammessages_base::*;
#[allow(unused_imports)]
use crate::steammessages_unified_base_steamclient::*;
impl crate::RpcMessage for CDataPublisher_ClientContentCorruptionReport_Notification {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CDataPublisher_ClientUpdateAppJob_Notification {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CDataPublisher_GetVRDeviceInfo_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CDataPublisher_GetVRDeviceInfo_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CDataPublisher_SetVRDeviceInfoAggregationReference_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CDataPublisher_SetVRDeviceInfoAggregationReference_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CDataPublisher_AddVRDeviceInfo_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CDataPublisher_AddVRDeviceInfo_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CValveHWSurvey_GetSurveySchedule_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CValveHWSurvey_GetSurveySchedule_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
///Data Publisher (DP) server services
struct DataPublisher {}
impl crate::RpcService for DataPublisher {
    const SERVICE_NAME: &'static str = "DataPublisher";
}
///ValveHWSurvey
struct ValveHWSurvey {}
impl crate::RpcService for ValveHWSurvey {
    const SERVICE_NAME: &'static str = "ValveHWSurvey";
}
impl crate::RpcMethod for CDataPublisher_AddVRDeviceInfo_Request {
    const METHOD_NAME: &'static str = "DataPublisher.AddVRDeviceInfo#1";
    type Response = CDataPublisher_AddVRDeviceInfo_Response;
}
impl crate::RpcMethod for CDataPublisher_ClientContentCorruptionReport_Notification {
    const METHOD_NAME: &'static str = "DataPublisher.ClientContentCorruptionReport#1";
    type Response = ();
}
impl crate::RpcMethod for CDataPublisher_ClientUpdateAppJob_Notification {
    const METHOD_NAME: &'static str = "DataPublisher.ClientUpdateAppJobReport#1";
    type Response = ();
}
impl crate::RpcMethod for CDataPublisher_GetVRDeviceInfo_Request {
    const METHOD_NAME: &'static str = "DataPublisher.GetVRDeviceInfo#1";
    type Response = CDataPublisher_GetVRDeviceInfo_Response;
}
impl crate::RpcMethod for CDataPublisher_SetVRDeviceInfoAggregationReference_Request {
    const METHOD_NAME: &'static str = "DataPublisher.SetVRDeviceInfoAggregationReference#1";
    type Response = CDataPublisher_SetVRDeviceInfoAggregationReference_Response;
}
impl crate::RpcMethod for CValveHWSurvey_GetSurveySchedule_Request {
    const METHOD_NAME: &'static str = "ValveHWSurvey.GetSurveySchedule#1";
    type Response = CValveHWSurvey_GetSurveySchedule_Response;
}
