// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `webuimessages_services.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:CTransportValidation_AppendToString_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_AppendToString_Request {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidation_AppendToString_Request.append_strings)
    pub append_strings: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_AppendToString_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_AppendToString_Request {
    fn default() -> &'a CTransportValidation_AppendToString_Request {
        <CTransportValidation_AppendToString_Request as ::protobuf::Message>::default_instance()
    }
}

impl CTransportValidation_AppendToString_Request {
    pub fn new() -> CTransportValidation_AppendToString_Request {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CTransportValidation_AppendToString_Request {
    const NAME: &'static str = "CTransportValidation_AppendToString_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.append_strings.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.append_strings {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.append_strings {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_AppendToString_Request {
        CTransportValidation_AppendToString_Request::new()
    }

    fn clear(&mut self) {
        self.append_strings.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_AppendToString_Request {
        static instance: CTransportValidation_AppendToString_Request = CTransportValidation_AppendToString_Request {
            append_strings: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CTransportValidation_AppendToString_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_AppendToString_Response {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidation_AppendToString_Response.combined_text)
    pub combined_text: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_AppendToString_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_AppendToString_Response {
    fn default() -> &'a CTransportValidation_AppendToString_Response {
        <CTransportValidation_AppendToString_Response as ::protobuf::Message>::default_instance()
    }
}

impl CTransportValidation_AppendToString_Response {
    pub fn new() -> CTransportValidation_AppendToString_Response {
        ::std::default::Default::default()
    }

    // optional string combined_text = 1;

    pub fn combined_text(&self) -> &str {
        match self.combined_text.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_combined_text(&mut self) {
        self.combined_text = ::std::option::Option::None;
    }

    pub fn has_combined_text(&self) -> bool {
        self.combined_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_combined_text(&mut self, v: ::std::string::String) {
        self.combined_text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_combined_text(&mut self) -> &mut ::std::string::String {
        if self.combined_text.is_none() {
            self.combined_text = ::std::option::Option::Some(::std::string::String::new());
        }
        self.combined_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_combined_text(&mut self) -> ::std::string::String {
        self.combined_text.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CTransportValidation_AppendToString_Response {
    const NAME: &'static str = "CTransportValidation_AppendToString_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.combined_text = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.combined_text.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.combined_text.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_AppendToString_Response {
        CTransportValidation_AppendToString_Response::new()
    }

    fn clear(&mut self) {
        self.combined_text = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_AppendToString_Response {
        static instance: CTransportValidation_AppendToString_Response = CTransportValidation_AppendToString_Response {
            combined_text: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CTransportValidation_NotifyText_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_NotifyText_Notification {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidation_NotifyText_Notification.text)
    pub text: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_NotifyText_Notification.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_NotifyText_Notification {
    fn default() -> &'a CTransportValidation_NotifyText_Notification {
        <CTransportValidation_NotifyText_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CTransportValidation_NotifyText_Notification {
    pub fn new() -> CTransportValidation_NotifyText_Notification {
        ::std::default::Default::default()
    }

    // optional string text = 1;

    pub fn text(&self) -> &str {
        match self.text.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_text(&mut self) {
        self.text = ::std::option::Option::None;
    }

    pub fn has_text(&self) -> bool {
        self.text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        if self.text.is_none() {
            self.text = ::std::option::Option::Some(::std::string::String::new());
        }
        self.text.as_mut().unwrap()
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        self.text.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CTransportValidation_NotifyText_Notification {
    const NAME: &'static str = "CTransportValidation_NotifyText_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.text = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.text.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.text.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_NotifyText_Notification {
        CTransportValidation_NotifyText_Notification::new()
    }

    fn clear(&mut self) {
        self.text = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_NotifyText_Notification {
        static instance: CTransportValidation_NotifyText_Notification = CTransportValidation_NotifyText_Notification {
            text: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CTransportValidation_NotifyNumber_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_NotifyNumber_Notification {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidation_NotifyNumber_Notification.number)
    pub number: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_NotifyNumber_Notification.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_NotifyNumber_Notification {
    fn default() -> &'a CTransportValidation_NotifyNumber_Notification {
        <CTransportValidation_NotifyNumber_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CTransportValidation_NotifyNumber_Notification {
    pub fn new() -> CTransportValidation_NotifyNumber_Notification {
        ::std::default::Default::default()
    }

    // optional int32 number = 1;

    pub fn number(&self) -> i32 {
        self.number.unwrap_or(0)
    }

    pub fn clear_number(&mut self) {
        self.number = ::std::option::Option::None;
    }

    pub fn has_number(&self) -> bool {
        self.number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_number(&mut self, v: i32) {
        self.number = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CTransportValidation_NotifyNumber_Notification {
    const NAME: &'static str = "CTransportValidation_NotifyNumber_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.number = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.number {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.number {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_NotifyNumber_Notification {
        CTransportValidation_NotifyNumber_Notification::new()
    }

    fn clear(&mut self) {
        self.number = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_NotifyNumber_Notification {
        static instance: CTransportValidation_NotifyNumber_Notification = CTransportValidation_NotifyNumber_Notification {
            number: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CTransportValidation_GetLastNotifyNumber_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_GetLastNotifyNumber_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_GetLastNotifyNumber_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_GetLastNotifyNumber_Request {
    fn default() -> &'a CTransportValidation_GetLastNotifyNumber_Request {
        <CTransportValidation_GetLastNotifyNumber_Request as ::protobuf::Message>::default_instance()
    }
}

impl CTransportValidation_GetLastNotifyNumber_Request {
    pub fn new() -> CTransportValidation_GetLastNotifyNumber_Request {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CTransportValidation_GetLastNotifyNumber_Request {
    const NAME: &'static str = "CTransportValidation_GetLastNotifyNumber_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_GetLastNotifyNumber_Request {
        CTransportValidation_GetLastNotifyNumber_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_GetLastNotifyNumber_Request {
        static instance: CTransportValidation_GetLastNotifyNumber_Request = CTransportValidation_GetLastNotifyNumber_Request {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CTransportValidation_GetLastNotifyNumber_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_GetLastNotifyNumber_Response {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidation_GetLastNotifyNumber_Response.last_notify_number)
    pub last_notify_number: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_GetLastNotifyNumber_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_GetLastNotifyNumber_Response {
    fn default() -> &'a CTransportValidation_GetLastNotifyNumber_Response {
        <CTransportValidation_GetLastNotifyNumber_Response as ::protobuf::Message>::default_instance()
    }
}

impl CTransportValidation_GetLastNotifyNumber_Response {
    pub fn new() -> CTransportValidation_GetLastNotifyNumber_Response {
        ::std::default::Default::default()
    }

    // optional int32 last_notify_number = 1;

    pub fn last_notify_number(&self) -> i32 {
        self.last_notify_number.unwrap_or(0)
    }

    pub fn clear_last_notify_number(&mut self) {
        self.last_notify_number = ::std::option::Option::None;
    }

    pub fn has_last_notify_number(&self) -> bool {
        self.last_notify_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_notify_number(&mut self, v: i32) {
        self.last_notify_number = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CTransportValidation_GetLastNotifyNumber_Response {
    const NAME: &'static str = "CTransportValidation_GetLastNotifyNumber_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.last_notify_number = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.last_notify_number {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.last_notify_number {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_GetLastNotifyNumber_Response {
        CTransportValidation_GetLastNotifyNumber_Response::new()
    }

    fn clear(&mut self) {
        self.last_notify_number = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_GetLastNotifyNumber_Response {
        static instance: CTransportValidation_GetLastNotifyNumber_Response = CTransportValidation_GetLastNotifyNumber_Response {
            last_notify_number: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CTransportValidation_TriggerSyntheticEvents_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_TriggerSyntheticEvents_Request {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidation_TriggerSyntheticEvents_Request.count)
    pub count: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_TriggerSyntheticEvents_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_TriggerSyntheticEvents_Request {
    fn default() -> &'a CTransportValidation_TriggerSyntheticEvents_Request {
        <CTransportValidation_TriggerSyntheticEvents_Request as ::protobuf::Message>::default_instance()
    }
}

impl CTransportValidation_TriggerSyntheticEvents_Request {
    pub fn new() -> CTransportValidation_TriggerSyntheticEvents_Request {
        ::std::default::Default::default()
    }

    // optional int32 count = 1;

    pub fn count(&self) -> i32 {
        self.count.unwrap_or(0)
    }

    pub fn clear_count(&mut self) {
        self.count = ::std::option::Option::None;
    }

    pub fn has_count(&self) -> bool {
        self.count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: i32) {
        self.count = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CTransportValidation_TriggerSyntheticEvents_Request {
    const NAME: &'static str = "CTransportValidation_TriggerSyntheticEvents_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.count = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.count {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.count {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_TriggerSyntheticEvents_Request {
        CTransportValidation_TriggerSyntheticEvents_Request::new()
    }

    fn clear(&mut self) {
        self.count = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_TriggerSyntheticEvents_Request {
        static instance: CTransportValidation_TriggerSyntheticEvents_Request = CTransportValidation_TriggerSyntheticEvents_Request {
            count: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CTransportValidation_TriggerSyntheticEvents_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_TriggerSyntheticEvents_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_TriggerSyntheticEvents_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_TriggerSyntheticEvents_Response {
    fn default() -> &'a CTransportValidation_TriggerSyntheticEvents_Response {
        <CTransportValidation_TriggerSyntheticEvents_Response as ::protobuf::Message>::default_instance()
    }
}

impl CTransportValidation_TriggerSyntheticEvents_Response {
    pub fn new() -> CTransportValidation_TriggerSyntheticEvents_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CTransportValidation_TriggerSyntheticEvents_Response {
    const NAME: &'static str = "CTransportValidation_TriggerSyntheticEvents_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_TriggerSyntheticEvents_Response {
        CTransportValidation_TriggerSyntheticEvents_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_TriggerSyntheticEvents_Response {
        static instance: CTransportValidation_TriggerSyntheticEvents_Response = CTransportValidation_TriggerSyntheticEvents_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CTransportValidation_NotifySyntheticEvent_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_NotifySyntheticEvent_Notification {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidation_NotifySyntheticEvent_Notification.sequence)
    pub sequence: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_NotifySyntheticEvent_Notification.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_NotifySyntheticEvent_Notification {
    fn default() -> &'a CTransportValidation_NotifySyntheticEvent_Notification {
        <CTransportValidation_NotifySyntheticEvent_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CTransportValidation_NotifySyntheticEvent_Notification {
    pub fn new() -> CTransportValidation_NotifySyntheticEvent_Notification {
        ::std::default::Default::default()
    }

    // optional int32 sequence = 1;

    pub fn sequence(&self) -> i32 {
        self.sequence.unwrap_or(0)
    }

    pub fn clear_sequence(&mut self) {
        self.sequence = ::std::option::Option::None;
    }

    pub fn has_sequence(&self) -> bool {
        self.sequence.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sequence(&mut self, v: i32) {
        self.sequence = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CTransportValidation_NotifySyntheticEvent_Notification {
    const NAME: &'static str = "CTransportValidation_NotifySyntheticEvent_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.sequence = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.sequence {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.sequence {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_NotifySyntheticEvent_Notification {
        CTransportValidation_NotifySyntheticEvent_Notification::new()
    }

    fn clear(&mut self) {
        self.sequence = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_NotifySyntheticEvent_Notification {
        static instance: CTransportValidation_NotifySyntheticEvent_Notification = CTransportValidation_NotifySyntheticEvent_Notification {
            sequence: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CTransportValidation_TriggerDataRequest_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_TriggerDataRequest_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_TriggerDataRequest_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_TriggerDataRequest_Request {
    fn default() -> &'a CTransportValidation_TriggerDataRequest_Request {
        <CTransportValidation_TriggerDataRequest_Request as ::protobuf::Message>::default_instance()
    }
}

impl CTransportValidation_TriggerDataRequest_Request {
    pub fn new() -> CTransportValidation_TriggerDataRequest_Request {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CTransportValidation_TriggerDataRequest_Request {
    const NAME: &'static str = "CTransportValidation_TriggerDataRequest_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_TriggerDataRequest_Request {
        CTransportValidation_TriggerDataRequest_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_TriggerDataRequest_Request {
        static instance: CTransportValidation_TriggerDataRequest_Request = CTransportValidation_TriggerDataRequest_Request {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CTransportValidation_TriggerDataRequest_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_TriggerDataRequest_Response {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidation_TriggerDataRequest_Response.data)
    pub data: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_TriggerDataRequest_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_TriggerDataRequest_Response {
    fn default() -> &'a CTransportValidation_TriggerDataRequest_Response {
        <CTransportValidation_TriggerDataRequest_Response as ::protobuf::Message>::default_instance()
    }
}

impl CTransportValidation_TriggerDataRequest_Response {
    pub fn new() -> CTransportValidation_TriggerDataRequest_Response {
        ::std::default::Default::default()
    }

    // optional int32 data = 1;

    pub fn data(&self) -> i32 {
        self.data.unwrap_or(0)
    }

    pub fn clear_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: i32) {
        self.data = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CTransportValidation_TriggerDataRequest_Response {
    const NAME: &'static str = "CTransportValidation_TriggerDataRequest_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.data = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.data {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.data {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_TriggerDataRequest_Response {
        CTransportValidation_TriggerDataRequest_Response::new()
    }

    fn clear(&mut self) {
        self.data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_TriggerDataRequest_Response {
        static instance: CTransportValidation_TriggerDataRequest_Response = CTransportValidation_TriggerDataRequest_Response {
            data: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CTransportValidation_DataRequest_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_DataRequest_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_DataRequest_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_DataRequest_Request {
    fn default() -> &'a CTransportValidation_DataRequest_Request {
        <CTransportValidation_DataRequest_Request as ::protobuf::Message>::default_instance()
    }
}

impl CTransportValidation_DataRequest_Request {
    pub fn new() -> CTransportValidation_DataRequest_Request {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CTransportValidation_DataRequest_Request {
    const NAME: &'static str = "CTransportValidation_DataRequest_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_DataRequest_Request {
        CTransportValidation_DataRequest_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_DataRequest_Request {
        static instance: CTransportValidation_DataRequest_Request = CTransportValidation_DataRequest_Request {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CTransportValidation_DataRequest_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_DataRequest_Response {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidation_DataRequest_Response.data)
    pub data: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_DataRequest_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_DataRequest_Response {
    fn default() -> &'a CTransportValidation_DataRequest_Response {
        <CTransportValidation_DataRequest_Response as ::protobuf::Message>::default_instance()
    }
}

impl CTransportValidation_DataRequest_Response {
    pub fn new() -> CTransportValidation_DataRequest_Response {
        ::std::default::Default::default()
    }

    // optional int32 data = 1;

    pub fn data(&self) -> i32 {
        self.data.unwrap_or(0)
    }

    pub fn clear_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: i32) {
        self.data = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CTransportValidation_DataRequest_Response {
    const NAME: &'static str = "CTransportValidation_DataRequest_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.data = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.data {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.data {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_DataRequest_Response {
        CTransportValidation_DataRequest_Response::new()
    }

    fn clear(&mut self) {
        self.data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_DataRequest_Response {
        static instance: CTransportValidation_DataRequest_Response = CTransportValidation_DataRequest_Response {
            data: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CTransportValidation_AddNumbers_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_AddNumbers_Request {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidation_AddNumbers_Request.numbers)
    pub numbers: ::std::vec::Vec<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_AddNumbers_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_AddNumbers_Request {
    fn default() -> &'a CTransportValidation_AddNumbers_Request {
        <CTransportValidation_AddNumbers_Request as ::protobuf::Message>::default_instance()
    }
}

impl CTransportValidation_AddNumbers_Request {
    pub fn new() -> CTransportValidation_AddNumbers_Request {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CTransportValidation_AddNumbers_Request {
    const NAME: &'static str = "CTransportValidation_AddNumbers_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_int32_into(&mut self.numbers)?;
                },
                8 => {
                    self.numbers.push(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.numbers {
            my_size += ::protobuf::rt::int32_size(1, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.numbers {
            os.write_int32(1, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_AddNumbers_Request {
        CTransportValidation_AddNumbers_Request::new()
    }

    fn clear(&mut self) {
        self.numbers.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_AddNumbers_Request {
        static instance: CTransportValidation_AddNumbers_Request = CTransportValidation_AddNumbers_Request {
            numbers: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CTransportValidation_AddNumbers_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_AddNumbers_Response {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidation_AddNumbers_Response.accumulated)
    pub accumulated: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_AddNumbers_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_AddNumbers_Response {
    fn default() -> &'a CTransportValidation_AddNumbers_Response {
        <CTransportValidation_AddNumbers_Response as ::protobuf::Message>::default_instance()
    }
}

impl CTransportValidation_AddNumbers_Response {
    pub fn new() -> CTransportValidation_AddNumbers_Response {
        ::std::default::Default::default()
    }

    // optional int32 accumulated = 1;

    pub fn accumulated(&self) -> i32 {
        self.accumulated.unwrap_or(0)
    }

    pub fn clear_accumulated(&mut self) {
        self.accumulated = ::std::option::Option::None;
    }

    pub fn has_accumulated(&self) -> bool {
        self.accumulated.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accumulated(&mut self, v: i32) {
        self.accumulated = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CTransportValidation_AddNumbers_Response {
    const NAME: &'static str = "CTransportValidation_AddNumbers_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.accumulated = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.accumulated {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.accumulated {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_AddNumbers_Response {
        CTransportValidation_AddNumbers_Response::new()
    }

    fn clear(&mut self) {
        self.accumulated = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_AddNumbers_Response {
        static instance: CTransportValidation_AddNumbers_Response = CTransportValidation_AddNumbers_Response {
            accumulated: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CTransportValidation_CountOrderedBytes_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_CountOrderedBytes_Request {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidation_CountOrderedBytes_Request.ordered_bytes)
    pub ordered_bytes: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_CountOrderedBytes_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_CountOrderedBytes_Request {
    fn default() -> &'a CTransportValidation_CountOrderedBytes_Request {
        <CTransportValidation_CountOrderedBytes_Request as ::protobuf::Message>::default_instance()
    }
}

impl CTransportValidation_CountOrderedBytes_Request {
    pub fn new() -> CTransportValidation_CountOrderedBytes_Request {
        ::std::default::Default::default()
    }

    // optional bytes ordered_bytes = 1;

    pub fn ordered_bytes(&self) -> &[u8] {
        match self.ordered_bytes.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_ordered_bytes(&mut self) {
        self.ordered_bytes = ::std::option::Option::None;
    }

    pub fn has_ordered_bytes(&self) -> bool {
        self.ordered_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ordered_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.ordered_bytes = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ordered_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.ordered_bytes.is_none() {
            self.ordered_bytes = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.ordered_bytes.as_mut().unwrap()
    }

    // Take field
    pub fn take_ordered_bytes(&mut self) -> ::std::vec::Vec<u8> {
        self.ordered_bytes.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CTransportValidation_CountOrderedBytes_Request {
    const NAME: &'static str = "CTransportValidation_CountOrderedBytes_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.ordered_bytes = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ordered_bytes.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.ordered_bytes.as_ref() {
            os.write_bytes(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_CountOrderedBytes_Request {
        CTransportValidation_CountOrderedBytes_Request::new()
    }

    fn clear(&mut self) {
        self.ordered_bytes = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_CountOrderedBytes_Request {
        static instance: CTransportValidation_CountOrderedBytes_Request = CTransportValidation_CountOrderedBytes_Request {
            ordered_bytes: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CTransportValidation_CountOrderedBytes_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidation_CountOrderedBytes_Response {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidation_CountOrderedBytes_Response.byte_count)
    pub byte_count: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidation_CountOrderedBytes_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidation_CountOrderedBytes_Response {
    fn default() -> &'a CTransportValidation_CountOrderedBytes_Response {
        <CTransportValidation_CountOrderedBytes_Response as ::protobuf::Message>::default_instance()
    }
}

impl CTransportValidation_CountOrderedBytes_Response {
    pub fn new() -> CTransportValidation_CountOrderedBytes_Response {
        ::std::default::Default::default()
    }

    // optional int32 byte_count = 1;

    pub fn byte_count(&self) -> i32 {
        self.byte_count.unwrap_or(0)
    }

    pub fn clear_byte_count(&mut self) {
        self.byte_count = ::std::option::Option::None;
    }

    pub fn has_byte_count(&self) -> bool {
        self.byte_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_byte_count(&mut self, v: i32) {
        self.byte_count = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CTransportValidation_CountOrderedBytes_Response {
    const NAME: &'static str = "CTransportValidation_CountOrderedBytes_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.byte_count = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.byte_count {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.byte_count {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidation_CountOrderedBytes_Response {
        CTransportValidation_CountOrderedBytes_Response::new()
    }

    fn clear(&mut self) {
        self.byte_count = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidation_CountOrderedBytes_Response {
        static instance: CTransportValidation_CountOrderedBytes_Response = CTransportValidation_CountOrderedBytes_Response {
            byte_count: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CTransportValidationClient_AddNumbers_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidationClient_AddNumbers_Request {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidationClient_AddNumbers_Request.numbers)
    pub numbers: ::std::vec::Vec<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidationClient_AddNumbers_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidationClient_AddNumbers_Request {
    fn default() -> &'a CTransportValidationClient_AddNumbers_Request {
        <CTransportValidationClient_AddNumbers_Request as ::protobuf::Message>::default_instance()
    }
}

impl CTransportValidationClient_AddNumbers_Request {
    pub fn new() -> CTransportValidationClient_AddNumbers_Request {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CTransportValidationClient_AddNumbers_Request {
    const NAME: &'static str = "CTransportValidationClient_AddNumbers_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_int32_into(&mut self.numbers)?;
                },
                8 => {
                    self.numbers.push(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.numbers {
            my_size += ::protobuf::rt::int32_size(1, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.numbers {
            os.write_int32(1, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidationClient_AddNumbers_Request {
        CTransportValidationClient_AddNumbers_Request::new()
    }

    fn clear(&mut self) {
        self.numbers.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidationClient_AddNumbers_Request {
        static instance: CTransportValidationClient_AddNumbers_Request = CTransportValidationClient_AddNumbers_Request {
            numbers: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CTransportValidationClient_AddNumbers_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportValidationClient_AddNumbers_Response {
    // message fields
    // @@protoc_insertion_point(field:CTransportValidationClient_AddNumbers_Response.accumulated)
    pub accumulated: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportValidationClient_AddNumbers_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportValidationClient_AddNumbers_Response {
    fn default() -> &'a CTransportValidationClient_AddNumbers_Response {
        <CTransportValidationClient_AddNumbers_Response as ::protobuf::Message>::default_instance()
    }
}

impl CTransportValidationClient_AddNumbers_Response {
    pub fn new() -> CTransportValidationClient_AddNumbers_Response {
        ::std::default::Default::default()
    }

    // optional int32 accumulated = 1;

    pub fn accumulated(&self) -> i32 {
        self.accumulated.unwrap_or(0)
    }

    pub fn clear_accumulated(&mut self) {
        self.accumulated = ::std::option::Option::None;
    }

    pub fn has_accumulated(&self) -> bool {
        self.accumulated.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accumulated(&mut self, v: i32) {
        self.accumulated = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CTransportValidationClient_AddNumbers_Response {
    const NAME: &'static str = "CTransportValidationClient_AddNumbers_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.accumulated = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.accumulated {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.accumulated {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportValidationClient_AddNumbers_Response {
        CTransportValidationClient_AddNumbers_Response::new()
    }

    fn clear(&mut self) {
        self.accumulated = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportValidationClient_AddNumbers_Response {
        static instance: CTransportValidationClient_AddNumbers_Response = CTransportValidationClient_AddNumbers_Response {
            accumulated: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CTransportAuth_Authenticate_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportAuth_Authenticate_Request {
    // message fields
    // @@protoc_insertion_point(field:CTransportAuth_Authenticate_Request.auth_key)
    pub auth_key: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CTransportAuth_Authenticate_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportAuth_Authenticate_Request {
    fn default() -> &'a CTransportAuth_Authenticate_Request {
        <CTransportAuth_Authenticate_Request as ::protobuf::Message>::default_instance()
    }
}

impl CTransportAuth_Authenticate_Request {
    pub fn new() -> CTransportAuth_Authenticate_Request {
        ::std::default::Default::default()
    }

    // optional string auth_key = 1;

    pub fn auth_key(&self) -> &str {
        match self.auth_key.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_auth_key(&mut self) {
        self.auth_key = ::std::option::Option::None;
    }

    pub fn has_auth_key(&self) -> bool {
        self.auth_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_auth_key(&mut self, v: ::std::string::String) {
        self.auth_key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_auth_key(&mut self) -> &mut ::std::string::String {
        if self.auth_key.is_none() {
            self.auth_key = ::std::option::Option::Some(::std::string::String::new());
        }
        self.auth_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_auth_key(&mut self) -> ::std::string::String {
        self.auth_key.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CTransportAuth_Authenticate_Request {
    const NAME: &'static str = "CTransportAuth_Authenticate_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.auth_key = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.auth_key.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.auth_key.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportAuth_Authenticate_Request {
        CTransportAuth_Authenticate_Request::new()
    }

    fn clear(&mut self) {
        self.auth_key = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportAuth_Authenticate_Request {
        static instance: CTransportAuth_Authenticate_Request = CTransportAuth_Authenticate_Request {
            auth_key: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CTransportAuth_Authenticate_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CTransportAuth_Authenticate_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CTransportAuth_Authenticate_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CTransportAuth_Authenticate_Response {
    fn default() -> &'a CTransportAuth_Authenticate_Response {
        <CTransportAuth_Authenticate_Response as ::protobuf::Message>::default_instance()
    }
}

impl CTransportAuth_Authenticate_Response {
    pub fn new() -> CTransportAuth_Authenticate_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CTransportAuth_Authenticate_Response {
    const NAME: &'static str = "CTransportAuth_Authenticate_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CTransportAuth_Authenticate_Response {
        CTransportAuth_Authenticate_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CTransportAuth_Authenticate_Response {
        static instance: CTransportAuth_Authenticate_Response = CTransportAuth_Authenticate_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}
#[allow(unused_imports)]
use crate::steammessages_base::*;
#[allow(unused_imports)]
use crate::webuimessages_base::*;
impl crate::RpcMessage for CTransportValidation_AppendToString_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CTransportValidation_AppendToString_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CTransportValidation_NotifyText_Notification {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CTransportValidation_NotifyNumber_Notification {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CTransportValidation_GetLastNotifyNumber_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CTransportValidation_GetLastNotifyNumber_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CTransportValidation_TriggerSyntheticEvents_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CTransportValidation_TriggerSyntheticEvents_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CTransportValidation_NotifySyntheticEvent_Notification {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CTransportValidation_TriggerDataRequest_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CTransportValidation_TriggerDataRequest_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CTransportValidation_DataRequest_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CTransportValidation_DataRequest_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CTransportValidation_AddNumbers_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CTransportValidation_AddNumbers_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CTransportValidation_CountOrderedBytes_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CTransportValidation_CountOrderedBytes_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CTransportValidationClient_AddNumbers_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CTransportValidationClient_AddNumbers_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CTransportAuth_Authenticate_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CTransportAuth_Authenticate_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
///
struct TransportValidation {}
impl crate::RpcService for TransportValidation {
    const SERVICE_NAME: &'static str = "TransportValidation";
}
///
struct TransportValidationClient {}
impl crate::RpcService for TransportValidationClient {
    const SERVICE_NAME: &'static str = "TransportValidationClient";
}
///
struct TransportAuth {}
impl crate::RpcService for TransportAuth {
    const SERVICE_NAME: &'static str = "TransportAuth";
}
impl crate::RpcMethod for CTransportAuth_Authenticate_Request {
    const METHOD_NAME: &'static str = "TransportAuth.Authenticate#1";
    type Response = CTransportAuth_Authenticate_Response;
}
impl crate::RpcMethod for CTransportValidationClient_AddNumbers_Request {
    const METHOD_NAME: &'static str = "TransportValidationClient.AddNumbers#1";
    type Response = CTransportValidationClient_AddNumbers_Response;
}
impl crate::RpcMethod for CTransportValidation_AddNumbers_Request {
    const METHOD_NAME: &'static str = "TransportValidation.AddNumbers#1";
    type Response = CTransportValidation_AddNumbers_Response;
}
impl crate::RpcMethod for CTransportValidation_AppendToString_Request {
    const METHOD_NAME: &'static str = "TransportValidation.AppendToString#1";
    type Response = CTransportValidation_AppendToString_Response;
}
impl crate::RpcMethod for CTransportValidation_CountOrderedBytes_Request {
    const METHOD_NAME: &'static str = "TransportValidation.CountOrderedBytes#1";
    type Response = CTransportValidation_CountOrderedBytes_Response;
}
impl crate::RpcMethod for CTransportValidation_GetLastNotifyNumber_Request {
    const METHOD_NAME: &'static str = "TransportValidation.GetLastNotifyNumber#1";
    type Response = CTransportValidation_GetLastNotifyNumber_Response;
}
impl crate::RpcMethod for CTransportValidation_NotifyNumber_Notification {
    const METHOD_NAME: &'static str = "TransportValidation.NotifyNumber#1";
    type Response = WebUINoResponse;
}
impl crate::RpcMethod for CTransportValidation_NotifySyntheticEvent_Notification {
    const METHOD_NAME: &'static str = "TransportValidation.NotifySyntheticEvent#1";
    type Response = WebUINoResponse;
}
impl crate::RpcMethod for CTransportValidation_NotifyText_Notification {
    const METHOD_NAME: &'static str = "TransportValidation.NotifyText#1";
    type Response = WebUINoResponse;
}
impl crate::RpcMethod for CTransportValidation_TriggerSyntheticEvents_Request {
    const METHOD_NAME: &'static str = "TransportValidation.TriggerSyntheticEvents#1";
    type Response = CTransportValidation_TriggerSyntheticEvents_Response;
}
