// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `contenthubs.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:CStorePageFilter)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CStorePageFilter {
    // message fields
    // @@protoc_insertion_point(field:CStorePageFilter.sale_filter)
    pub sale_filter: ::protobuf::MessageField<cstore_page_filter::SalePageFilter>,
    // @@protoc_insertion_point(field:CStorePageFilter.content_hub_filter)
    pub content_hub_filter: ::protobuf::MessageField<cstore_page_filter::ContentHubFilter>,
    // @@protoc_insertion_point(field:CStorePageFilter.store_filters)
    pub store_filters: ::std::vec::Vec<cstore_page_filter::StoreFilter>,
    // special fields
    // @@protoc_insertion_point(special_field:CStorePageFilter.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CStorePageFilter {
    fn default() -> &'a CStorePageFilter {
        <CStorePageFilter as ::protobuf::Message>::default_instance()
    }
}

impl CStorePageFilter {
    pub fn new() -> CStorePageFilter {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CStorePageFilter {
    const NAME: &'static str = "CStorePageFilter";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sale_filter)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.content_hub_filter)?;
                },
                26 => {
                    self.store_filters.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.sale_filter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.content_hub_filter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.store_filters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.sale_filter.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.content_hub_filter.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for v in &self.store_filters {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CStorePageFilter {
        CStorePageFilter::new()
    }

    fn clear(&mut self) {
        self.sale_filter.clear();
        self.content_hub_filter.clear();
        self.store_filters.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CStorePageFilter {
        static instance: CStorePageFilter = CStorePageFilter {
            sale_filter: ::protobuf::MessageField::none(),
            content_hub_filter: ::protobuf::MessageField::none(),
            store_filters: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CStorePageFilter`
pub mod cstore_page_filter {
    // @@protoc_insertion_point(message:CStorePageFilter.SalePageFilter)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct SalePageFilter {
        // message fields
        // @@protoc_insertion_point(field:CStorePageFilter.SalePageFilter.sale_tagid)
        pub sale_tagid: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CStorePageFilter.SalePageFilter.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a SalePageFilter {
        fn default() -> &'a SalePageFilter {
            <SalePageFilter as ::protobuf::Message>::default_instance()
        }
    }

    impl SalePageFilter {
        pub fn new() -> SalePageFilter {
            ::std::default::Default::default()
        }

        // optional uint32 sale_tagid = 1;

        pub fn sale_tagid(&self) -> u32 {
            self.sale_tagid.unwrap_or(0)
        }

        pub fn clear_sale_tagid(&mut self) {
            self.sale_tagid = ::std::option::Option::None;
        }

        pub fn has_sale_tagid(&self) -> bool {
            self.sale_tagid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_sale_tagid(&mut self, v: u32) {
            self.sale_tagid = ::std::option::Option::Some(v);
        }
    }

    impl ::protobuf::Message for SalePageFilter {
        const NAME: &'static str = "SalePageFilter";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.sale_tagid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.sale_tagid {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.sale_tagid {
                os.write_uint32(1, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> SalePageFilter {
            SalePageFilter::new()
        }

        fn clear(&mut self) {
            self.sale_tagid = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static SalePageFilter {
            static instance: SalePageFilter = SalePageFilter {
                sale_tagid: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CStorePageFilter.ContentHubFilter)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ContentHubFilter {
        // message fields
        // @@protoc_insertion_point(field:CStorePageFilter.ContentHubFilter.hub_type)
        pub hub_type: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CStorePageFilter.ContentHubFilter.hub_category)
        pub hub_category: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CStorePageFilter.ContentHubFilter.hub_tagid)
        pub hub_tagid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CStorePageFilter.ContentHubFilter.discount_filter)
        pub discount_filter: ::std::option::Option<::protobuf::EnumOrUnknown<super::EContentHubDiscountFilterType>>,
        // @@protoc_insertion_point(field:CStorePageFilter.ContentHubFilter.optin)
        pub optin: ::protobuf::MessageField<content_hub_filter::OptInInfo>,
        // special fields
        // @@protoc_insertion_point(special_field:CStorePageFilter.ContentHubFilter.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ContentHubFilter {
        fn default() -> &'a ContentHubFilter {
            <ContentHubFilter as ::protobuf::Message>::default_instance()
        }
    }

    impl ContentHubFilter {
        pub fn new() -> ContentHubFilter {
            ::std::default::Default::default()
        }

        // optional string hub_type = 1;

        pub fn hub_type(&self) -> &str {
            match self.hub_type.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_hub_type(&mut self) {
            self.hub_type = ::std::option::Option::None;
        }

        pub fn has_hub_type(&self) -> bool {
            self.hub_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_hub_type(&mut self, v: ::std::string::String) {
            self.hub_type = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_hub_type(&mut self) -> &mut ::std::string::String {
            if self.hub_type.is_none() {
                self.hub_type = ::std::option::Option::Some(::std::string::String::new());
            }
            self.hub_type.as_mut().unwrap()
        }

        // Take field
        pub fn take_hub_type(&mut self) -> ::std::string::String {
            self.hub_type.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string hub_category = 2;

        pub fn hub_category(&self) -> &str {
            match self.hub_category.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_hub_category(&mut self) {
            self.hub_category = ::std::option::Option::None;
        }

        pub fn has_hub_category(&self) -> bool {
            self.hub_category.is_some()
        }

        // Param is passed by value, moved
        pub fn set_hub_category(&mut self, v: ::std::string::String) {
            self.hub_category = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_hub_category(&mut self) -> &mut ::std::string::String {
            if self.hub_category.is_none() {
                self.hub_category = ::std::option::Option::Some(::std::string::String::new());
            }
            self.hub_category.as_mut().unwrap()
        }

        // Take field
        pub fn take_hub_category(&mut self) -> ::std::string::String {
            self.hub_category.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint32 hub_tagid = 3;

        pub fn hub_tagid(&self) -> u32 {
            self.hub_tagid.unwrap_or(0)
        }

        pub fn clear_hub_tagid(&mut self) {
            self.hub_tagid = ::std::option::Option::None;
        }

        pub fn has_hub_tagid(&self) -> bool {
            self.hub_tagid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_hub_tagid(&mut self, v: u32) {
            self.hub_tagid = ::std::option::Option::Some(v);
        }

        // optional .EContentHubDiscountFilterType discount_filter = 4;

        pub fn discount_filter(&self) -> super::EContentHubDiscountFilterType {
            match self.discount_filter {
                Some(e) => e.enum_value_or(super::EContentHubDiscountFilterType::k_EContentHubDiscountFilterType_None),
                None => super::EContentHubDiscountFilterType::k_EContentHubDiscountFilterType_None,
            }
        }

        pub fn clear_discount_filter(&mut self) {
            self.discount_filter = ::std::option::Option::None;
        }

        pub fn has_discount_filter(&self) -> bool {
            self.discount_filter.is_some()
        }

        // Param is passed by value, moved
        pub fn set_discount_filter(&mut self, v: super::EContentHubDiscountFilterType) {
            self.discount_filter = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
        }
    }

    impl ::protobuf::Message for ContentHubFilter {
        const NAME: &'static str = "ContentHubFilter";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.hub_type = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.hub_category = ::std::option::Option::Some(is.read_string()?);
                    },
                    24 => {
                        self.hub_tagid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.discount_filter = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    42 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.optin)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.hub_type.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.hub_category.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            if let Some(v) = self.hub_tagid {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.discount_filter {
                my_size += ::protobuf::rt::int32_size(4, v.value());
            }
            if let Some(v) = self.optin.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.hub_type.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.hub_category.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.hub_tagid {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.discount_filter {
                os.write_enum(4, ::protobuf::EnumOrUnknown::value(&v))?;
            }
            if let Some(v) = self.optin.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ContentHubFilter {
            ContentHubFilter::new()
        }

        fn clear(&mut self) {
            self.hub_type = ::std::option::Option::None;
            self.hub_category = ::std::option::Option::None;
            self.hub_tagid = ::std::option::Option::None;
            self.discount_filter = ::std::option::Option::None;
            self.optin.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ContentHubFilter {
            static instance: ContentHubFilter = ContentHubFilter {
                hub_type: ::std::option::Option::None,
                hub_category: ::std::option::Option::None,
                hub_tagid: ::std::option::Option::None,
                discount_filter: ::std::option::Option::None,
                optin: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    /// Nested message and enums of message `ContentHubFilter`
    pub mod content_hub_filter {
        // @@protoc_insertion_point(message:CStorePageFilter.ContentHubFilter.OptInInfo)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct OptInInfo {
            // message fields
            // @@protoc_insertion_point(field:CStorePageFilter.ContentHubFilter.OptInInfo.name)
            pub name: ::std::option::Option<::std::string::String>,
            // @@protoc_insertion_point(field:CStorePageFilter.ContentHubFilter.OptInInfo.optin_tagid)
            pub optin_tagid: ::std::option::Option<u32>,
            // @@protoc_insertion_point(field:CStorePageFilter.ContentHubFilter.OptInInfo.prune_tagid)
            pub prune_tagid: ::std::option::Option<u32>,
            // @@protoc_insertion_point(field:CStorePageFilter.ContentHubFilter.OptInInfo.optin_only)
            pub optin_only: ::std::option::Option<bool>,
            // special fields
            // @@protoc_insertion_point(special_field:CStorePageFilter.ContentHubFilter.OptInInfo.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a OptInInfo {
            fn default() -> &'a OptInInfo {
                <OptInInfo as ::protobuf::Message>::default_instance()
            }
        }

        impl OptInInfo {
            pub fn new() -> OptInInfo {
                ::std::default::Default::default()
            }

            // optional string name = 1;

            pub fn name(&self) -> &str {
                match self.name.as_ref() {
                    Some(v) => v,
                    None => "",
                }
            }

            pub fn clear_name(&mut self) {
                self.name = ::std::option::Option::None;
            }

            pub fn has_name(&self) -> bool {
                self.name.is_some()
            }

            // Param is passed by value, moved
            pub fn set_name(&mut self, v: ::std::string::String) {
                self.name = ::std::option::Option::Some(v);
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_name(&mut self) -> &mut ::std::string::String {
                if self.name.is_none() {
                    self.name = ::std::option::Option::Some(::std::string::String::new());
                }
                self.name.as_mut().unwrap()
            }

            // Take field
            pub fn take_name(&mut self) -> ::std::string::String {
                self.name.take().unwrap_or_else(|| ::std::string::String::new())
            }

            // optional uint32 optin_tagid = 2;

            pub fn optin_tagid(&self) -> u32 {
                self.optin_tagid.unwrap_or(0)
            }

            pub fn clear_optin_tagid(&mut self) {
                self.optin_tagid = ::std::option::Option::None;
            }

            pub fn has_optin_tagid(&self) -> bool {
                self.optin_tagid.is_some()
            }

            // Param is passed by value, moved
            pub fn set_optin_tagid(&mut self, v: u32) {
                self.optin_tagid = ::std::option::Option::Some(v);
            }

            // optional uint32 prune_tagid = 3;

            pub fn prune_tagid(&self) -> u32 {
                self.prune_tagid.unwrap_or(0)
            }

            pub fn clear_prune_tagid(&mut self) {
                self.prune_tagid = ::std::option::Option::None;
            }

            pub fn has_prune_tagid(&self) -> bool {
                self.prune_tagid.is_some()
            }

            // Param is passed by value, moved
            pub fn set_prune_tagid(&mut self, v: u32) {
                self.prune_tagid = ::std::option::Option::Some(v);
            }

            // optional bool optin_only = 4;

            pub fn optin_only(&self) -> bool {
                self.optin_only.unwrap_or(false)
            }

            pub fn clear_optin_only(&mut self) {
                self.optin_only = ::std::option::Option::None;
            }

            pub fn has_optin_only(&self) -> bool {
                self.optin_only.is_some()
            }

            // Param is passed by value, moved
            pub fn set_optin_only(&mut self, v: bool) {
                self.optin_only = ::std::option::Option::Some(v);
            }
        }

        impl ::protobuf::Message for OptInInfo {
            const NAME: &'static str = "OptInInfo";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            self.name = ::std::option::Option::Some(is.read_string()?);
                        },
                        16 => {
                            self.optin_tagid = ::std::option::Option::Some(is.read_uint32()?);
                        },
                        24 => {
                            self.prune_tagid = ::std::option::Option::Some(is.read_uint32()?);
                        },
                        32 => {
                            self.optin_only = ::std::option::Option::Some(is.read_bool()?);
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.name.as_ref() {
                    my_size += ::protobuf::rt::string_size(1, &v);
                }
                if let Some(v) = self.optin_tagid {
                    my_size += ::protobuf::rt::uint32_size(2, v);
                }
                if let Some(v) = self.prune_tagid {
                    my_size += ::protobuf::rt::uint32_size(3, v);
                }
                if let Some(v) = self.optin_only {
                    my_size += 1 + 1;
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if let Some(v) = self.name.as_ref() {
                    os.write_string(1, v)?;
                }
                if let Some(v) = self.optin_tagid {
                    os.write_uint32(2, v)?;
                }
                if let Some(v) = self.prune_tagid {
                    os.write_uint32(3, v)?;
                }
                if let Some(v) = self.optin_only {
                    os.write_bool(4, v)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> OptInInfo {
                OptInInfo::new()
            }

            fn clear(&mut self) {
                self.name = ::std::option::Option::None;
                self.optin_tagid = ::std::option::Option::None;
                self.prune_tagid = ::std::option::Option::None;
                self.optin_only = ::std::option::Option::None;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static OptInInfo {
                static instance: OptInInfo = OptInInfo {
                    name: ::std::option::Option::None,
                    optin_tagid: ::std::option::Option::None,
                    prune_tagid: ::std::option::Option::None,
                    optin_only: ::std::option::Option::None,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }
    }

    // @@protoc_insertion_point(message:CStorePageFilter.StoreFilter)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct StoreFilter {
        // message fields
        // @@protoc_insertion_point(field:CStorePageFilter.StoreFilter.filter_json)
        pub filter_json: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CStorePageFilter.StoreFilter.cache_key)
        pub cache_key: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CStorePageFilter.StoreFilter.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a StoreFilter {
        fn default() -> &'a StoreFilter {
            <StoreFilter as ::protobuf::Message>::default_instance()
        }
    }

    impl StoreFilter {
        pub fn new() -> StoreFilter {
            ::std::default::Default::default()
        }

        // optional string filter_json = 1;

        pub fn filter_json(&self) -> &str {
            match self.filter_json.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_filter_json(&mut self) {
            self.filter_json = ::std::option::Option::None;
        }

        pub fn has_filter_json(&self) -> bool {
            self.filter_json.is_some()
        }

        // Param is passed by value, moved
        pub fn set_filter_json(&mut self, v: ::std::string::String) {
            self.filter_json = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_filter_json(&mut self) -> &mut ::std::string::String {
            if self.filter_json.is_none() {
                self.filter_json = ::std::option::Option::Some(::std::string::String::new());
            }
            self.filter_json.as_mut().unwrap()
        }

        // Take field
        pub fn take_filter_json(&mut self) -> ::std::string::String {
            self.filter_json.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string cache_key = 2;

        pub fn cache_key(&self) -> &str {
            match self.cache_key.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_cache_key(&mut self) {
            self.cache_key = ::std::option::Option::None;
        }

        pub fn has_cache_key(&self) -> bool {
            self.cache_key.is_some()
        }

        // Param is passed by value, moved
        pub fn set_cache_key(&mut self, v: ::std::string::String) {
            self.cache_key = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_cache_key(&mut self) -> &mut ::std::string::String {
            if self.cache_key.is_none() {
                self.cache_key = ::std::option::Option::Some(::std::string::String::new());
            }
            self.cache_key.as_mut().unwrap()
        }

        // Take field
        pub fn take_cache_key(&mut self) -> ::std::string::String {
            self.cache_key.take().unwrap_or_else(|| ::std::string::String::new())
        }
    }

    impl ::protobuf::Message for StoreFilter {
        const NAME: &'static str = "StoreFilter";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.filter_json = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.cache_key = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.filter_json.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.cache_key.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.filter_json.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.cache_key.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> StoreFilter {
            StoreFilter::new()
        }

        fn clear(&mut self) {
            self.filter_json = ::std::option::Option::None;
            self.cache_key = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static StoreFilter {
            static instance: StoreFilter = StoreFilter {
                filter_json: ::std::option::Option::None,
                cache_key: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EContentHubDiscountFilterType)
pub enum EContentHubDiscountFilterType {
    // @@protoc_insertion_point(enum_value:EContentHubDiscountFilterType.k_EContentHubDiscountFilterType_None)
    k_EContentHubDiscountFilterType_None = 0,
    // @@protoc_insertion_point(enum_value:EContentHubDiscountFilterType.k_EContentHubDiscountFilterType_DiscountsOnly)
    k_EContentHubDiscountFilterType_DiscountsOnly = 1,
    // @@protoc_insertion_point(enum_value:EContentHubDiscountFilterType.k_EContentHubDiscountFilterType_PrioritizeDiscounts)
    k_EContentHubDiscountFilterType_PrioritizeDiscounts = 2,
}

impl ::protobuf::Enum for EContentHubDiscountFilterType {
    const NAME: &'static str = "EContentHubDiscountFilterType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EContentHubDiscountFilterType> {
        match value {
            0 => ::std::option::Option::Some(EContentHubDiscountFilterType::k_EContentHubDiscountFilterType_None),
            1 => ::std::option::Option::Some(EContentHubDiscountFilterType::k_EContentHubDiscountFilterType_DiscountsOnly),
            2 => ::std::option::Option::Some(EContentHubDiscountFilterType::k_EContentHubDiscountFilterType_PrioritizeDiscounts),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EContentHubDiscountFilterType> {
        match str {
            "k_EContentHubDiscountFilterType_None" => ::std::option::Option::Some(EContentHubDiscountFilterType::k_EContentHubDiscountFilterType_None),
            "k_EContentHubDiscountFilterType_DiscountsOnly" => ::std::option::Option::Some(EContentHubDiscountFilterType::k_EContentHubDiscountFilterType_DiscountsOnly),
            "k_EContentHubDiscountFilterType_PrioritizeDiscounts" => ::std::option::Option::Some(EContentHubDiscountFilterType::k_EContentHubDiscountFilterType_PrioritizeDiscounts),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EContentHubDiscountFilterType] = &[
        EContentHubDiscountFilterType::k_EContentHubDiscountFilterType_None,
        EContentHubDiscountFilterType::k_EContentHubDiscountFilterType_DiscountsOnly,
        EContentHubDiscountFilterType::k_EContentHubDiscountFilterType_PrioritizeDiscounts,
    ];
}

impl ::std::default::Default for EContentHubDiscountFilterType {
    fn default() -> Self {
        EContentHubDiscountFilterType::k_EContentHubDiscountFilterType_None
    }
}

#[allow(unused_imports)]
use crate::steammessages_base::*;
impl crate::RpcMessage for CStorePageFilter {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
