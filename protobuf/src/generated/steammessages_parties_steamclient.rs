// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_parties.steamclient.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

#[doc = "Request to join a Party via the given Beacon ID. If successful, will be given the necessary 'connect' string."]
// @@protoc_insertion_point(message:CParties_JoinParty_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_JoinParty_Request {
    // message fields
    // @@protoc_insertion_point(field:CParties_JoinParty_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CParties_JoinParty_Request.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_JoinParty_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_JoinParty_Request {
    fn default() -> &'a CParties_JoinParty_Request {
        <CParties_JoinParty_Request as ::protobuf::Message>::default_instance()
    }
}

impl CParties_JoinParty_Request {
    pub fn new() -> CParties_JoinParty_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint64 beacon_id = 2;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CParties_JoinParty_Request {
    const NAME: &'static str = "CParties_JoinParty_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.beacon_id {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_JoinParty_Request {
        CParties_JoinParty_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.beacon_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_JoinParty_Request {
        static instance: CParties_JoinParty_Request = CParties_JoinParty_Request {
            steamid: ::std::option::Option::None,
            beacon_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CParties_JoinParty_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_JoinParty_Response {
    // message fields
    // @@protoc_insertion_point(field:CParties_JoinParty_Response.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CParties_JoinParty_Response.connect_string)
    pub connect_string: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_JoinParty_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_JoinParty_Response {
    fn default() -> &'a CParties_JoinParty_Response {
        <CParties_JoinParty_Response as ::protobuf::Message>::default_instance()
    }
}

impl CParties_JoinParty_Response {
    pub fn new() -> CParties_JoinParty_Response {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }

    // optional string connect_string = 2;

    pub fn connect_string(&self) -> &str {
        match self.connect_string.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_connect_string(&mut self) {
        self.connect_string = ::std::option::Option::None;
    }

    pub fn has_connect_string(&self) -> bool {
        self.connect_string.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connect_string(&mut self, v: ::std::string::String) {
        self.connect_string = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connect_string(&mut self) -> &mut ::std::string::String {
        if self.connect_string.is_none() {
            self.connect_string = ::std::option::Option::Some(::std::string::String::new());
        }
        self.connect_string.as_mut().unwrap()
    }

    // Take field
    pub fn take_connect_string(&mut self) -> ::std::string::String {
        self.connect_string.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CParties_JoinParty_Response {
    const NAME: &'static str = "CParties_JoinParty_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.connect_string = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.connect_string.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.connect_string.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_JoinParty_Response {
        CParties_JoinParty_Response::new()
    }

    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.connect_string = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_JoinParty_Response {
        static instance: CParties_JoinParty_Response = CParties_JoinParty_Response {
            beacon_id: ::std::option::Option::None,
            connect_string: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CParties_BeaconLocation)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_BeaconLocation {
    // message fields
    // @@protoc_insertion_point(field:CParties_BeaconLocation.location_type)
    pub location_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CParties_BeaconLocation.location_id)
    pub location_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_BeaconLocation.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_BeaconLocation {
    fn default() -> &'a CParties_BeaconLocation {
        <CParties_BeaconLocation as ::protobuf::Message>::default_instance()
    }
}

impl CParties_BeaconLocation {
    pub fn new() -> CParties_BeaconLocation {
        ::std::default::Default::default()
    }

    // optional uint32 location_type = 1;

    pub fn location_type(&self) -> u32 {
        self.location_type.unwrap_or(0)
    }

    pub fn clear_location_type(&mut self) {
        self.location_type = ::std::option::Option::None;
    }

    pub fn has_location_type(&self) -> bool {
        self.location_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_location_type(&mut self, v: u32) {
        self.location_type = ::std::option::Option::Some(v);
    }

    // optional uint64 location_id = 2;

    pub fn location_id(&self) -> u64 {
        self.location_id.unwrap_or(0)
    }

    pub fn clear_location_id(&mut self) {
        self.location_id = ::std::option::Option::None;
    }

    pub fn has_location_id(&self) -> bool {
        self.location_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_location_id(&mut self, v: u64) {
        self.location_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CParties_BeaconLocation {
    const NAME: &'static str = "CParties_BeaconLocation";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.location_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.location_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.location_type {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.location_id {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.location_type {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.location_id {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_BeaconLocation {
        CParties_BeaconLocation::new()
    }

    fn clear(&mut self) {
        self.location_type = ::std::option::Option::None;
        self.location_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_BeaconLocation {
        static instance: CParties_BeaconLocation = CParties_BeaconLocation {
            location_type: ::std::option::Option::None,
            location_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Create a Beacon to attract people to your Party."]
// @@protoc_insertion_point(message:CParties_CreateBeacon_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_CreateBeacon_Request {
    // message fields
    // @@protoc_insertion_point(field:CParties_CreateBeacon_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CParties_CreateBeacon_Request.num_open_slots)
    pub num_open_slots: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CParties_CreateBeacon_Request.locations)
    pub locations: ::std::vec::Vec<CParties_BeaconLocation>,
    // @@protoc_insertion_point(field:CParties_CreateBeacon_Request.connect_string)
    pub connect_string: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CParties_CreateBeacon_Request.metadata)
    pub metadata: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_CreateBeacon_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_CreateBeacon_Request {
    fn default() -> &'a CParties_CreateBeacon_Request {
        <CParties_CreateBeacon_Request as ::protobuf::Message>::default_instance()
    }
}

impl CParties_CreateBeacon_Request {
    pub fn new() -> CParties_CreateBeacon_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 num_open_slots = 2;

    pub fn num_open_slots(&self) -> u32 {
        self.num_open_slots.unwrap_or(0)
    }

    pub fn clear_num_open_slots(&mut self) {
        self.num_open_slots = ::std::option::Option::None;
    }

    pub fn has_num_open_slots(&self) -> bool {
        self.num_open_slots.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_open_slots(&mut self, v: u32) {
        self.num_open_slots = ::std::option::Option::Some(v);
    }

    // optional string connect_string = 4;

    pub fn connect_string(&self) -> &str {
        match self.connect_string.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_connect_string(&mut self) {
        self.connect_string = ::std::option::Option::None;
    }

    pub fn has_connect_string(&self) -> bool {
        self.connect_string.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connect_string(&mut self, v: ::std::string::String) {
        self.connect_string = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connect_string(&mut self) -> &mut ::std::string::String {
        if self.connect_string.is_none() {
            self.connect_string = ::std::option::Option::Some(::std::string::String::new());
        }
        self.connect_string.as_mut().unwrap()
    }

    // Take field
    pub fn take_connect_string(&mut self) -> ::std::string::String {
        self.connect_string.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string metadata = 5;

    pub fn metadata(&self) -> &str {
        match self.metadata.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_metadata(&mut self) {
        self.metadata = ::std::option::Option::None;
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: ::std::string::String) {
        self.metadata = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut ::std::string::String {
        if self.metadata.is_none() {
            self.metadata = ::std::option::Option::Some(::std::string::String::new());
        }
        self.metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata(&mut self) -> ::std::string::String {
        self.metadata.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CParties_CreateBeacon_Request {
    const NAME: &'static str = "CParties_CreateBeacon_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.num_open_slots = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.locations.push(is.read_message()?);
                },
                34 => {
                    self.connect_string = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.metadata = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.num_open_slots {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        for value in &self.locations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.connect_string.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.metadata.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.num_open_slots {
            os.write_uint32(2, v)?;
        }
        for v in &self.locations {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if let Some(v) = self.connect_string.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.metadata.as_ref() {
            os.write_string(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_CreateBeacon_Request {
        CParties_CreateBeacon_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.num_open_slots = ::std::option::Option::None;
        self.locations.clear();
        self.connect_string = ::std::option::Option::None;
        self.metadata = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_CreateBeacon_Request {
        static instance: CParties_CreateBeacon_Request = CParties_CreateBeacon_Request {
            appid: ::std::option::Option::None,
            num_open_slots: ::std::option::Option::None,
            locations: ::std::vec::Vec::new(),
            connect_string: ::std::option::Option::None,
            metadata: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CParties_CreateBeacon_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_CreateBeacon_Response {
    // message fields
    // @@protoc_insertion_point(field:CParties_CreateBeacon_Response.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_CreateBeacon_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_CreateBeacon_Response {
    fn default() -> &'a CParties_CreateBeacon_Response {
        <CParties_CreateBeacon_Response as ::protobuf::Message>::default_instance()
    }
}

impl CParties_CreateBeacon_Response {
    pub fn new() -> CParties_CreateBeacon_Response {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CParties_CreateBeacon_Response {
    const NAME: &'static str = "CParties_CreateBeacon_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_CreateBeacon_Response {
        CParties_CreateBeacon_Response::new()
    }

    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_CreateBeacon_Response {
        static instance: CParties_CreateBeacon_Response = CParties_CreateBeacon_Response {
            beacon_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Notify Steam that a user with a reservation has successfully joined."]
// @@protoc_insertion_point(message:CParties_OnReservationCompleted_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_OnReservationCompleted_Request {
    // message fields
    // @@protoc_insertion_point(field:CParties_OnReservationCompleted_Request.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CParties_OnReservationCompleted_Request.user_steamid)
    pub user_steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_OnReservationCompleted_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_OnReservationCompleted_Request {
    fn default() -> &'a CParties_OnReservationCompleted_Request {
        <CParties_OnReservationCompleted_Request as ::protobuf::Message>::default_instance()
    }
}

impl CParties_OnReservationCompleted_Request {
    pub fn new() -> CParties_OnReservationCompleted_Request {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 user_steamid = 2;

    pub fn user_steamid(&self) -> u64 {
        self.user_steamid.unwrap_or(0)
    }

    pub fn clear_user_steamid(&mut self) {
        self.user_steamid = ::std::option::Option::None;
    }

    pub fn has_user_steamid(&self) -> bool {
        self.user_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_steamid(&mut self, v: u64) {
        self.user_steamid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CParties_OnReservationCompleted_Request {
    const NAME: &'static str = "CParties_OnReservationCompleted_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                17 => {
                    self.user_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.user_steamid {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.user_steamid {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_OnReservationCompleted_Request {
        CParties_OnReservationCompleted_Request::new()
    }

    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.user_steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_OnReservationCompleted_Request {
        static instance: CParties_OnReservationCompleted_Request = CParties_OnReservationCompleted_Request {
            beacon_id: ::std::option::Option::None,
            user_steamid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CParties_OnReservationCompleted_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_OnReservationCompleted_Response {
    // message fields
    // @@protoc_insertion_point(field:CParties_OnReservationCompleted_Response.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_OnReservationCompleted_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_OnReservationCompleted_Response {
    fn default() -> &'a CParties_OnReservationCompleted_Response {
        <CParties_OnReservationCompleted_Response as ::protobuf::Message>::default_instance()
    }
}

impl CParties_OnReservationCompleted_Response {
    pub fn new() -> CParties_OnReservationCompleted_Response {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CParties_OnReservationCompleted_Response {
    const NAME: &'static str = "CParties_OnReservationCompleted_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_OnReservationCompleted_Response {
        CParties_OnReservationCompleted_Response::new()
    }

    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_OnReservationCompleted_Response {
        static instance: CParties_OnReservationCompleted_Response = CParties_OnReservationCompleted_Response {
            beacon_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Notify Steam that a user with a reservation either never showed up, or has left the party."]
// @@protoc_insertion_point(message:CParties_CancelReservation_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_CancelReservation_Request {
    // message fields
    // @@protoc_insertion_point(field:CParties_CancelReservation_Request.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CParties_CancelReservation_Request.user_steamid)
    pub user_steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_CancelReservation_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_CancelReservation_Request {
    fn default() -> &'a CParties_CancelReservation_Request {
        <CParties_CancelReservation_Request as ::protobuf::Message>::default_instance()
    }
}

impl CParties_CancelReservation_Request {
    pub fn new() -> CParties_CancelReservation_Request {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 user_steamid = 2;

    pub fn user_steamid(&self) -> u64 {
        self.user_steamid.unwrap_or(0)
    }

    pub fn clear_user_steamid(&mut self) {
        self.user_steamid = ::std::option::Option::None;
    }

    pub fn has_user_steamid(&self) -> bool {
        self.user_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_steamid(&mut self, v: u64) {
        self.user_steamid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CParties_CancelReservation_Request {
    const NAME: &'static str = "CParties_CancelReservation_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                17 => {
                    self.user_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.user_steamid {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.user_steamid {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_CancelReservation_Request {
        CParties_CancelReservation_Request::new()
    }

    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.user_steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_CancelReservation_Request {
        static instance: CParties_CancelReservation_Request = CParties_CancelReservation_Request {
            beacon_id: ::std::option::Option::None,
            user_steamid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CParties_CancelReservation_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_CancelReservation_Response {
    // message fields
    // @@protoc_insertion_point(field:CParties_CancelReservation_Response.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_CancelReservation_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_CancelReservation_Response {
    fn default() -> &'a CParties_CancelReservation_Response {
        <CParties_CancelReservation_Response as ::protobuf::Message>::default_instance()
    }
}

impl CParties_CancelReservation_Response {
    pub fn new() -> CParties_CancelReservation_Response {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CParties_CancelReservation_Response {
    const NAME: &'static str = "CParties_CancelReservation_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_CancelReservation_Response {
        CParties_CancelReservation_Response::new()
    }

    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_CancelReservation_Response {
        static instance: CParties_CancelReservation_Response = CParties_CancelReservation_Response {
            beacon_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Change the number of open slots"]
// @@protoc_insertion_point(message:CParties_ChangeNumOpenSlots_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_ChangeNumOpenSlots_Request {
    // message fields
    // @@protoc_insertion_point(field:CParties_ChangeNumOpenSlots_Request.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CParties_ChangeNumOpenSlots_Request.num_open_slots)
    pub num_open_slots: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_ChangeNumOpenSlots_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_ChangeNumOpenSlots_Request {
    fn default() -> &'a CParties_ChangeNumOpenSlots_Request {
        <CParties_ChangeNumOpenSlots_Request as ::protobuf::Message>::default_instance()
    }
}

impl CParties_ChangeNumOpenSlots_Request {
    pub fn new() -> CParties_ChangeNumOpenSlots_Request {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }

    // optional uint32 num_open_slots = 2;

    pub fn num_open_slots(&self) -> u32 {
        self.num_open_slots.unwrap_or(0)
    }

    pub fn clear_num_open_slots(&mut self) {
        self.num_open_slots = ::std::option::Option::None;
    }

    pub fn has_num_open_slots(&self) -> bool {
        self.num_open_slots.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_open_slots(&mut self, v: u32) {
        self.num_open_slots = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CParties_ChangeNumOpenSlots_Request {
    const NAME: &'static str = "CParties_ChangeNumOpenSlots_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.num_open_slots = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.num_open_slots {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.num_open_slots {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_ChangeNumOpenSlots_Request {
        CParties_ChangeNumOpenSlots_Request::new()
    }

    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.num_open_slots = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_ChangeNumOpenSlots_Request {
        static instance: CParties_ChangeNumOpenSlots_Request = CParties_ChangeNumOpenSlots_Request {
            beacon_id: ::std::option::Option::None,
            num_open_slots: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CParties_ChangeNumOpenSlots_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_ChangeNumOpenSlots_Response {
    // message fields
    // @@protoc_insertion_point(field:CParties_ChangeNumOpenSlots_Response.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_ChangeNumOpenSlots_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_ChangeNumOpenSlots_Response {
    fn default() -> &'a CParties_ChangeNumOpenSlots_Response {
        <CParties_ChangeNumOpenSlots_Response as ::protobuf::Message>::default_instance()
    }
}

impl CParties_ChangeNumOpenSlots_Response {
    pub fn new() -> CParties_ChangeNumOpenSlots_Response {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CParties_ChangeNumOpenSlots_Response {
    const NAME: &'static str = "CParties_ChangeNumOpenSlots_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_ChangeNumOpenSlots_Response {
        CParties_ChangeNumOpenSlots_Response::new()
    }

    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_ChangeNumOpenSlots_Response {
        static instance: CParties_ChangeNumOpenSlots_Response = CParties_ChangeNumOpenSlots_Response {
            beacon_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Delete the Beacon."]
// @@protoc_insertion_point(message:CParties_DestroyBeacon_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_DestroyBeacon_Request {
    // message fields
    // @@protoc_insertion_point(field:CParties_DestroyBeacon_Request.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_DestroyBeacon_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_DestroyBeacon_Request {
    fn default() -> &'a CParties_DestroyBeacon_Request {
        <CParties_DestroyBeacon_Request as ::protobuf::Message>::default_instance()
    }
}

impl CParties_DestroyBeacon_Request {
    pub fn new() -> CParties_DestroyBeacon_Request {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CParties_DestroyBeacon_Request {
    const NAME: &'static str = "CParties_DestroyBeacon_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_DestroyBeacon_Request {
        CParties_DestroyBeacon_Request::new()
    }

    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_DestroyBeacon_Request {
        static instance: CParties_DestroyBeacon_Request = CParties_DestroyBeacon_Request {
            beacon_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CParties_DestroyBeacon_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CParties_DestroyBeacon_Response {
    // message fields
    // @@protoc_insertion_point(field:CParties_DestroyBeacon_Response.beacon_id)
    pub beacon_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CParties_DestroyBeacon_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CParties_DestroyBeacon_Response {
    fn default() -> &'a CParties_DestroyBeacon_Response {
        <CParties_DestroyBeacon_Response as ::protobuf::Message>::default_instance()
    }
}

impl CParties_DestroyBeacon_Response {
    pub fn new() -> CParties_DestroyBeacon_Response {
        ::std::default::Default::default()
    }

    // optional uint64 beacon_id = 1;

    pub fn beacon_id(&self) -> u64 {
        self.beacon_id.unwrap_or(0)
    }

    pub fn clear_beacon_id(&mut self) {
        self.beacon_id = ::std::option::Option::None;
    }

    pub fn has_beacon_id(&self) -> bool {
        self.beacon_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_id(&mut self, v: u64) {
        self.beacon_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CParties_DestroyBeacon_Response {
    const NAME: &'static str = "CParties_DestroyBeacon_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.beacon_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.beacon_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.beacon_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CParties_DestroyBeacon_Response {
        CParties_DestroyBeacon_Response::new()
    }

    fn clear(&mut self) {
        self.beacon_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CParties_DestroyBeacon_Response {
        static instance: CParties_DestroyBeacon_Response = CParties_DestroyBeacon_Response {
            beacon_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}
#[allow(unused_imports)]
use crate::steammessages_base::*;
#[allow(unused_imports)]
use crate::steammessages_unified_base_steamclient::*;
impl crate::RpcMessage for CParties_JoinParty_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CParties_JoinParty_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CParties_BeaconLocation {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CParties_CreateBeacon_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CParties_CreateBeacon_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CParties_OnReservationCompleted_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CParties_OnReservationCompleted_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CParties_CancelReservation_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CParties_CancelReservation_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CParties_ChangeNumOpenSlots_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CParties_ChangeNumOpenSlots_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CParties_DestroyBeacon_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CParties_DestroyBeacon_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
///Party-related services
struct Parties {}
impl crate::RpcService for Parties {
    const SERVICE_NAME: &'static str = "Parties";
}
impl crate::RpcMethod for CParties_CancelReservation_Request {
    const METHOD_NAME: &'static str = "Parties.CancelReservation#1";
    type Response = CParties_CancelReservation_Response;
}
impl crate::RpcMethod for CParties_ChangeNumOpenSlots_Request {
    const METHOD_NAME: &'static str = "Parties.ChangeNumOpenSlots#1";
    type Response = CParties_ChangeNumOpenSlots_Response;
}
impl crate::RpcMethod for CParties_CreateBeacon_Request {
    const METHOD_NAME: &'static str = "Parties.CreateBeacon#1";
    type Response = CParties_CreateBeacon_Response;
}
impl crate::RpcMethod for CParties_DestroyBeacon_Request {
    const METHOD_NAME: &'static str = "Parties.DestroyBeacon#1";
    type Response = CParties_DestroyBeacon_Response;
}
impl crate::RpcMethod for CParties_JoinParty_Request {
    const METHOD_NAME: &'static str = "Parties.JoinParty#1";
    type Response = CParties_JoinParty_Response;
}
impl crate::RpcMethod for CParties_OnReservationCompleted_Request {
    const METHOD_NAME: &'static str = "Parties.OnReservationCompleted#1";
    type Response = CParties_OnReservationCompleted_Response;
}
