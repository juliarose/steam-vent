// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_accounthardware.steamclient.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

#[doc = "Records a serial number and the calling user's account info for warranty purposes."]
// @@protoc_insertion_point(message:CAccountHardware_RegisterSteamController_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_RegisterSteamController_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_RegisterSteamController_Request.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_RegisterSteamController_Request.controller_code)
    pub controller_code: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_RegisterSteamController_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_RegisterSteamController_Request {
    fn default() -> &'a CAccountHardware_RegisterSteamController_Request {
        <CAccountHardware_RegisterSteamController_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_RegisterSteamController_Request {
    pub fn new() -> CAccountHardware_RegisterSteamController_Request {
        ::std::default::Default::default()
    }

    // optional string serial_number = 1;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string controller_code = 2;

    pub fn controller_code(&self) -> &str {
        match self.controller_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_controller_code(&mut self) {
        self.controller_code = ::std::option::Option::None;
    }

    pub fn has_controller_code(&self) -> bool {
        self.controller_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controller_code(&mut self, v: ::std::string::String) {
        self.controller_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controller_code(&mut self) -> &mut ::std::string::String {
        if self.controller_code.is_none() {
            self.controller_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.controller_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_controller_code(&mut self) -> ::std::string::String {
        self.controller_code.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CAccountHardware_RegisterSteamController_Request {
    const NAME: &'static str = "CAccountHardware_RegisterSteamController_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.controller_code = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serial_number.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.controller_code.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.controller_code.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_RegisterSteamController_Request {
        CAccountHardware_RegisterSteamController_Request::new()
    }

    fn clear(&mut self) {
        self.serial_number = ::std::option::Option::None;
        self.controller_code = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_RegisterSteamController_Request {
        static instance: CAccountHardware_RegisterSteamController_Request = CAccountHardware_RegisterSteamController_Request {
            serial_number: ::std::option::Option::None,
            controller_code: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CAccountHardware_RegisterSteamController_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_RegisterSteamController_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_RegisterSteamController_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_RegisterSteamController_Response {
    fn default() -> &'a CAccountHardware_RegisterSteamController_Response {
        <CAccountHardware_RegisterSteamController_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_RegisterSteamController_Response {
    pub fn new() -> CAccountHardware_RegisterSteamController_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CAccountHardware_RegisterSteamController_Response {
    const NAME: &'static str = "CAccountHardware_RegisterSteamController_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_RegisterSteamController_Response {
        CAccountHardware_RegisterSteamController_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_RegisterSteamController_Response {
        static instance: CAccountHardware_RegisterSteamController_Response = CAccountHardware_RegisterSteamController_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Marks a controller's registration as complete"]
// @@protoc_insertion_point(message:CAccountHardware_CompleteSteamControllerRegistration_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_CompleteSteamControllerRegistration_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_CompleteSteamControllerRegistration_Request.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_CompleteSteamControllerRegistration_Request.controller_code)
    pub controller_code: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_CompleteSteamControllerRegistration_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_CompleteSteamControllerRegistration_Request {
    fn default() -> &'a CAccountHardware_CompleteSteamControllerRegistration_Request {
        <CAccountHardware_CompleteSteamControllerRegistration_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_CompleteSteamControllerRegistration_Request {
    pub fn new() -> CAccountHardware_CompleteSteamControllerRegistration_Request {
        ::std::default::Default::default()
    }

    // optional string serial_number = 1;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string controller_code = 2;

    pub fn controller_code(&self) -> &str {
        match self.controller_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_controller_code(&mut self) {
        self.controller_code = ::std::option::Option::None;
    }

    pub fn has_controller_code(&self) -> bool {
        self.controller_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controller_code(&mut self, v: ::std::string::String) {
        self.controller_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controller_code(&mut self) -> &mut ::std::string::String {
        if self.controller_code.is_none() {
            self.controller_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.controller_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_controller_code(&mut self) -> ::std::string::String {
        self.controller_code.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CAccountHardware_CompleteSteamControllerRegistration_Request {
    const NAME: &'static str = "CAccountHardware_CompleteSteamControllerRegistration_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.controller_code = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serial_number.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.controller_code.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.controller_code.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_CompleteSteamControllerRegistration_Request {
        CAccountHardware_CompleteSteamControllerRegistration_Request::new()
    }

    fn clear(&mut self) {
        self.serial_number = ::std::option::Option::None;
        self.controller_code = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_CompleteSteamControllerRegistration_Request {
        static instance: CAccountHardware_CompleteSteamControllerRegistration_Request = CAccountHardware_CompleteSteamControllerRegistration_Request {
            serial_number: ::std::option::Option::None,
            controller_code: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CAccountHardware_CompleteSteamControllerRegistration_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_CompleteSteamControllerRegistration_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_CompleteSteamControllerRegistration_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_CompleteSteamControllerRegistration_Response {
    fn default() -> &'a CAccountHardware_CompleteSteamControllerRegistration_Response {
        <CAccountHardware_CompleteSteamControllerRegistration_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_CompleteSteamControllerRegistration_Response {
    pub fn new() -> CAccountHardware_CompleteSteamControllerRegistration_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CAccountHardware_CompleteSteamControllerRegistration_Response {
    const NAME: &'static str = "CAccountHardware_CompleteSteamControllerRegistration_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_CompleteSteamControllerRegistration_Response {
        CAccountHardware_CompleteSteamControllerRegistration_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_CompleteSteamControllerRegistration_Response {
        static instance: CAccountHardware_CompleteSteamControllerRegistration_Response = CAccountHardware_CompleteSteamControllerRegistration_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Sends back a list of accounts registered to a controller."]
// @@protoc_insertion_point(message:CAccountHardware_QueryAccountsRegisteredToSerial_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_QueryAccountsRegisteredToSerial_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_QueryAccountsRegisteredToSerial_Request.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_QueryAccountsRegisteredToSerial_Request.controller_code)
    pub controller_code: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_QueryAccountsRegisteredToSerial_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_QueryAccountsRegisteredToSerial_Request {
    fn default() -> &'a CAccountHardware_QueryAccountsRegisteredToSerial_Request {
        <CAccountHardware_QueryAccountsRegisteredToSerial_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_QueryAccountsRegisteredToSerial_Request {
    pub fn new() -> CAccountHardware_QueryAccountsRegisteredToSerial_Request {
        ::std::default::Default::default()
    }

    // optional string serial_number = 1;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string controller_code = 2;

    pub fn controller_code(&self) -> &str {
        match self.controller_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_controller_code(&mut self) {
        self.controller_code = ::std::option::Option::None;
    }

    pub fn has_controller_code(&self) -> bool {
        self.controller_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controller_code(&mut self, v: ::std::string::String) {
        self.controller_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controller_code(&mut self) -> &mut ::std::string::String {
        if self.controller_code.is_none() {
            self.controller_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.controller_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_controller_code(&mut self) -> ::std::string::String {
        self.controller_code.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CAccountHardware_QueryAccountsRegisteredToSerial_Request {
    const NAME: &'static str = "CAccountHardware_QueryAccountsRegisteredToSerial_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.controller_code = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serial_number.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.controller_code.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.controller_code.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_QueryAccountsRegisteredToSerial_Request {
        CAccountHardware_QueryAccountsRegisteredToSerial_Request::new()
    }

    fn clear(&mut self) {
        self.serial_number = ::std::option::Option::None;
        self.controller_code = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_QueryAccountsRegisteredToSerial_Request {
        static instance: CAccountHardware_QueryAccountsRegisteredToSerial_Request = CAccountHardware_QueryAccountsRegisteredToSerial_Request {
            serial_number: ::std::option::Option::None,
            controller_code: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts.accountid)
    pub accountid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts.registration_complete)
    pub registration_complete: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_QueryAccountsRegisteredToSerial_Accounts.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
    fn default() -> &'a CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
        <CAccountHardware_QueryAccountsRegisteredToSerial_Accounts as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
    pub fn new() -> CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
        ::std::default::Default::default()
    }

    // optional uint32 accountid = 1;

    pub fn accountid(&self) -> u32 {
        self.accountid.unwrap_or(0)
    }

    pub fn clear_accountid(&mut self) {
        self.accountid = ::std::option::Option::None;
    }

    pub fn has_accountid(&self) -> bool {
        self.accountid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid(&mut self, v: u32) {
        self.accountid = ::std::option::Option::Some(v);
    }

    // optional bool registration_complete = 2;

    pub fn registration_complete(&self) -> bool {
        self.registration_complete.unwrap_or(false)
    }

    pub fn clear_registration_complete(&mut self) {
        self.registration_complete = ::std::option::Option::None;
    }

    pub fn has_registration_complete(&self) -> bool {
        self.registration_complete.is_some()
    }

    // Param is passed by value, moved
    pub fn set_registration_complete(&mut self, v: bool) {
        self.registration_complete = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
    const NAME: &'static str = "CAccountHardware_QueryAccountsRegisteredToSerial_Accounts";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.accountid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.registration_complete = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.accountid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.registration_complete {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.accountid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.registration_complete {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
        CAccountHardware_QueryAccountsRegisteredToSerial_Accounts::new()
    }

    fn clear(&mut self) {
        self.accountid = ::std::option::Option::None;
        self.registration_complete = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
        static instance: CAccountHardware_QueryAccountsRegisteredToSerial_Accounts = CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
            accountid: ::std::option::Option::None,
            registration_complete: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CAccountHardware_QueryAccountsRegisteredToSerial_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_QueryAccountsRegisteredToSerial_Response {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_QueryAccountsRegisteredToSerial_Response.accounts)
    pub accounts: ::std::vec::Vec<CAccountHardware_QueryAccountsRegisteredToSerial_Accounts>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_QueryAccountsRegisteredToSerial_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_QueryAccountsRegisteredToSerial_Response {
    fn default() -> &'a CAccountHardware_QueryAccountsRegisteredToSerial_Response {
        <CAccountHardware_QueryAccountsRegisteredToSerial_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_QueryAccountsRegisteredToSerial_Response {
    pub fn new() -> CAccountHardware_QueryAccountsRegisteredToSerial_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CAccountHardware_QueryAccountsRegisteredToSerial_Response {
    const NAME: &'static str = "CAccountHardware_QueryAccountsRegisteredToSerial_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.accounts.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.accounts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.accounts {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_QueryAccountsRegisteredToSerial_Response {
        CAccountHardware_QueryAccountsRegisteredToSerial_Response::new()
    }

    fn clear(&mut self) {
        self.accounts.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_QueryAccountsRegisteredToSerial_Response {
        static instance: CAccountHardware_QueryAccountsRegisteredToSerial_Response = CAccountHardware_QueryAccountsRegisteredToSerial_Response {
            accounts: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CAccountHardware_SteamControllerSetConfig_ControllerConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_SteamControllerSetConfig_ControllerConfig {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerSetConfig_ControllerConfig.appidorname)
    pub appidorname: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerSetConfig_ControllerConfig.publishedfileid)
    pub publishedfileid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerSetConfig_ControllerConfig.templatename)
    pub templatename: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_SteamControllerSetConfig_ControllerConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_SteamControllerSetConfig_ControllerConfig {
    fn default() -> &'a CAccountHardware_SteamControllerSetConfig_ControllerConfig {
        <CAccountHardware_SteamControllerSetConfig_ControllerConfig as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_SteamControllerSetConfig_ControllerConfig {
    pub fn new() -> CAccountHardware_SteamControllerSetConfig_ControllerConfig {
        ::std::default::Default::default()
    }

    // optional string appidorname = 1;

    pub fn appidorname(&self) -> &str {
        match self.appidorname.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_appidorname(&mut self) {
        self.appidorname = ::std::option::Option::None;
    }

    pub fn has_appidorname(&self) -> bool {
        self.appidorname.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appidorname(&mut self, v: ::std::string::String) {
        self.appidorname = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_appidorname(&mut self) -> &mut ::std::string::String {
        if self.appidorname.is_none() {
            self.appidorname = ::std::option::Option::Some(::std::string::String::new());
        }
        self.appidorname.as_mut().unwrap()
    }

    // Take field
    pub fn take_appidorname(&mut self) -> ::std::string::String {
        self.appidorname.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 publishedfileid = 2;

    pub fn publishedfileid(&self) -> u64 {
        self.publishedfileid.unwrap_or(0)
    }

    pub fn clear_publishedfileid(&mut self) {
        self.publishedfileid = ::std::option::Option::None;
    }

    pub fn has_publishedfileid(&self) -> bool {
        self.publishedfileid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_publishedfileid(&mut self, v: u64) {
        self.publishedfileid = ::std::option::Option::Some(v);
    }

    // optional string templatename = 3;

    pub fn templatename(&self) -> &str {
        match self.templatename.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_templatename(&mut self) {
        self.templatename = ::std::option::Option::None;
    }

    pub fn has_templatename(&self) -> bool {
        self.templatename.is_some()
    }

    // Param is passed by value, moved
    pub fn set_templatename(&mut self, v: ::std::string::String) {
        self.templatename = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_templatename(&mut self) -> &mut ::std::string::String {
        if self.templatename.is_none() {
            self.templatename = ::std::option::Option::Some(::std::string::String::new());
        }
        self.templatename.as_mut().unwrap()
    }

    // Take field
    pub fn take_templatename(&mut self) -> ::std::string::String {
        self.templatename.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CAccountHardware_SteamControllerSetConfig_ControllerConfig {
    const NAME: &'static str = "CAccountHardware_SteamControllerSetConfig_ControllerConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.appidorname = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.publishedfileid = ::std::option::Option::Some(is.read_uint64()?);
                },
                26 => {
                    self.templatename = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appidorname.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.publishedfileid {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.templatename.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appidorname.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.publishedfileid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.templatename.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_SteamControllerSetConfig_ControllerConfig {
        CAccountHardware_SteamControllerSetConfig_ControllerConfig::new()
    }

    fn clear(&mut self) {
        self.appidorname = ::std::option::Option::None;
        self.publishedfileid = ::std::option::Option::None;
        self.templatename = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_SteamControllerSetConfig_ControllerConfig {
        static instance: CAccountHardware_SteamControllerSetConfig_ControllerConfig = CAccountHardware_SteamControllerSetConfig_ControllerConfig {
            appidorname: ::std::option::Option::None,
            publishedfileid: ::std::option::Option::None,
            templatename: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Sets a desired controller config for an app"]
// @@protoc_insertion_point(message:CAccountHardware_SteamControllerSetConfig_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_SteamControllerSetConfig_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerSetConfig_Request.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerSetConfig_Request.controller_code)
    pub controller_code: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerSetConfig_Request.accountid)
    pub accountid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerSetConfig_Request.configurations)
    pub configurations: ::std::vec::Vec<CAccountHardware_SteamControllerSetConfig_ControllerConfig>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerSetConfig_Request.controller_type)
    pub controller_type: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerSetConfig_Request.only_for_this_serial)
    pub only_for_this_serial: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_SteamControllerSetConfig_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_SteamControllerSetConfig_Request {
    fn default() -> &'a CAccountHardware_SteamControllerSetConfig_Request {
        <CAccountHardware_SteamControllerSetConfig_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_SteamControllerSetConfig_Request {
    pub fn new() -> CAccountHardware_SteamControllerSetConfig_Request {
        ::std::default::Default::default()
    }

    // optional string serial_number = 1;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string controller_code = 2;

    pub fn controller_code(&self) -> &str {
        match self.controller_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_controller_code(&mut self) {
        self.controller_code = ::std::option::Option::None;
    }

    pub fn has_controller_code(&self) -> bool {
        self.controller_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controller_code(&mut self, v: ::std::string::String) {
        self.controller_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controller_code(&mut self) -> &mut ::std::string::String {
        if self.controller_code.is_none() {
            self.controller_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.controller_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_controller_code(&mut self) -> ::std::string::String {
        self.controller_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 accountid = 3;

    pub fn accountid(&self) -> u32 {
        self.accountid.unwrap_or(0)
    }

    pub fn clear_accountid(&mut self) {
        self.accountid = ::std::option::Option::None;
    }

    pub fn has_accountid(&self) -> bool {
        self.accountid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid(&mut self, v: u32) {
        self.accountid = ::std::option::Option::Some(v);
    }

    // optional int32 controller_type = 5;

    pub fn controller_type(&self) -> i32 {
        self.controller_type.unwrap_or(2i32)
    }

    pub fn clear_controller_type(&mut self) {
        self.controller_type = ::std::option::Option::None;
    }

    pub fn has_controller_type(&self) -> bool {
        self.controller_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controller_type(&mut self, v: i32) {
        self.controller_type = ::std::option::Option::Some(v);
    }

    // optional bool only_for_this_serial = 6;

    pub fn only_for_this_serial(&self) -> bool {
        self.only_for_this_serial.unwrap_or(false)
    }

    pub fn clear_only_for_this_serial(&mut self) {
        self.only_for_this_serial = ::std::option::Option::None;
    }

    pub fn has_only_for_this_serial(&self) -> bool {
        self.only_for_this_serial.is_some()
    }

    // Param is passed by value, moved
    pub fn set_only_for_this_serial(&mut self, v: bool) {
        self.only_for_this_serial = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CAccountHardware_SteamControllerSetConfig_Request {
    const NAME: &'static str = "CAccountHardware_SteamControllerSetConfig_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.controller_code = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.accountid = ::std::option::Option::Some(is.read_uint32()?);
                },
                34 => {
                    self.configurations.push(is.read_message()?);
                },
                40 => {
                    self.controller_type = ::std::option::Option::Some(is.read_int32()?);
                },
                48 => {
                    self.only_for_this_serial = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serial_number.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.controller_code.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.accountid {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        for value in &self.configurations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.controller_type {
            my_size += ::protobuf::rt::int32_size(5, v);
        }
        if let Some(v) = self.only_for_this_serial {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.controller_code.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.accountid {
            os.write_uint32(3, v)?;
        }
        for v in &self.configurations {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if let Some(v) = self.controller_type {
            os.write_int32(5, v)?;
        }
        if let Some(v) = self.only_for_this_serial {
            os.write_bool(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_SteamControllerSetConfig_Request {
        CAccountHardware_SteamControllerSetConfig_Request::new()
    }

    fn clear(&mut self) {
        self.serial_number = ::std::option::Option::None;
        self.controller_code = ::std::option::Option::None;
        self.accountid = ::std::option::Option::None;
        self.configurations.clear();
        self.controller_type = ::std::option::Option::None;
        self.only_for_this_serial = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_SteamControllerSetConfig_Request {
        static instance: CAccountHardware_SteamControllerSetConfig_Request = CAccountHardware_SteamControllerSetConfig_Request {
            serial_number: ::std::option::Option::None,
            controller_code: ::std::option::Option::None,
            accountid: ::std::option::Option::None,
            configurations: ::std::vec::Vec::new(),
            controller_type: ::std::option::Option::None,
            only_for_this_serial: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CAccountHardware_SteamControllerSetConfig_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_SteamControllerSetConfig_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_SteamControllerSetConfig_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_SteamControllerSetConfig_Response {
    fn default() -> &'a CAccountHardware_SteamControllerSetConfig_Response {
        <CAccountHardware_SteamControllerSetConfig_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_SteamControllerSetConfig_Response {
    pub fn new() -> CAccountHardware_SteamControllerSetConfig_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CAccountHardware_SteamControllerSetConfig_Response {
    const NAME: &'static str = "CAccountHardware_SteamControllerSetConfig_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_SteamControllerSetConfig_Response {
        CAccountHardware_SteamControllerSetConfig_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_SteamControllerSetConfig_Response {
        static instance: CAccountHardware_SteamControllerSetConfig_Response = CAccountHardware_SteamControllerSetConfig_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Gets a desired controller config for an app"]
// @@protoc_insertion_point(message:CAccountHardware_SteamControllerGetConfig_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_SteamControllerGetConfig_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_Request.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_Request.controller_code)
    pub controller_code: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_Request.accountid)
    pub accountid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_Request.appidorname)
    pub appidorname: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_Request.controller_type)
    pub controller_type: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_Request.only_for_this_serial)
    pub only_for_this_serial: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_SteamControllerGetConfig_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_SteamControllerGetConfig_Request {
    fn default() -> &'a CAccountHardware_SteamControllerGetConfig_Request {
        <CAccountHardware_SteamControllerGetConfig_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_SteamControllerGetConfig_Request {
    pub fn new() -> CAccountHardware_SteamControllerGetConfig_Request {
        ::std::default::Default::default()
    }

    // optional string serial_number = 1;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string controller_code = 2;

    pub fn controller_code(&self) -> &str {
        match self.controller_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_controller_code(&mut self) {
        self.controller_code = ::std::option::Option::None;
    }

    pub fn has_controller_code(&self) -> bool {
        self.controller_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controller_code(&mut self, v: ::std::string::String) {
        self.controller_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controller_code(&mut self) -> &mut ::std::string::String {
        if self.controller_code.is_none() {
            self.controller_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.controller_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_controller_code(&mut self) -> ::std::string::String {
        self.controller_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 accountid = 3;

    pub fn accountid(&self) -> u32 {
        self.accountid.unwrap_or(0)
    }

    pub fn clear_accountid(&mut self) {
        self.accountid = ::std::option::Option::None;
    }

    pub fn has_accountid(&self) -> bool {
        self.accountid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid(&mut self, v: u32) {
        self.accountid = ::std::option::Option::Some(v);
    }

    // optional string appidorname = 4;

    pub fn appidorname(&self) -> &str {
        match self.appidorname.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_appidorname(&mut self) {
        self.appidorname = ::std::option::Option::None;
    }

    pub fn has_appidorname(&self) -> bool {
        self.appidorname.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appidorname(&mut self, v: ::std::string::String) {
        self.appidorname = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_appidorname(&mut self) -> &mut ::std::string::String {
        if self.appidorname.is_none() {
            self.appidorname = ::std::option::Option::Some(::std::string::String::new());
        }
        self.appidorname.as_mut().unwrap()
    }

    // Take field
    pub fn take_appidorname(&mut self) -> ::std::string::String {
        self.appidorname.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 controller_type = 5;

    pub fn controller_type(&self) -> i32 {
        self.controller_type.unwrap_or(2i32)
    }

    pub fn clear_controller_type(&mut self) {
        self.controller_type = ::std::option::Option::None;
    }

    pub fn has_controller_type(&self) -> bool {
        self.controller_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controller_type(&mut self, v: i32) {
        self.controller_type = ::std::option::Option::Some(v);
    }

    // optional bool only_for_this_serial = 6;

    pub fn only_for_this_serial(&self) -> bool {
        self.only_for_this_serial.unwrap_or(false)
    }

    pub fn clear_only_for_this_serial(&mut self) {
        self.only_for_this_serial = ::std::option::Option::None;
    }

    pub fn has_only_for_this_serial(&self) -> bool {
        self.only_for_this_serial.is_some()
    }

    // Param is passed by value, moved
    pub fn set_only_for_this_serial(&mut self, v: bool) {
        self.only_for_this_serial = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CAccountHardware_SteamControllerGetConfig_Request {
    const NAME: &'static str = "CAccountHardware_SteamControllerGetConfig_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.controller_code = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.accountid = ::std::option::Option::Some(is.read_uint32()?);
                },
                34 => {
                    self.appidorname = ::std::option::Option::Some(is.read_string()?);
                },
                40 => {
                    self.controller_type = ::std::option::Option::Some(is.read_int32()?);
                },
                48 => {
                    self.only_for_this_serial = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serial_number.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.controller_code.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.accountid {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.appidorname.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.controller_type {
            my_size += ::protobuf::rt::int32_size(5, v);
        }
        if let Some(v) = self.only_for_this_serial {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.controller_code.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.accountid {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.appidorname.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.controller_type {
            os.write_int32(5, v)?;
        }
        if let Some(v) = self.only_for_this_serial {
            os.write_bool(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_SteamControllerGetConfig_Request {
        CAccountHardware_SteamControllerGetConfig_Request::new()
    }

    fn clear(&mut self) {
        self.serial_number = ::std::option::Option::None;
        self.controller_code = ::std::option::Option::None;
        self.accountid = ::std::option::Option::None;
        self.appidorname = ::std::option::Option::None;
        self.controller_type = ::std::option::Option::None;
        self.only_for_this_serial = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_SteamControllerGetConfig_Request {
        static instance: CAccountHardware_SteamControllerGetConfig_Request = CAccountHardware_SteamControllerGetConfig_Request {
            serial_number: ::std::option::Option::None,
            controller_code: ::std::option::Option::None,
            accountid: ::std::option::Option::None,
            appidorname: ::std::option::Option::None,
            controller_type: ::std::option::Option::None,
            only_for_this_serial: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CAccountHardware_SteamControllerGetConfig_ControllerConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_SteamControllerGetConfig_ControllerConfig {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_ControllerConfig.appidorname)
    pub appidorname: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_ControllerConfig.publishedfileid)
    pub publishedfileid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_ControllerConfig.templatename)
    pub templatename: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_ControllerConfig.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_ControllerConfig.autosave)
    pub autosave: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_SteamControllerGetConfig_ControllerConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_SteamControllerGetConfig_ControllerConfig {
    fn default() -> &'a CAccountHardware_SteamControllerGetConfig_ControllerConfig {
        <CAccountHardware_SteamControllerGetConfig_ControllerConfig as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_SteamControllerGetConfig_ControllerConfig {
    pub fn new() -> CAccountHardware_SteamControllerGetConfig_ControllerConfig {
        ::std::default::Default::default()
    }

    // optional string appidorname = 1;

    pub fn appidorname(&self) -> &str {
        match self.appidorname.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_appidorname(&mut self) {
        self.appidorname = ::std::option::Option::None;
    }

    pub fn has_appidorname(&self) -> bool {
        self.appidorname.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appidorname(&mut self, v: ::std::string::String) {
        self.appidorname = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_appidorname(&mut self) -> &mut ::std::string::String {
        if self.appidorname.is_none() {
            self.appidorname = ::std::option::Option::Some(::std::string::String::new());
        }
        self.appidorname.as_mut().unwrap()
    }

    // Take field
    pub fn take_appidorname(&mut self) -> ::std::string::String {
        self.appidorname.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 publishedfileid = 2;

    pub fn publishedfileid(&self) -> u64 {
        self.publishedfileid.unwrap_or(0)
    }

    pub fn clear_publishedfileid(&mut self) {
        self.publishedfileid = ::std::option::Option::None;
    }

    pub fn has_publishedfileid(&self) -> bool {
        self.publishedfileid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_publishedfileid(&mut self, v: u64) {
        self.publishedfileid = ::std::option::Option::Some(v);
    }

    // optional string templatename = 3;

    pub fn templatename(&self) -> &str {
        match self.templatename.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_templatename(&mut self) {
        self.templatename = ::std::option::Option::None;
    }

    pub fn has_templatename(&self) -> bool {
        self.templatename.is_some()
    }

    // Param is passed by value, moved
    pub fn set_templatename(&mut self, v: ::std::string::String) {
        self.templatename = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_templatename(&mut self) -> &mut ::std::string::String {
        if self.templatename.is_none() {
            self.templatename = ::std::option::Option::Some(::std::string::String::new());
        }
        self.templatename.as_mut().unwrap()
    }

    // Take field
    pub fn take_templatename(&mut self) -> ::std::string::String {
        self.templatename.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string serial_number = 4;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool autosave = 5;

    pub fn autosave(&self) -> bool {
        self.autosave.unwrap_or(false)
    }

    pub fn clear_autosave(&mut self) {
        self.autosave = ::std::option::Option::None;
    }

    pub fn has_autosave(&self) -> bool {
        self.autosave.is_some()
    }

    // Param is passed by value, moved
    pub fn set_autosave(&mut self, v: bool) {
        self.autosave = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CAccountHardware_SteamControllerGetConfig_ControllerConfig {
    const NAME: &'static str = "CAccountHardware_SteamControllerGetConfig_ControllerConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.appidorname = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.publishedfileid = ::std::option::Option::Some(is.read_uint64()?);
                },
                26 => {
                    self.templatename = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                40 => {
                    self.autosave = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appidorname.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.publishedfileid {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.templatename.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.serial_number.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.autosave {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appidorname.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.publishedfileid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.templatename.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.autosave {
            os.write_bool(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_SteamControllerGetConfig_ControllerConfig {
        CAccountHardware_SteamControllerGetConfig_ControllerConfig::new()
    }

    fn clear(&mut self) {
        self.appidorname = ::std::option::Option::None;
        self.publishedfileid = ::std::option::Option::None;
        self.templatename = ::std::option::Option::None;
        self.serial_number = ::std::option::Option::None;
        self.autosave = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_SteamControllerGetConfig_ControllerConfig {
        static instance: CAccountHardware_SteamControllerGetConfig_ControllerConfig = CAccountHardware_SteamControllerGetConfig_ControllerConfig {
            appidorname: ::std::option::Option::None,
            publishedfileid: ::std::option::Option::None,
            templatename: ::std::option::Option::None,
            serial_number: ::std::option::Option::None,
            autosave: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CAccountHardware_SteamControllerGetConfig_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_SteamControllerGetConfig_Response {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_SteamControllerGetConfig_Response.configurations)
    pub configurations: ::std::vec::Vec<CAccountHardware_SteamControllerGetConfig_ControllerConfig>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_SteamControllerGetConfig_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_SteamControllerGetConfig_Response {
    fn default() -> &'a CAccountHardware_SteamControllerGetConfig_Response {
        <CAccountHardware_SteamControllerGetConfig_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_SteamControllerGetConfig_Response {
    pub fn new() -> CAccountHardware_SteamControllerGetConfig_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CAccountHardware_SteamControllerGetConfig_Response {
    const NAME: &'static str = "CAccountHardware_SteamControllerGetConfig_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.configurations.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.configurations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.configurations {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_SteamControllerGetConfig_Response {
        CAccountHardware_SteamControllerGetConfig_Response::new()
    }

    fn clear(&mut self) {
        self.configurations.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_SteamControllerGetConfig_Response {
        static instance: CAccountHardware_SteamControllerGetConfig_Response = CAccountHardware_SteamControllerGetConfig_Response {
            configurations: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "De registers a controller"]
// @@protoc_insertion_point(message:CAccountHardware_DeRegisterSteamController_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_DeRegisterSteamController_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_DeRegisterSteamController_Request.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_DeRegisterSteamController_Request.controller_code)
    pub controller_code: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_DeRegisterSteamController_Request.accountid)
    pub accountid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_DeRegisterSteamController_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_DeRegisterSteamController_Request {
    fn default() -> &'a CAccountHardware_DeRegisterSteamController_Request {
        <CAccountHardware_DeRegisterSteamController_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_DeRegisterSteamController_Request {
    pub fn new() -> CAccountHardware_DeRegisterSteamController_Request {
        ::std::default::Default::default()
    }

    // optional string serial_number = 1;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string controller_code = 2;

    pub fn controller_code(&self) -> &str {
        match self.controller_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_controller_code(&mut self) {
        self.controller_code = ::std::option::Option::None;
    }

    pub fn has_controller_code(&self) -> bool {
        self.controller_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controller_code(&mut self, v: ::std::string::String) {
        self.controller_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controller_code(&mut self) -> &mut ::std::string::String {
        if self.controller_code.is_none() {
            self.controller_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.controller_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_controller_code(&mut self) -> ::std::string::String {
        self.controller_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 accountid = 3;

    pub fn accountid(&self) -> u32 {
        self.accountid.unwrap_or(0)
    }

    pub fn clear_accountid(&mut self) {
        self.accountid = ::std::option::Option::None;
    }

    pub fn has_accountid(&self) -> bool {
        self.accountid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid(&mut self, v: u32) {
        self.accountid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CAccountHardware_DeRegisterSteamController_Request {
    const NAME: &'static str = "CAccountHardware_DeRegisterSteamController_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.controller_code = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.accountid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serial_number.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.controller_code.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.accountid {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.controller_code.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.accountid {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_DeRegisterSteamController_Request {
        CAccountHardware_DeRegisterSteamController_Request::new()
    }

    fn clear(&mut self) {
        self.serial_number = ::std::option::Option::None;
        self.controller_code = ::std::option::Option::None;
        self.accountid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_DeRegisterSteamController_Request {
        static instance: CAccountHardware_DeRegisterSteamController_Request = CAccountHardware_DeRegisterSteamController_Request {
            serial_number: ::std::option::Option::None,
            controller_code: ::std::option::Option::None,
            accountid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CAccountHardware_DeRegisterSteamController_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_DeRegisterSteamController_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_DeRegisterSteamController_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_DeRegisterSteamController_Response {
    fn default() -> &'a CAccountHardware_DeRegisterSteamController_Response {
        <CAccountHardware_DeRegisterSteamController_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_DeRegisterSteamController_Response {
    pub fn new() -> CAccountHardware_DeRegisterSteamController_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CAccountHardware_DeRegisterSteamController_Response {
    const NAME: &'static str = "CAccountHardware_DeRegisterSteamController_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_DeRegisterSteamController_Response {
        CAccountHardware_DeRegisterSteamController_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_DeRegisterSteamController_Response {
        static instance: CAccountHardware_DeRegisterSteamController_Response = CAccountHardware_DeRegisterSteamController_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Stores the file ID of the personalization file"]
// @@protoc_insertion_point(message:CAccountHardware_SetPersonalizationFile_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_SetPersonalizationFile_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_SetPersonalizationFile_Request.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_SetPersonalizationFile_Request.publishedfileid)
    pub publishedfileid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CAccountHardware_SetPersonalizationFile_Request.accountid)
    pub accountid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_SetPersonalizationFile_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_SetPersonalizationFile_Request {
    fn default() -> &'a CAccountHardware_SetPersonalizationFile_Request {
        <CAccountHardware_SetPersonalizationFile_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_SetPersonalizationFile_Request {
    pub fn new() -> CAccountHardware_SetPersonalizationFile_Request {
        ::std::default::Default::default()
    }

    // optional string serial_number = 1;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 publishedfileid = 2;

    pub fn publishedfileid(&self) -> u64 {
        self.publishedfileid.unwrap_or(0)
    }

    pub fn clear_publishedfileid(&mut self) {
        self.publishedfileid = ::std::option::Option::None;
    }

    pub fn has_publishedfileid(&self) -> bool {
        self.publishedfileid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_publishedfileid(&mut self, v: u64) {
        self.publishedfileid = ::std::option::Option::Some(v);
    }

    // optional uint32 accountid = 3;

    pub fn accountid(&self) -> u32 {
        self.accountid.unwrap_or(0)
    }

    pub fn clear_accountid(&mut self) {
        self.accountid = ::std::option::Option::None;
    }

    pub fn has_accountid(&self) -> bool {
        self.accountid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid(&mut self, v: u32) {
        self.accountid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CAccountHardware_SetPersonalizationFile_Request {
    const NAME: &'static str = "CAccountHardware_SetPersonalizationFile_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.publishedfileid = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.accountid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serial_number.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.publishedfileid {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.accountid {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.publishedfileid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.accountid {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_SetPersonalizationFile_Request {
        CAccountHardware_SetPersonalizationFile_Request::new()
    }

    fn clear(&mut self) {
        self.serial_number = ::std::option::Option::None;
        self.publishedfileid = ::std::option::Option::None;
        self.accountid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_SetPersonalizationFile_Request {
        static instance: CAccountHardware_SetPersonalizationFile_Request = CAccountHardware_SetPersonalizationFile_Request {
            serial_number: ::std::option::Option::None,
            publishedfileid: ::std::option::Option::None,
            accountid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CAccountHardware_SetPersonalizationFile_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_SetPersonalizationFile_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_SetPersonalizationFile_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_SetPersonalizationFile_Response {
    fn default() -> &'a CAccountHardware_SetPersonalizationFile_Response {
        <CAccountHardware_SetPersonalizationFile_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_SetPersonalizationFile_Response {
    pub fn new() -> CAccountHardware_SetPersonalizationFile_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CAccountHardware_SetPersonalizationFile_Response {
    const NAME: &'static str = "CAccountHardware_SetPersonalizationFile_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_SetPersonalizationFile_Response {
        CAccountHardware_SetPersonalizationFile_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_SetPersonalizationFile_Response {
        static instance: CAccountHardware_SetPersonalizationFile_Response = CAccountHardware_SetPersonalizationFile_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Gets the file ID of the personalization file"]
// @@protoc_insertion_point(message:CAccountHardware_GetPersonalizationFile_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_GetPersonalizationFile_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_GetPersonalizationFile_Request.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_GetPersonalizationFile_Request.accountid)
    pub accountid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_GetPersonalizationFile_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_GetPersonalizationFile_Request {
    fn default() -> &'a CAccountHardware_GetPersonalizationFile_Request {
        <CAccountHardware_GetPersonalizationFile_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_GetPersonalizationFile_Request {
    pub fn new() -> CAccountHardware_GetPersonalizationFile_Request {
        ::std::default::Default::default()
    }

    // optional string serial_number = 1;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 accountid = 2;

    pub fn accountid(&self) -> u32 {
        self.accountid.unwrap_or(0)
    }

    pub fn clear_accountid(&mut self) {
        self.accountid = ::std::option::Option::None;
    }

    pub fn has_accountid(&self) -> bool {
        self.accountid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid(&mut self, v: u32) {
        self.accountid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CAccountHardware_GetPersonalizationFile_Request {
    const NAME: &'static str = "CAccountHardware_GetPersonalizationFile_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.accountid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serial_number.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.accountid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.accountid {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_GetPersonalizationFile_Request {
        CAccountHardware_GetPersonalizationFile_Request::new()
    }

    fn clear(&mut self) {
        self.serial_number = ::std::option::Option::None;
        self.accountid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_GetPersonalizationFile_Request {
        static instance: CAccountHardware_GetPersonalizationFile_Request = CAccountHardware_GetPersonalizationFile_Request {
            serial_number: ::std::option::Option::None,
            accountid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CAccountHardware_GetPersonalizationFile_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_GetPersonalizationFile_Response {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_GetPersonalizationFile_Response.publishedfileid)
    pub publishedfileid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_GetPersonalizationFile_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_GetPersonalizationFile_Response {
    fn default() -> &'a CAccountHardware_GetPersonalizationFile_Response {
        <CAccountHardware_GetPersonalizationFile_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_GetPersonalizationFile_Response {
    pub fn new() -> CAccountHardware_GetPersonalizationFile_Response {
        ::std::default::Default::default()
    }

    // optional uint64 publishedfileid = 1;

    pub fn publishedfileid(&self) -> u64 {
        self.publishedfileid.unwrap_or(0)
    }

    pub fn clear_publishedfileid(&mut self) {
        self.publishedfileid = ::std::option::Option::None;
    }

    pub fn has_publishedfileid(&self) -> bool {
        self.publishedfileid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_publishedfileid(&mut self, v: u64) {
        self.publishedfileid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CAccountHardware_GetPersonalizationFile_Response {
    const NAME: &'static str = "CAccountHardware_GetPersonalizationFile_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.publishedfileid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.publishedfileid {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.publishedfileid {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_GetPersonalizationFile_Response {
        CAccountHardware_GetPersonalizationFile_Response::new()
    }

    fn clear(&mut self) {
        self.publishedfileid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_GetPersonalizationFile_Response {
        static instance: CAccountHardware_GetPersonalizationFile_Response = CAccountHardware_GetPersonalizationFile_Response {
            publishedfileid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Check system info for compatibility with VR"]
// @@protoc_insertion_point(message:CAccountHardware_VRCompatibilityCheck_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_VRCompatibilityCheck_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Request.product_name)
    pub product_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Request.values)
    pub values: ::std::vec::Vec<caccount_hardware_vrcompatibility_check_request::Pair>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_VRCompatibilityCheck_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_VRCompatibilityCheck_Request {
    fn default() -> &'a CAccountHardware_VRCompatibilityCheck_Request {
        <CAccountHardware_VRCompatibilityCheck_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_VRCompatibilityCheck_Request {
    pub fn new() -> CAccountHardware_VRCompatibilityCheck_Request {
        ::std::default::Default::default()
    }

    // optional string product_name = 1;

    pub fn product_name(&self) -> &str {
        match self.product_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_product_name(&mut self) {
        self.product_name = ::std::option::Option::None;
    }

    pub fn has_product_name(&self) -> bool {
        self.product_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_product_name(&mut self, v: ::std::string::String) {
        self.product_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_product_name(&mut self) -> &mut ::std::string::String {
        if self.product_name.is_none() {
            self.product_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.product_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_product_name(&mut self) -> ::std::string::String {
        self.product_name.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CAccountHardware_VRCompatibilityCheck_Request {
    const NAME: &'static str = "CAccountHardware_VRCompatibilityCheck_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.product_name = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.values.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.product_name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.product_name.as_ref() {
            os.write_string(1, v)?;
        }
        for v in &self.values {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_VRCompatibilityCheck_Request {
        CAccountHardware_VRCompatibilityCheck_Request::new()
    }

    fn clear(&mut self) {
        self.product_name = ::std::option::Option::None;
        self.values.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_VRCompatibilityCheck_Request {
        static instance: CAccountHardware_VRCompatibilityCheck_Request = CAccountHardware_VRCompatibilityCheck_Request {
            product_name: ::std::option::Option::None,
            values: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CAccountHardware_VRCompatibilityCheck_Request`
pub mod caccount_hardware_vrcompatibility_check_request {
    // @@protoc_insertion_point(message:CAccountHardware_VRCompatibilityCheck_Request.Pair)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Pair {
        // message fields
        // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Request.Pair.key)
        pub key: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Request.Pair.value)
        pub value: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CAccountHardware_VRCompatibilityCheck_Request.Pair.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Pair {
        fn default() -> &'a Pair {
            <Pair as ::protobuf::Message>::default_instance()
        }
    }

    impl Pair {
        pub fn new() -> Pair {
            ::std::default::Default::default()
        }

        // optional string key = 1;

        pub fn key(&self) -> &str {
            match self.key.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_key(&mut self) {
            self.key = ::std::option::Option::None;
        }

        pub fn has_key(&self) -> bool {
            self.key.is_some()
        }

        // Param is passed by value, moved
        pub fn set_key(&mut self, v: ::std::string::String) {
            self.key = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_key(&mut self) -> &mut ::std::string::String {
            if self.key.is_none() {
                self.key = ::std::option::Option::Some(::std::string::String::new());
            }
            self.key.as_mut().unwrap()
        }

        // Take field
        pub fn take_key(&mut self) -> ::std::string::String {
            self.key.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string value = 2;

        pub fn value(&self) -> &str {
            match self.value.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_value(&mut self) {
            self.value = ::std::option::Option::None;
        }

        pub fn has_value(&self) -> bool {
            self.value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_value(&mut self, v: ::std::string::String) {
            self.value = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_value(&mut self) -> &mut ::std::string::String {
            if self.value.is_none() {
                self.value = ::std::option::Option::Some(::std::string::String::new());
            }
            self.value.as_mut().unwrap()
        }

        // Take field
        pub fn take_value(&mut self) -> ::std::string::String {
            self.value.take().unwrap_or_else(|| ::std::string::String::new())
        }
    }

    impl ::protobuf::Message for Pair {
        const NAME: &'static str = "Pair";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.key = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.value = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.key.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.value.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.key.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.value.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Pair {
            Pair::new()
        }

        fn clear(&mut self) {
            self.key = ::std::option::Option::None;
            self.value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Pair {
            static instance: Pair = Pair {
                key: ::std::option::Option::None,
                value: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CAccountHardware_VRCompatibilityCheck_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_VRCompatibilityCheck_Response {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Response.values)
    pub values: ::std::vec::Vec<caccount_hardware_vrcompatibility_check_response::Pair>,
    // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Response.components)
    pub components: ::std::vec::Vec<caccount_hardware_vrcompatibility_check_response::ComponentDisplay>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_VRCompatibilityCheck_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_VRCompatibilityCheck_Response {
    fn default() -> &'a CAccountHardware_VRCompatibilityCheck_Response {
        <CAccountHardware_VRCompatibilityCheck_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_VRCompatibilityCheck_Response {
    pub fn new() -> CAccountHardware_VRCompatibilityCheck_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CAccountHardware_VRCompatibilityCheck_Response {
    const NAME: &'static str = "CAccountHardware_VRCompatibilityCheck_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.values.push(is.read_message()?);
                },
                18 => {
                    self.components.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.components {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.values {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.components {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_VRCompatibilityCheck_Response {
        CAccountHardware_VRCompatibilityCheck_Response::new()
    }

    fn clear(&mut self) {
        self.values.clear();
        self.components.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_VRCompatibilityCheck_Response {
        static instance: CAccountHardware_VRCompatibilityCheck_Response = CAccountHardware_VRCompatibilityCheck_Response {
            values: ::std::vec::Vec::new(),
            components: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CAccountHardware_VRCompatibilityCheck_Response`
pub mod caccount_hardware_vrcompatibility_check_response {
    // @@protoc_insertion_point(message:CAccountHardware_VRCompatibilityCheck_Response.Pair)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Pair {
        // message fields
        // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Response.Pair.key)
        pub key: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Response.Pair.value)
        pub value: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CAccountHardware_VRCompatibilityCheck_Response.Pair.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Pair {
        fn default() -> &'a Pair {
            <Pair as ::protobuf::Message>::default_instance()
        }
    }

    impl Pair {
        pub fn new() -> Pair {
            ::std::default::Default::default()
        }

        // optional string key = 1;

        pub fn key(&self) -> &str {
            match self.key.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_key(&mut self) {
            self.key = ::std::option::Option::None;
        }

        pub fn has_key(&self) -> bool {
            self.key.is_some()
        }

        // Param is passed by value, moved
        pub fn set_key(&mut self, v: ::std::string::String) {
            self.key = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_key(&mut self) -> &mut ::std::string::String {
            if self.key.is_none() {
                self.key = ::std::option::Option::Some(::std::string::String::new());
            }
            self.key.as_mut().unwrap()
        }

        // Take field
        pub fn take_key(&mut self) -> ::std::string::String {
            self.key.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string value = 2;

        pub fn value(&self) -> &str {
            match self.value.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_value(&mut self) {
            self.value = ::std::option::Option::None;
        }

        pub fn has_value(&self) -> bool {
            self.value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_value(&mut self, v: ::std::string::String) {
            self.value = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_value(&mut self) -> &mut ::std::string::String {
            if self.value.is_none() {
                self.value = ::std::option::Option::Some(::std::string::String::new());
            }
            self.value.as_mut().unwrap()
        }

        // Take field
        pub fn take_value(&mut self) -> ::std::string::String {
            self.value.take().unwrap_or_else(|| ::std::string::String::new())
        }
    }

    impl ::protobuf::Message for Pair {
        const NAME: &'static str = "Pair";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.key = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.value = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.key.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.value.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.key.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.value.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Pair {
            Pair::new()
        }

        fn clear(&mut self) {
            self.key = ::std::option::Option::None;
            self.value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Pair {
            static instance: Pair = Pair {
                key: ::std::option::Option::None,
                value: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ComponentDisplay {
        // message fields
        // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay.image)
        pub image: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay.value)
        pub value: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ComponentDisplay {
        fn default() -> &'a ComponentDisplay {
            <ComponentDisplay as ::protobuf::Message>::default_instance()
        }
    }

    impl ComponentDisplay {
        pub fn new() -> ComponentDisplay {
            ::std::default::Default::default()
        }

        // optional string name = 1;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string image = 2;

        pub fn image(&self) -> &str {
            match self.image.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_image(&mut self) {
            self.image = ::std::option::Option::None;
        }

        pub fn has_image(&self) -> bool {
            self.image.is_some()
        }

        // Param is passed by value, moved
        pub fn set_image(&mut self, v: ::std::string::String) {
            self.image = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_image(&mut self) -> &mut ::std::string::String {
            if self.image.is_none() {
                self.image = ::std::option::Option::Some(::std::string::String::new());
            }
            self.image.as_mut().unwrap()
        }

        // Take field
        pub fn take_image(&mut self) -> ::std::string::String {
            self.image.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string value = 3;

        pub fn value(&self) -> &str {
            match self.value.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_value(&mut self) {
            self.value = ::std::option::Option::None;
        }

        pub fn has_value(&self) -> bool {
            self.value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_value(&mut self, v: ::std::string::String) {
            self.value = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_value(&mut self) -> &mut ::std::string::String {
            if self.value.is_none() {
                self.value = ::std::option::Option::Some(::std::string::String::new());
            }
            self.value.as_mut().unwrap()
        }

        // Take field
        pub fn take_value(&mut self) -> ::std::string::String {
            self.value.take().unwrap_or_else(|| ::std::string::String::new())
        }
    }

    impl ::protobuf::Message for ComponentDisplay {
        const NAME: &'static str = "ComponentDisplay";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.image = ::std::option::Option::Some(is.read_string()?);
                    },
                    26 => {
                        self.value = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.name.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.image.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            if let Some(v) = self.value.as_ref() {
                my_size += ::protobuf::rt::string_size(3, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.name.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.image.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.value.as_ref() {
                os.write_string(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ComponentDisplay {
            ComponentDisplay::new()
        }

        fn clear(&mut self) {
            self.name = ::std::option::Option::None;
            self.image = ::std::option::Option::None;
            self.value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ComponentDisplay {
            static instance: ComponentDisplay = ComponentDisplay {
                name: ::std::option::Option::None,
                image: ::std::option::Option::None,
                value: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

#[doc = "Registers a valve index component to a customer"]
// @@protoc_insertion_point(message:CAccountHardware_RegisterValveIndexComponent_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_RegisterValveIndexComponent_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_RegisterValveIndexComponent_Request.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_RegisterValveIndexComponent_Request.manufacturer_serial_number)
    pub manufacturer_serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_RegisterValveIndexComponent_Request.component_code)
    pub component_code: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_RegisterValveIndexComponent_Request.component_type)
    pub component_type: ::std::option::Option<::protobuf::EnumOrUnknown<EValveIndexComponent>>,
    // @@protoc_insertion_point(field:CAccountHardware_RegisterValveIndexComponent_Request.estimated_time_registered)
    pub estimated_time_registered: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_RegisterValveIndexComponent_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_RegisterValveIndexComponent_Request {
    fn default() -> &'a CAccountHardware_RegisterValveIndexComponent_Request {
        <CAccountHardware_RegisterValveIndexComponent_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_RegisterValveIndexComponent_Request {
    pub fn new() -> CAccountHardware_RegisterValveIndexComponent_Request {
        ::std::default::Default::default()
    }

    // optional string serial_number = 1;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string manufacturer_serial_number = 2;

    pub fn manufacturer_serial_number(&self) -> &str {
        match self.manufacturer_serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_manufacturer_serial_number(&mut self) {
        self.manufacturer_serial_number = ::std::option::Option::None;
    }

    pub fn has_manufacturer_serial_number(&self) -> bool {
        self.manufacturer_serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_manufacturer_serial_number(&mut self, v: ::std::string::String) {
        self.manufacturer_serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_manufacturer_serial_number(&mut self) -> &mut ::std::string::String {
        if self.manufacturer_serial_number.is_none() {
            self.manufacturer_serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.manufacturer_serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_manufacturer_serial_number(&mut self) -> ::std::string::String {
        self.manufacturer_serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string component_code = 3;

    pub fn component_code(&self) -> &str {
        match self.component_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_component_code(&mut self) {
        self.component_code = ::std::option::Option::None;
    }

    pub fn has_component_code(&self) -> bool {
        self.component_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_component_code(&mut self, v: ::std::string::String) {
        self.component_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_component_code(&mut self) -> &mut ::std::string::String {
        if self.component_code.is_none() {
            self.component_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.component_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_component_code(&mut self) -> ::std::string::String {
        self.component_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .EValveIndexComponent component_type = 4;

    pub fn component_type(&self) -> EValveIndexComponent {
        match self.component_type {
            Some(e) => e.enum_value_or(EValveIndexComponent::k_EValveIndexComponentUnknown),
            None => EValveIndexComponent::k_EValveIndexComponentUnknown,
        }
    }

    pub fn clear_component_type(&mut self) {
        self.component_type = ::std::option::Option::None;
    }

    pub fn has_component_type(&self) -> bool {
        self.component_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_component_type(&mut self, v: EValveIndexComponent) {
        self.component_type = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional int32 estimated_time_registered = 5;

    pub fn estimated_time_registered(&self) -> i32 {
        self.estimated_time_registered.unwrap_or(0)
    }

    pub fn clear_estimated_time_registered(&mut self) {
        self.estimated_time_registered = ::std::option::Option::None;
    }

    pub fn has_estimated_time_registered(&self) -> bool {
        self.estimated_time_registered.is_some()
    }

    // Param is passed by value, moved
    pub fn set_estimated_time_registered(&mut self, v: i32) {
        self.estimated_time_registered = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CAccountHardware_RegisterValveIndexComponent_Request {
    const NAME: &'static str = "CAccountHardware_RegisterValveIndexComponent_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.manufacturer_serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.component_code = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.component_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                40 => {
                    self.estimated_time_registered = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serial_number.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.manufacturer_serial_number.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.component_code.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.component_type {
            my_size += ::protobuf::rt::int32_size(4, v.value());
        }
        if let Some(v) = self.estimated_time_registered {
            my_size += ::protobuf::rt::int32_size(5, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.manufacturer_serial_number.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.component_code.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.component_type {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.estimated_time_registered {
            os.write_int32(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_RegisterValveIndexComponent_Request {
        CAccountHardware_RegisterValveIndexComponent_Request::new()
    }

    fn clear(&mut self) {
        self.serial_number = ::std::option::Option::None;
        self.manufacturer_serial_number = ::std::option::Option::None;
        self.component_code = ::std::option::Option::None;
        self.component_type = ::std::option::Option::None;
        self.estimated_time_registered = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_RegisterValveIndexComponent_Request {
        static instance: CAccountHardware_RegisterValveIndexComponent_Request = CAccountHardware_RegisterValveIndexComponent_Request {
            serial_number: ::std::option::Option::None,
            manufacturer_serial_number: ::std::option::Option::None,
            component_code: ::std::option::Option::None,
            component_type: ::std::option::Option::None,
            estimated_time_registered: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CAccountHardware_RegisterValveIndexComponent_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_RegisterValveIndexComponent_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_RegisterValveIndexComponent_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_RegisterValveIndexComponent_Response {
    fn default() -> &'a CAccountHardware_RegisterValveIndexComponent_Response {
        <CAccountHardware_RegisterValveIndexComponent_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_RegisterValveIndexComponent_Response {
    pub fn new() -> CAccountHardware_RegisterValveIndexComponent_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CAccountHardware_RegisterValveIndexComponent_Response {
    const NAME: &'static str = "CAccountHardware_RegisterValveIndexComponent_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_RegisterValveIndexComponent_Response {
        CAccountHardware_RegisterValveIndexComponent_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_RegisterValveIndexComponent_Response {
        static instance: CAccountHardware_RegisterValveIndexComponent_Response = CAccountHardware_RegisterValveIndexComponent_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Returns the components that went into the given Steam Deck"]
// @@protoc_insertion_point(message:CAccountHardware_GetSteamDeckComponents_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_GetSteamDeckComponents_Request {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_GetSteamDeckComponents_Request.serial_number)
    pub serial_number: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CAccountHardware_GetSteamDeckComponents_Request.controller_code)
    pub controller_code: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_GetSteamDeckComponents_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_GetSteamDeckComponents_Request {
    fn default() -> &'a CAccountHardware_GetSteamDeckComponents_Request {
        <CAccountHardware_GetSteamDeckComponents_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_GetSteamDeckComponents_Request {
    pub fn new() -> CAccountHardware_GetSteamDeckComponents_Request {
        ::std::default::Default::default()
    }

    // optional string serial_number = 1;

    pub fn serial_number(&self) -> &str {
        match self.serial_number.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_serial_number(&mut self) {
        self.serial_number = ::std::option::Option::None;
    }

    pub fn has_serial_number(&self) -> bool {
        self.serial_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        if self.serial_number.is_none() {
            self.serial_number = ::std::option::Option::Some(::std::string::String::new());
        }
        self.serial_number.as_mut().unwrap()
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        self.serial_number.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string controller_code = 2;

    pub fn controller_code(&self) -> &str {
        match self.controller_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_controller_code(&mut self) {
        self.controller_code = ::std::option::Option::None;
    }

    pub fn has_controller_code(&self) -> bool {
        self.controller_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controller_code(&mut self, v: ::std::string::String) {
        self.controller_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controller_code(&mut self) -> &mut ::std::string::String {
        if self.controller_code.is_none() {
            self.controller_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.controller_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_controller_code(&mut self) -> ::std::string::String {
        self.controller_code.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CAccountHardware_GetSteamDeckComponents_Request {
    const NAME: &'static str = "CAccountHardware_GetSteamDeckComponents_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.serial_number = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.controller_code = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serial_number.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.controller_code.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.serial_number.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.controller_code.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_GetSteamDeckComponents_Request {
        CAccountHardware_GetSteamDeckComponents_Request::new()
    }

    fn clear(&mut self) {
        self.serial_number = ::std::option::Option::None;
        self.controller_code = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_GetSteamDeckComponents_Request {
        static instance: CAccountHardware_GetSteamDeckComponents_Request = CAccountHardware_GetSteamDeckComponents_Request {
            serial_number: ::std::option::Option::None,
            controller_code: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CAccountHardware_GetSteamDeckComponents_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CAccountHardware_GetSteamDeckComponents_Response {
    // message fields
    // @@protoc_insertion_point(field:CAccountHardware_GetSteamDeckComponents_Response.json_components)
    pub json_components: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CAccountHardware_GetSteamDeckComponents_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAccountHardware_GetSteamDeckComponents_Response {
    fn default() -> &'a CAccountHardware_GetSteamDeckComponents_Response {
        <CAccountHardware_GetSteamDeckComponents_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAccountHardware_GetSteamDeckComponents_Response {
    pub fn new() -> CAccountHardware_GetSteamDeckComponents_Response {
        ::std::default::Default::default()
    }

    // optional string json_components = 1;

    pub fn json_components(&self) -> &str {
        match self.json_components.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_json_components(&mut self) {
        self.json_components = ::std::option::Option::None;
    }

    pub fn has_json_components(&self) -> bool {
        self.json_components.is_some()
    }

    // Param is passed by value, moved
    pub fn set_json_components(&mut self, v: ::std::string::String) {
        self.json_components = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_json_components(&mut self) -> &mut ::std::string::String {
        if self.json_components.is_none() {
            self.json_components = ::std::option::Option::Some(::std::string::String::new());
        }
        self.json_components.as_mut().unwrap()
    }

    // Take field
    pub fn take_json_components(&mut self) -> ::std::string::String {
        self.json_components.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CAccountHardware_GetSteamDeckComponents_Response {
    const NAME: &'static str = "CAccountHardware_GetSteamDeckComponents_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.json_components = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.json_components.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.json_components.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAccountHardware_GetSteamDeckComponents_Response {
        CAccountHardware_GetSteamDeckComponents_Response::new()
    }

    fn clear(&mut self) {
        self.json_components = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAccountHardware_GetSteamDeckComponents_Response {
        static instance: CAccountHardware_GetSteamDeckComponents_Response = CAccountHardware_GetSteamDeckComponents_Response {
            json_components: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EValveIndexComponent)
pub enum EValveIndexComponent {
    // @@protoc_insertion_point(enum_value:EValveIndexComponent.k_EValveIndexComponentUnknown)
    k_EValveIndexComponentUnknown = 0,
    // @@protoc_insertion_point(enum_value:EValveIndexComponent.k_EValveIndexComponentHMD)
    k_EValveIndexComponentHMD = 1,
    // @@protoc_insertion_point(enum_value:EValveIndexComponent.k_EValveIndexComponentLeftKnuckle)
    k_EValveIndexComponentLeftKnuckle = 2,
    // @@protoc_insertion_point(enum_value:EValveIndexComponent.k_EValveIndexComponentRightKnuckle)
    k_EValveIndexComponentRightKnuckle = 3,
}

impl ::protobuf::Enum for EValveIndexComponent {
    const NAME: &'static str = "EValveIndexComponent";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EValveIndexComponent> {
        match value {
            0 => ::std::option::Option::Some(EValveIndexComponent::k_EValveIndexComponentUnknown),
            1 => ::std::option::Option::Some(EValveIndexComponent::k_EValveIndexComponentHMD),
            2 => ::std::option::Option::Some(EValveIndexComponent::k_EValveIndexComponentLeftKnuckle),
            3 => ::std::option::Option::Some(EValveIndexComponent::k_EValveIndexComponentRightKnuckle),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EValveIndexComponent> {
        match str {
            "k_EValveIndexComponentUnknown" => ::std::option::Option::Some(EValveIndexComponent::k_EValveIndexComponentUnknown),
            "k_EValveIndexComponentHMD" => ::std::option::Option::Some(EValveIndexComponent::k_EValveIndexComponentHMD),
            "k_EValveIndexComponentLeftKnuckle" => ::std::option::Option::Some(EValveIndexComponent::k_EValveIndexComponentLeftKnuckle),
            "k_EValveIndexComponentRightKnuckle" => ::std::option::Option::Some(EValveIndexComponent::k_EValveIndexComponentRightKnuckle),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EValveIndexComponent] = &[
        EValveIndexComponent::k_EValveIndexComponentUnknown,
        EValveIndexComponent::k_EValveIndexComponentHMD,
        EValveIndexComponent::k_EValveIndexComponentLeftKnuckle,
        EValveIndexComponent::k_EValveIndexComponentRightKnuckle,
    ];
}

impl ::std::default::Default for EValveIndexComponent {
    fn default() -> Self {
        EValveIndexComponent::k_EValveIndexComponentUnknown
    }
}

#[allow(unused_imports)]
use crate::steammessages_base::*;
#[allow(unused_imports)]
use crate::steammessages_unified_base_steamclient::*;
impl crate::RpcMessage for CAccountHardware_RegisterSteamController_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CAccountHardware_RegisterSteamController_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CAccountHardware_CompleteSteamControllerRegistration_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage
for CAccountHardware_CompleteSteamControllerRegistration_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CAccountHardware_QueryAccountsRegisteredToSerial_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CAccountHardware_QueryAccountsRegisteredToSerial_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CAccountHardware_SteamControllerSetConfig_ControllerConfig {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CAccountHardware_SteamControllerSetConfig_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CAccountHardware_SteamControllerSetConfig_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CAccountHardware_SteamControllerGetConfig_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CAccountHardware_SteamControllerGetConfig_ControllerConfig {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CAccountHardware_SteamControllerGetConfig_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CAccountHardware_DeRegisterSteamController_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CAccountHardware_DeRegisterSteamController_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CAccountHardware_SetPersonalizationFile_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CAccountHardware_SetPersonalizationFile_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CAccountHardware_GetPersonalizationFile_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CAccountHardware_GetPersonalizationFile_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CAccountHardware_VRCompatibilityCheck_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CAccountHardware_VRCompatibilityCheck_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CAccountHardware_RegisterValveIndexComponent_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CAccountHardware_RegisterValveIndexComponent_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CAccountHardware_GetSteamDeckComponents_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CAccountHardware_GetSteamDeckComponents_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
///A service to use account hardware related methods
struct AccountHardware {}
impl crate::RpcService for AccountHardware {
    const SERVICE_NAME: &'static str = "AccountHardware";
}
impl crate::RpcMethod for CAccountHardware_CompleteSteamControllerRegistration_Request {
    const METHOD_NAME: &'static str = "AccountHardware.CompleteSteamControllerRegistration#1";
    type Response = CAccountHardware_CompleteSteamControllerRegistration_Response;
}
impl crate::RpcMethod for CAccountHardware_DeRegisterSteamController_Request {
    const METHOD_NAME: &'static str = "AccountHardware.DeRegisterSteamController#1";
    type Response = CAccountHardware_DeRegisterSteamController_Response;
}
impl crate::RpcMethod for CAccountHardware_GetPersonalizationFile_Request {
    const METHOD_NAME: &'static str = "AccountHardware.GetControllerPersonalizationFile#1";
    type Response = CAccountHardware_GetPersonalizationFile_Response;
}
impl crate::RpcMethod for CAccountHardware_GetSteamDeckComponents_Request {
    const METHOD_NAME: &'static str = "AccountHardware.GetSteamDeckComponents#1";
    type Response = CAccountHardware_GetSteamDeckComponents_Response;
}
impl crate::RpcMethod for CAccountHardware_QueryAccountsRegisteredToSerial_Request {
    const METHOD_NAME: &'static str = "AccountHardware.QueryAccountsRegisteredToController#1";
    type Response = CAccountHardware_QueryAccountsRegisteredToSerial_Response;
}
impl crate::RpcMethod for CAccountHardware_RegisterSteamController_Request {
    const METHOD_NAME: &'static str = "AccountHardware.RegisterSteamController#1";
    type Response = CAccountHardware_RegisterSteamController_Response;
}
impl crate::RpcMethod for CAccountHardware_RegisterValveIndexComponent_Request {
    const METHOD_NAME: &'static str = "AccountHardware.RegisterValveIndexComponent#1";
    type Response = CAccountHardware_RegisterValveIndexComponent_Response;
}
impl crate::RpcMethod for CAccountHardware_SetPersonalizationFile_Request {
    const METHOD_NAME: &'static str = "AccountHardware.SetControllerPersonalizationFile#1";
    type Response = CAccountHardware_SetPersonalizationFile_Response;
}
impl crate::RpcMethod for CAccountHardware_SteamControllerGetConfig_Request {
    const METHOD_NAME: &'static str = "AccountHardware.GetDesiredControllerConfigForApp#1";
    type Response = CAccountHardware_SteamControllerGetConfig_Response;
}
impl crate::RpcMethod for CAccountHardware_SteamControllerSetConfig_Request {
    const METHOD_NAME: &'static str = "AccountHardware.SetDesiredControllerConfigForApp#1";
    type Response = CAccountHardware_SteamControllerSetConfig_Response;
}
impl crate::RpcMethod for CAccountHardware_VRCompatibilityCheck_Request {
    const METHOD_NAME: &'static str = "AccountHardware.VRCompatibilityCheck#1";
    type Response = CAccountHardware_VRCompatibilityCheck_Response;
}
