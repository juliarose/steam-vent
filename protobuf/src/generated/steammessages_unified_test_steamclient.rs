// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_unified_test.steamclient.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

#[doc = "Some description - MessageToClient."]
// @@protoc_insertion_point(message:CMsgTest_MessageToClient_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgTest_MessageToClient_Request {
    // message fields
    // @@protoc_insertion_point(field:CMsgTest_MessageToClient_Request.some_text)
    pub some_text: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgTest_MessageToClient_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgTest_MessageToClient_Request {
    fn default() -> &'a CMsgTest_MessageToClient_Request {
        <CMsgTest_MessageToClient_Request as ::protobuf::Message>::default_instance()
    }
}

impl CMsgTest_MessageToClient_Request {
    pub fn new() -> CMsgTest_MessageToClient_Request {
        ::std::default::Default::default()
    }

    // optional string some_text = 1;

    pub fn some_text(&self) -> &str {
        match self.some_text.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_some_text(&mut self) {
        self.some_text = ::std::option::Option::None;
    }

    pub fn has_some_text(&self) -> bool {
        self.some_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_some_text(&mut self, v: ::std::string::String) {
        self.some_text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_some_text(&mut self) -> &mut ::std::string::String {
        if self.some_text.is_none() {
            self.some_text = ::std::option::Option::Some(::std::string::String::new());
        }
        self.some_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_some_text(&mut self) -> ::std::string::String {
        self.some_text.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CMsgTest_MessageToClient_Request {
    const NAME: &'static str = "CMsgTest_MessageToClient_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.some_text = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.some_text.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.some_text.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgTest_MessageToClient_Request {
        CMsgTest_MessageToClient_Request::new()
    }

    fn clear(&mut self) {
        self.some_text = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgTest_MessageToClient_Request {
        static instance: CMsgTest_MessageToClient_Request = CMsgTest_MessageToClient_Request {
            some_text: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgTest_MessageToClient_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgTest_MessageToClient_Response {
    // message fields
    // @@protoc_insertion_point(field:CMsgTest_MessageToClient_Response.some_text)
    pub some_text: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgTest_MessageToClient_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgTest_MessageToClient_Response {
    fn default() -> &'a CMsgTest_MessageToClient_Response {
        <CMsgTest_MessageToClient_Response as ::protobuf::Message>::default_instance()
    }
}

impl CMsgTest_MessageToClient_Response {
    pub fn new() -> CMsgTest_MessageToClient_Response {
        ::std::default::Default::default()
    }

    // optional string some_text = 1;

    pub fn some_text(&self) -> &str {
        match self.some_text.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_some_text(&mut self) {
        self.some_text = ::std::option::Option::None;
    }

    pub fn has_some_text(&self) -> bool {
        self.some_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_some_text(&mut self, v: ::std::string::String) {
        self.some_text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_some_text(&mut self) -> &mut ::std::string::String {
        if self.some_text.is_none() {
            self.some_text = ::std::option::Option::Some(::std::string::String::new());
        }
        self.some_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_some_text(&mut self) -> ::std::string::String {
        self.some_text.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CMsgTest_MessageToClient_Response {
    const NAME: &'static str = "CMsgTest_MessageToClient_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.some_text = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.some_text.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.some_text.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgTest_MessageToClient_Response {
        CMsgTest_MessageToClient_Response::new()
    }

    fn clear(&mut self) {
        self.some_text = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgTest_MessageToClient_Response {
        static instance: CMsgTest_MessageToClient_Response = CMsgTest_MessageToClient_Response {
            some_text: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Some description - NotifyClient."]
// @@protoc_insertion_point(message:CMsgTest_NotifyClient_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgTest_NotifyClient_Notification {
    // message fields
    // @@protoc_insertion_point(field:CMsgTest_NotifyClient_Notification.some_text)
    pub some_text: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgTest_NotifyClient_Notification.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgTest_NotifyClient_Notification {
    fn default() -> &'a CMsgTest_NotifyClient_Notification {
        <CMsgTest_NotifyClient_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CMsgTest_NotifyClient_Notification {
    pub fn new() -> CMsgTest_NotifyClient_Notification {
        ::std::default::Default::default()
    }

    // optional string some_text = 1;

    pub fn some_text(&self) -> &str {
        match self.some_text.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_some_text(&mut self) {
        self.some_text = ::std::option::Option::None;
    }

    pub fn has_some_text(&self) -> bool {
        self.some_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_some_text(&mut self, v: ::std::string::String) {
        self.some_text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_some_text(&mut self) -> &mut ::std::string::String {
        if self.some_text.is_none() {
            self.some_text = ::std::option::Option::Some(::std::string::String::new());
        }
        self.some_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_some_text(&mut self) -> ::std::string::String {
        self.some_text.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CMsgTest_NotifyClient_Notification {
    const NAME: &'static str = "CMsgTest_NotifyClient_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.some_text = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.some_text.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.some_text.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgTest_NotifyClient_Notification {
        CMsgTest_NotifyClient_Notification::new()
    }

    fn clear(&mut self) {
        self.some_text = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgTest_NotifyClient_Notification {
        static instance: CMsgTest_NotifyClient_Notification = CMsgTest_NotifyClient_Notification {
            some_text: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Some description - MessageToServer."]
// @@protoc_insertion_point(message:CMsgTest_MessageToServer_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgTest_MessageToServer_Request {
    // message fields
    // @@protoc_insertion_point(field:CMsgTest_MessageToServer_Request.some_text)
    pub some_text: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgTest_MessageToServer_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgTest_MessageToServer_Request {
    fn default() -> &'a CMsgTest_MessageToServer_Request {
        <CMsgTest_MessageToServer_Request as ::protobuf::Message>::default_instance()
    }
}

impl CMsgTest_MessageToServer_Request {
    pub fn new() -> CMsgTest_MessageToServer_Request {
        ::std::default::Default::default()
    }

    // optional string some_text = 1;

    pub fn some_text(&self) -> &str {
        match self.some_text.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_some_text(&mut self) {
        self.some_text = ::std::option::Option::None;
    }

    pub fn has_some_text(&self) -> bool {
        self.some_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_some_text(&mut self, v: ::std::string::String) {
        self.some_text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_some_text(&mut self) -> &mut ::std::string::String {
        if self.some_text.is_none() {
            self.some_text = ::std::option::Option::Some(::std::string::String::new());
        }
        self.some_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_some_text(&mut self) -> ::std::string::String {
        self.some_text.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CMsgTest_MessageToServer_Request {
    const NAME: &'static str = "CMsgTest_MessageToServer_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.some_text = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.some_text.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.some_text.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgTest_MessageToServer_Request {
        CMsgTest_MessageToServer_Request::new()
    }

    fn clear(&mut self) {
        self.some_text = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgTest_MessageToServer_Request {
        static instance: CMsgTest_MessageToServer_Request = CMsgTest_MessageToServer_Request {
            some_text: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgTest_MessageToServer_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgTest_MessageToServer_Response {
    // message fields
    // @@protoc_insertion_point(field:CMsgTest_MessageToServer_Response.some_text)
    pub some_text: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgTest_MessageToServer_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgTest_MessageToServer_Response {
    fn default() -> &'a CMsgTest_MessageToServer_Response {
        <CMsgTest_MessageToServer_Response as ::protobuf::Message>::default_instance()
    }
}

impl CMsgTest_MessageToServer_Response {
    pub fn new() -> CMsgTest_MessageToServer_Response {
        ::std::default::Default::default()
    }

    // optional string some_text = 1;

    pub fn some_text(&self) -> &str {
        match self.some_text.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_some_text(&mut self) {
        self.some_text = ::std::option::Option::None;
    }

    pub fn has_some_text(&self) -> bool {
        self.some_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_some_text(&mut self, v: ::std::string::String) {
        self.some_text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_some_text(&mut self) -> &mut ::std::string::String {
        if self.some_text.is_none() {
            self.some_text = ::std::option::Option::Some(::std::string::String::new());
        }
        self.some_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_some_text(&mut self) -> ::std::string::String {
        self.some_text.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CMsgTest_MessageToServer_Response {
    const NAME: &'static str = "CMsgTest_MessageToServer_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.some_text = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.some_text.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.some_text.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgTest_MessageToServer_Response {
        CMsgTest_MessageToServer_Response::new()
    }

    fn clear(&mut self) {
        self.some_text = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgTest_MessageToServer_Response {
        static instance: CMsgTest_MessageToServer_Response = CMsgTest_MessageToServer_Response {
            some_text: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Some description - NotifyServer."]
// @@protoc_insertion_point(message:CMsgTest_NotifyServer_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgTest_NotifyServer_Notification {
    // message fields
    // @@protoc_insertion_point(field:CMsgTest_NotifyServer_Notification.some_text)
    pub some_text: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgTest_NotifyServer_Notification.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgTest_NotifyServer_Notification {
    fn default() -> &'a CMsgTest_NotifyServer_Notification {
        <CMsgTest_NotifyServer_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CMsgTest_NotifyServer_Notification {
    pub fn new() -> CMsgTest_NotifyServer_Notification {
        ::std::default::Default::default()
    }

    // optional string some_text = 1;

    pub fn some_text(&self) -> &str {
        match self.some_text.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_some_text(&mut self) {
        self.some_text = ::std::option::Option::None;
    }

    pub fn has_some_text(&self) -> bool {
        self.some_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_some_text(&mut self, v: ::std::string::String) {
        self.some_text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_some_text(&mut self) -> &mut ::std::string::String {
        if self.some_text.is_none() {
            self.some_text = ::std::option::Option::Some(::std::string::String::new());
        }
        self.some_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_some_text(&mut self) -> ::std::string::String {
        self.some_text.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CMsgTest_NotifyServer_Notification {
    const NAME: &'static str = "CMsgTest_NotifyServer_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.some_text = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.some_text.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.some_text.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgTest_NotifyServer_Notification {
        CMsgTest_NotifyServer_Notification::new()
    }

    fn clear(&mut self) {
        self.some_text = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgTest_NotifyServer_Notification {
        static instance: CMsgTest_NotifyServer_Notification = CMsgTest_NotifyServer_Notification {
            some_text: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgTest_NoBody_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgTest_NoBody_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CMsgTest_NoBody_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgTest_NoBody_Request {
    fn default() -> &'a CMsgTest_NoBody_Request {
        <CMsgTest_NoBody_Request as ::protobuf::Message>::default_instance()
    }
}

impl CMsgTest_NoBody_Request {
    pub fn new() -> CMsgTest_NoBody_Request {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CMsgTest_NoBody_Request {
    const NAME: &'static str = "CMsgTest_NoBody_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgTest_NoBody_Request {
        CMsgTest_NoBody_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgTest_NoBody_Request {
        static instance: CMsgTest_NoBody_Request = CMsgTest_NoBody_Request {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgTest_CallClient_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgTest_CallClient_Response {
    // message fields
    // @@protoc_insertion_point(field:CMsgTest_CallClient_Response.testvalue)
    pub testvalue: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgTest_CallClient_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgTest_CallClient_Response {
    fn default() -> &'a CMsgTest_CallClient_Response {
        <CMsgTest_CallClient_Response as ::protobuf::Message>::default_instance()
    }
}

impl CMsgTest_CallClient_Response {
    pub fn new() -> CMsgTest_CallClient_Response {
        ::std::default::Default::default()
    }

    // optional int32 testvalue = 1;

    pub fn testvalue(&self) -> i32 {
        self.testvalue.unwrap_or(0)
    }

    pub fn clear_testvalue(&mut self) {
        self.testvalue = ::std::option::Option::None;
    }

    pub fn has_testvalue(&self) -> bool {
        self.testvalue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_testvalue(&mut self, v: i32) {
        self.testvalue = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CMsgTest_CallClient_Response {
    const NAME: &'static str = "CMsgTest_CallClient_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.testvalue = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.testvalue {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.testvalue {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgTest_CallClient_Response {
        CMsgTest_CallClient_Response::new()
    }

    fn clear(&mut self) {
        self.testvalue = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgTest_CallClient_Response {
        static instance: CMsgTest_CallClient_Response = CMsgTest_CallClient_Response {
            testvalue: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}
#[allow(unused_imports)]
use crate::steammessages_base::*;
#[allow(unused_imports)]
use crate::steammessages_unified_base_steamclient::*;
impl crate::RpcMessage for CMsgTest_MessageToClient_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CMsgTest_MessageToClient_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CMsgTest_NotifyClient_Notification {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CMsgTest_MessageToServer_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CMsgTest_MessageToServer_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CMsgTest_NotifyServer_Notification {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CMsgTest_NoBody_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CMsgTest_CallClient_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
///
struct TestSteamClient {}
impl crate::RpcService for TestSteamClient {
    const SERVICE_NAME: &'static str = "TestSteamClient";
}
///
struct TestServerFromClient {}
impl crate::RpcService for TestServerFromClient {
    const SERVICE_NAME: &'static str = "TestServerFromClient";
}
///
struct TestExternalPrivilege {}
impl crate::RpcService for TestExternalPrivilege {
    const SERVICE_NAME: &'static str = "TestExternalPrivilege";
}
impl crate::RpcMethod for CMsgTest_MessageToClient_Request {
    const METHOD_NAME: &'static str = "TestSteamClient.MessageToClient#1";
    type Response = CMsgTest_MessageToClient_Response;
}
impl crate::RpcMethod for CMsgTest_MessageToServer_Request {
    const METHOD_NAME: &'static str = "TestServerFromClient.MessageToServer#1";
    type Response = CMsgTest_MessageToServer_Response;
}
impl crate::RpcMethod for CMsgTest_NoBody_Request {
    const METHOD_NAME: &'static str = "TestExternalPrivilege.CallClient#1";
    type Response = CMsgTest_CallClient_Response;
}
impl crate::RpcMethod for CMsgTest_NotifyClient_Notification {
    const METHOD_NAME: &'static str = "TestSteamClient.NotifyClient#1";
    type Response = ();
}
impl crate::RpcMethod for CMsgTest_NotifyServer_Notification {
    const METHOD_NAME: &'static str = "TestServerFromClient.NotifyServer#1";
    type Response = ();
}
