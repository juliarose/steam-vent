// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_clientserver_userstats.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:CMsgClientGetUserStats)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientGetUserStats {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientGetUserStats.game_id)
    pub game_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgClientGetUserStats.crc_stats)
    pub crc_stats: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientGetUserStats.schema_local_version)
    pub schema_local_version: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgClientGetUserStats.steam_id_for_user)
    pub steam_id_for_user: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientGetUserStats.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientGetUserStats {
    fn default() -> &'a CMsgClientGetUserStats {
        <CMsgClientGetUserStats as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientGetUserStats {
    pub fn new() -> CMsgClientGetUserStats {
        ::std::default::Default::default()
    }

    // optional fixed64 game_id = 1;

    pub fn game_id(&self) -> u64 {
        self.game_id.unwrap_or(0)
    }

    pub fn clear_game_id(&mut self) {
        self.game_id = ::std::option::Option::None;
    }

    pub fn has_game_id(&self) -> bool {
        self.game_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_id(&mut self, v: u64) {
        self.game_id = ::std::option::Option::Some(v);
    }

    // optional uint32 crc_stats = 2;

    pub fn crc_stats(&self) -> u32 {
        self.crc_stats.unwrap_or(0)
    }

    pub fn clear_crc_stats(&mut self) {
        self.crc_stats = ::std::option::Option::None;
    }

    pub fn has_crc_stats(&self) -> bool {
        self.crc_stats.is_some()
    }

    // Param is passed by value, moved
    pub fn set_crc_stats(&mut self, v: u32) {
        self.crc_stats = ::std::option::Option::Some(v);
    }

    // optional int32 schema_local_version = 3;

    pub fn schema_local_version(&self) -> i32 {
        self.schema_local_version.unwrap_or(0)
    }

    pub fn clear_schema_local_version(&mut self) {
        self.schema_local_version = ::std::option::Option::None;
    }

    pub fn has_schema_local_version(&self) -> bool {
        self.schema_local_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schema_local_version(&mut self, v: i32) {
        self.schema_local_version = ::std::option::Option::Some(v);
    }

    // optional fixed64 steam_id_for_user = 4;

    pub fn steam_id_for_user(&self) -> u64 {
        self.steam_id_for_user.unwrap_or(0)
    }

    pub fn clear_steam_id_for_user(&mut self) {
        self.steam_id_for_user = ::std::option::Option::None;
    }

    pub fn has_steam_id_for_user(&self) -> bool {
        self.steam_id_for_user.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_id_for_user(&mut self, v: u64) {
        self.steam_id_for_user = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CMsgClientGetUserStats {
    const NAME: &'static str = "CMsgClientGetUserStats";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.game_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.crc_stats = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.schema_local_version = ::std::option::Option::Some(is.read_int32()?);
                },
                33 => {
                    self.steam_id_for_user = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.game_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.crc_stats {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.schema_local_version {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        if let Some(v) = self.steam_id_for_user {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.game_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.crc_stats {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.schema_local_version {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.steam_id_for_user {
            os.write_fixed64(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientGetUserStats {
        CMsgClientGetUserStats::new()
    }

    fn clear(&mut self) {
        self.game_id = ::std::option::Option::None;
        self.crc_stats = ::std::option::Option::None;
        self.schema_local_version = ::std::option::Option::None;
        self.steam_id_for_user = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientGetUserStats {
        static instance: CMsgClientGetUserStats = CMsgClientGetUserStats {
            game_id: ::std::option::Option::None,
            crc_stats: ::std::option::Option::None,
            schema_local_version: ::std::option::Option::None,
            steam_id_for_user: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientGetUserStatsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientGetUserStatsResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientGetUserStatsResponse.game_id)
    pub game_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgClientGetUserStatsResponse.eresult)
    pub eresult: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgClientGetUserStatsResponse.crc_stats)
    pub crc_stats: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientGetUserStatsResponse.schema)
    pub schema: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:CMsgClientGetUserStatsResponse.stats)
    pub stats: ::std::vec::Vec<cmsg_client_get_user_stats_response::Stats>,
    // @@protoc_insertion_point(field:CMsgClientGetUserStatsResponse.achievement_blocks)
    pub achievement_blocks: ::std::vec::Vec<cmsg_client_get_user_stats_response::Achievement_Blocks>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientGetUserStatsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientGetUserStatsResponse {
    fn default() -> &'a CMsgClientGetUserStatsResponse {
        <CMsgClientGetUserStatsResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientGetUserStatsResponse {
    pub fn new() -> CMsgClientGetUserStatsResponse {
        ::std::default::Default::default()
    }

    // optional fixed64 game_id = 1;

    pub fn game_id(&self) -> u64 {
        self.game_id.unwrap_or(0)
    }

    pub fn clear_game_id(&mut self) {
        self.game_id = ::std::option::Option::None;
    }

    pub fn has_game_id(&self) -> bool {
        self.game_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_id(&mut self, v: u64) {
        self.game_id = ::std::option::Option::Some(v);
    }

    // optional int32 eresult = 2;

    pub fn eresult(&self) -> i32 {
        self.eresult.unwrap_or(2i32)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    // optional uint32 crc_stats = 3;

    pub fn crc_stats(&self) -> u32 {
        self.crc_stats.unwrap_or(0)
    }

    pub fn clear_crc_stats(&mut self) {
        self.crc_stats = ::std::option::Option::None;
    }

    pub fn has_crc_stats(&self) -> bool {
        self.crc_stats.is_some()
    }

    // Param is passed by value, moved
    pub fn set_crc_stats(&mut self, v: u32) {
        self.crc_stats = ::std::option::Option::Some(v);
    }

    // optional bytes schema = 4;

    pub fn schema(&self) -> &[u8] {
        match self.schema.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_schema(&mut self) {
        self.schema = ::std::option::Option::None;
    }

    pub fn has_schema(&self) -> bool {
        self.schema.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schema(&mut self, v: ::std::vec::Vec<u8>) {
        self.schema = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schema(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.schema.is_none() {
            self.schema = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.schema.as_mut().unwrap()
    }

    // Take field
    pub fn take_schema(&mut self) -> ::std::vec::Vec<u8> {
        self.schema.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CMsgClientGetUserStatsResponse {
    const NAME: &'static str = "CMsgClientGetUserStatsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.game_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.eresult = ::std::option::Option::Some(is.read_int32()?);
                },
                24 => {
                    self.crc_stats = ::std::option::Option::Some(is.read_uint32()?);
                },
                34 => {
                    self.schema = ::std::option::Option::Some(is.read_bytes()?);
                },
                42 => {
                    self.stats.push(is.read_message()?);
                },
                50 => {
                    self.achievement_blocks.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.game_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.eresult {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.crc_stats {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.schema.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        for value in &self.stats {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.achievement_blocks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.game_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.eresult {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.crc_stats {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.schema.as_ref() {
            os.write_bytes(4, v)?;
        }
        for v in &self.stats {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        for v in &self.achievement_blocks {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientGetUserStatsResponse {
        CMsgClientGetUserStatsResponse::new()
    }

    fn clear(&mut self) {
        self.game_id = ::std::option::Option::None;
        self.eresult = ::std::option::Option::None;
        self.crc_stats = ::std::option::Option::None;
        self.schema = ::std::option::Option::None;
        self.stats.clear();
        self.achievement_blocks.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientGetUserStatsResponse {
        static instance: CMsgClientGetUserStatsResponse = CMsgClientGetUserStatsResponse {
            game_id: ::std::option::Option::None,
            eresult: ::std::option::Option::None,
            crc_stats: ::std::option::Option::None,
            schema: ::std::option::Option::None,
            stats: ::std::vec::Vec::new(),
            achievement_blocks: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientGetUserStatsResponse`
pub mod cmsg_client_get_user_stats_response {
    // @@protoc_insertion_point(message:CMsgClientGetUserStatsResponse.Stats)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Stats {
        // message fields
        // @@protoc_insertion_point(field:CMsgClientGetUserStatsResponse.Stats.stat_id)
        pub stat_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientGetUserStatsResponse.Stats.stat_value)
        pub stat_value: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgClientGetUserStatsResponse.Stats.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Stats {
        fn default() -> &'a Stats {
            <Stats as ::protobuf::Message>::default_instance()
        }
    }

    impl Stats {
        pub fn new() -> Stats {
            ::std::default::Default::default()
        }

        // optional uint32 stat_id = 1;

        pub fn stat_id(&self) -> u32 {
            self.stat_id.unwrap_or(0)
        }

        pub fn clear_stat_id(&mut self) {
            self.stat_id = ::std::option::Option::None;
        }

        pub fn has_stat_id(&self) -> bool {
            self.stat_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_stat_id(&mut self, v: u32) {
            self.stat_id = ::std::option::Option::Some(v);
        }

        // optional uint32 stat_value = 2;

        pub fn stat_value(&self) -> u32 {
            self.stat_value.unwrap_or(0)
        }

        pub fn clear_stat_value(&mut self) {
            self.stat_value = ::std::option::Option::None;
        }

        pub fn has_stat_value(&self) -> bool {
            self.stat_value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_stat_value(&mut self, v: u32) {
            self.stat_value = ::std::option::Option::Some(v);
        }
    }

    impl ::protobuf::Message for Stats {
        const NAME: &'static str = "Stats";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.stat_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.stat_value = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.stat_id {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.stat_value {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.stat_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.stat_value {
                os.write_uint32(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Stats {
            Stats::new()
        }

        fn clear(&mut self) {
            self.stat_id = ::std::option::Option::None;
            self.stat_value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Stats {
            static instance: Stats = Stats {
                stat_id: ::std::option::Option::None,
                stat_value: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CMsgClientGetUserStatsResponse.Achievement_Blocks)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Achievement_Blocks {
        // message fields
        // @@protoc_insertion_point(field:CMsgClientGetUserStatsResponse.Achievement_Blocks.achievement_id)
        pub achievement_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientGetUserStatsResponse.Achievement_Blocks.unlock_time)
        pub unlock_time: ::std::vec::Vec<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgClientGetUserStatsResponse.Achievement_Blocks.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Achievement_Blocks {
        fn default() -> &'a Achievement_Blocks {
            <Achievement_Blocks as ::protobuf::Message>::default_instance()
        }
    }

    impl Achievement_Blocks {
        pub fn new() -> Achievement_Blocks {
            ::std::default::Default::default()
        }

        // optional uint32 achievement_id = 1;

        pub fn achievement_id(&self) -> u32 {
            self.achievement_id.unwrap_or(0)
        }

        pub fn clear_achievement_id(&mut self) {
            self.achievement_id = ::std::option::Option::None;
        }

        pub fn has_achievement_id(&self) -> bool {
            self.achievement_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_achievement_id(&mut self, v: u32) {
            self.achievement_id = ::std::option::Option::Some(v);
        }
    }

    impl ::protobuf::Message for Achievement_Blocks {
        const NAME: &'static str = "Achievement_Blocks";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.achievement_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        is.read_repeated_packed_fixed32_into(&mut self.unlock_time)?;
                    },
                    21 => {
                        self.unlock_time.push(is.read_fixed32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.achievement_id {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            my_size += 5 * self.unlock_time.len() as u64;
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.achievement_id {
                os.write_uint32(1, v)?;
            }
            for v in &self.unlock_time {
                os.write_fixed32(2, *v)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Achievement_Blocks {
            Achievement_Blocks::new()
        }

        fn clear(&mut self) {
            self.achievement_id = ::std::option::Option::None;
            self.unlock_time.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Achievement_Blocks {
            static instance: Achievement_Blocks = Achievement_Blocks {
                achievement_id: ::std::option::Option::None,
                unlock_time: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgClientStoreUserStatsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientStoreUserStatsResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientStoreUserStatsResponse.game_id)
    pub game_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgClientStoreUserStatsResponse.eresult)
    pub eresult: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgClientStoreUserStatsResponse.crc_stats)
    pub crc_stats: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientStoreUserStatsResponse.stats_failed_validation)
    pub stats_failed_validation: ::std::vec::Vec<cmsg_client_store_user_stats_response::Stats_Failed_Validation>,
    // @@protoc_insertion_point(field:CMsgClientStoreUserStatsResponse.stats_out_of_date)
    pub stats_out_of_date: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientStoreUserStatsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientStoreUserStatsResponse {
    fn default() -> &'a CMsgClientStoreUserStatsResponse {
        <CMsgClientStoreUserStatsResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientStoreUserStatsResponse {
    pub fn new() -> CMsgClientStoreUserStatsResponse {
        ::std::default::Default::default()
    }

    // optional fixed64 game_id = 1;

    pub fn game_id(&self) -> u64 {
        self.game_id.unwrap_or(0)
    }

    pub fn clear_game_id(&mut self) {
        self.game_id = ::std::option::Option::None;
    }

    pub fn has_game_id(&self) -> bool {
        self.game_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_id(&mut self, v: u64) {
        self.game_id = ::std::option::Option::Some(v);
    }

    // optional int32 eresult = 2;

    pub fn eresult(&self) -> i32 {
        self.eresult.unwrap_or(2i32)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    // optional uint32 crc_stats = 3;

    pub fn crc_stats(&self) -> u32 {
        self.crc_stats.unwrap_or(0)
    }

    pub fn clear_crc_stats(&mut self) {
        self.crc_stats = ::std::option::Option::None;
    }

    pub fn has_crc_stats(&self) -> bool {
        self.crc_stats.is_some()
    }

    // Param is passed by value, moved
    pub fn set_crc_stats(&mut self, v: u32) {
        self.crc_stats = ::std::option::Option::Some(v);
    }

    // optional bool stats_out_of_date = 5;

    pub fn stats_out_of_date(&self) -> bool {
        self.stats_out_of_date.unwrap_or(false)
    }

    pub fn clear_stats_out_of_date(&mut self) {
        self.stats_out_of_date = ::std::option::Option::None;
    }

    pub fn has_stats_out_of_date(&self) -> bool {
        self.stats_out_of_date.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stats_out_of_date(&mut self, v: bool) {
        self.stats_out_of_date = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CMsgClientStoreUserStatsResponse {
    const NAME: &'static str = "CMsgClientStoreUserStatsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.game_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.eresult = ::std::option::Option::Some(is.read_int32()?);
                },
                24 => {
                    self.crc_stats = ::std::option::Option::Some(is.read_uint32()?);
                },
                34 => {
                    self.stats_failed_validation.push(is.read_message()?);
                },
                40 => {
                    self.stats_out_of_date = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.game_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.eresult {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.crc_stats {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        for value in &self.stats_failed_validation {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.stats_out_of_date {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.game_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.eresult {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.crc_stats {
            os.write_uint32(3, v)?;
        }
        for v in &self.stats_failed_validation {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if let Some(v) = self.stats_out_of_date {
            os.write_bool(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientStoreUserStatsResponse {
        CMsgClientStoreUserStatsResponse::new()
    }

    fn clear(&mut self) {
        self.game_id = ::std::option::Option::None;
        self.eresult = ::std::option::Option::None;
        self.crc_stats = ::std::option::Option::None;
        self.stats_failed_validation.clear();
        self.stats_out_of_date = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientStoreUserStatsResponse {
        static instance: CMsgClientStoreUserStatsResponse = CMsgClientStoreUserStatsResponse {
            game_id: ::std::option::Option::None,
            eresult: ::std::option::Option::None,
            crc_stats: ::std::option::Option::None,
            stats_failed_validation: ::std::vec::Vec::new(),
            stats_out_of_date: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientStoreUserStatsResponse`
pub mod cmsg_client_store_user_stats_response {
    // @@protoc_insertion_point(message:CMsgClientStoreUserStatsResponse.Stats_Failed_Validation)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Stats_Failed_Validation {
        // message fields
        // @@protoc_insertion_point(field:CMsgClientStoreUserStatsResponse.Stats_Failed_Validation.stat_id)
        pub stat_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientStoreUserStatsResponse.Stats_Failed_Validation.reverted_stat_value)
        pub reverted_stat_value: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgClientStoreUserStatsResponse.Stats_Failed_Validation.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Stats_Failed_Validation {
        fn default() -> &'a Stats_Failed_Validation {
            <Stats_Failed_Validation as ::protobuf::Message>::default_instance()
        }
    }

    impl Stats_Failed_Validation {
        pub fn new() -> Stats_Failed_Validation {
            ::std::default::Default::default()
        }

        // optional uint32 stat_id = 1;

        pub fn stat_id(&self) -> u32 {
            self.stat_id.unwrap_or(0)
        }

        pub fn clear_stat_id(&mut self) {
            self.stat_id = ::std::option::Option::None;
        }

        pub fn has_stat_id(&self) -> bool {
            self.stat_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_stat_id(&mut self, v: u32) {
            self.stat_id = ::std::option::Option::Some(v);
        }

        // optional uint32 reverted_stat_value = 2;

        pub fn reverted_stat_value(&self) -> u32 {
            self.reverted_stat_value.unwrap_or(0)
        }

        pub fn clear_reverted_stat_value(&mut self) {
            self.reverted_stat_value = ::std::option::Option::None;
        }

        pub fn has_reverted_stat_value(&self) -> bool {
            self.reverted_stat_value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_reverted_stat_value(&mut self, v: u32) {
            self.reverted_stat_value = ::std::option::Option::Some(v);
        }
    }

    impl ::protobuf::Message for Stats_Failed_Validation {
        const NAME: &'static str = "Stats_Failed_Validation";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.stat_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.reverted_stat_value = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.stat_id {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.reverted_stat_value {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.stat_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.reverted_stat_value {
                os.write_uint32(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Stats_Failed_Validation {
            Stats_Failed_Validation::new()
        }

        fn clear(&mut self) {
            self.stat_id = ::std::option::Option::None;
            self.reverted_stat_value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Stats_Failed_Validation {
            static instance: Stats_Failed_Validation = Stats_Failed_Validation {
                stat_id: ::std::option::Option::None,
                reverted_stat_value: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgClientStoreUserStats2)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientStoreUserStats2 {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientStoreUserStats2.game_id)
    pub game_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgClientStoreUserStats2.settor_steam_id)
    pub settor_steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgClientStoreUserStats2.settee_steam_id)
    pub settee_steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgClientStoreUserStats2.crc_stats)
    pub crc_stats: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientStoreUserStats2.explicit_reset)
    pub explicit_reset: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgClientStoreUserStats2.stats)
    pub stats: ::std::vec::Vec<cmsg_client_store_user_stats2::Stats>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientStoreUserStats2.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientStoreUserStats2 {
    fn default() -> &'a CMsgClientStoreUserStats2 {
        <CMsgClientStoreUserStats2 as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientStoreUserStats2 {
    pub fn new() -> CMsgClientStoreUserStats2 {
        ::std::default::Default::default()
    }

    // optional fixed64 game_id = 1;

    pub fn game_id(&self) -> u64 {
        self.game_id.unwrap_or(0)
    }

    pub fn clear_game_id(&mut self) {
        self.game_id = ::std::option::Option::None;
    }

    pub fn has_game_id(&self) -> bool {
        self.game_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_id(&mut self, v: u64) {
        self.game_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 settor_steam_id = 2;

    pub fn settor_steam_id(&self) -> u64 {
        self.settor_steam_id.unwrap_or(0)
    }

    pub fn clear_settor_steam_id(&mut self) {
        self.settor_steam_id = ::std::option::Option::None;
    }

    pub fn has_settor_steam_id(&self) -> bool {
        self.settor_steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_settor_steam_id(&mut self, v: u64) {
        self.settor_steam_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 settee_steam_id = 3;

    pub fn settee_steam_id(&self) -> u64 {
        self.settee_steam_id.unwrap_or(0)
    }

    pub fn clear_settee_steam_id(&mut self) {
        self.settee_steam_id = ::std::option::Option::None;
    }

    pub fn has_settee_steam_id(&self) -> bool {
        self.settee_steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_settee_steam_id(&mut self, v: u64) {
        self.settee_steam_id = ::std::option::Option::Some(v);
    }

    // optional uint32 crc_stats = 4;

    pub fn crc_stats(&self) -> u32 {
        self.crc_stats.unwrap_or(0)
    }

    pub fn clear_crc_stats(&mut self) {
        self.crc_stats = ::std::option::Option::None;
    }

    pub fn has_crc_stats(&self) -> bool {
        self.crc_stats.is_some()
    }

    // Param is passed by value, moved
    pub fn set_crc_stats(&mut self, v: u32) {
        self.crc_stats = ::std::option::Option::Some(v);
    }

    // optional bool explicit_reset = 5;

    pub fn explicit_reset(&self) -> bool {
        self.explicit_reset.unwrap_or(false)
    }

    pub fn clear_explicit_reset(&mut self) {
        self.explicit_reset = ::std::option::Option::None;
    }

    pub fn has_explicit_reset(&self) -> bool {
        self.explicit_reset.is_some()
    }

    // Param is passed by value, moved
    pub fn set_explicit_reset(&mut self, v: bool) {
        self.explicit_reset = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CMsgClientStoreUserStats2 {
    const NAME: &'static str = "CMsgClientStoreUserStats2";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.game_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.settor_steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                25 => {
                    self.settee_steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                32 => {
                    self.crc_stats = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.explicit_reset = ::std::option::Option::Some(is.read_bool()?);
                },
                50 => {
                    self.stats.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.game_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.settor_steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.settee_steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.crc_stats {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.explicit_reset {
            my_size += 1 + 1;
        }
        for value in &self.stats {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.game_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.settor_steam_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.settee_steam_id {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.crc_stats {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.explicit_reset {
            os.write_bool(5, v)?;
        }
        for v in &self.stats {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientStoreUserStats2 {
        CMsgClientStoreUserStats2::new()
    }

    fn clear(&mut self) {
        self.game_id = ::std::option::Option::None;
        self.settor_steam_id = ::std::option::Option::None;
        self.settee_steam_id = ::std::option::Option::None;
        self.crc_stats = ::std::option::Option::None;
        self.explicit_reset = ::std::option::Option::None;
        self.stats.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientStoreUserStats2 {
        static instance: CMsgClientStoreUserStats2 = CMsgClientStoreUserStats2 {
            game_id: ::std::option::Option::None,
            settor_steam_id: ::std::option::Option::None,
            settee_steam_id: ::std::option::Option::None,
            crc_stats: ::std::option::Option::None,
            explicit_reset: ::std::option::Option::None,
            stats: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientStoreUserStats2`
pub mod cmsg_client_store_user_stats2 {
    // @@protoc_insertion_point(message:CMsgClientStoreUserStats2.Stats)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Stats {
        // message fields
        // @@protoc_insertion_point(field:CMsgClientStoreUserStats2.Stats.stat_id)
        pub stat_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientStoreUserStats2.Stats.stat_value)
        pub stat_value: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgClientStoreUserStats2.Stats.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Stats {
        fn default() -> &'a Stats {
            <Stats as ::protobuf::Message>::default_instance()
        }
    }

    impl Stats {
        pub fn new() -> Stats {
            ::std::default::Default::default()
        }

        // optional uint32 stat_id = 1;

        pub fn stat_id(&self) -> u32 {
            self.stat_id.unwrap_or(0)
        }

        pub fn clear_stat_id(&mut self) {
            self.stat_id = ::std::option::Option::None;
        }

        pub fn has_stat_id(&self) -> bool {
            self.stat_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_stat_id(&mut self, v: u32) {
            self.stat_id = ::std::option::Option::Some(v);
        }

        // optional uint32 stat_value = 2;

        pub fn stat_value(&self) -> u32 {
            self.stat_value.unwrap_or(0)
        }

        pub fn clear_stat_value(&mut self) {
            self.stat_value = ::std::option::Option::None;
        }

        pub fn has_stat_value(&self) -> bool {
            self.stat_value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_stat_value(&mut self, v: u32) {
            self.stat_value = ::std::option::Option::Some(v);
        }
    }

    impl ::protobuf::Message for Stats {
        const NAME: &'static str = "Stats";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.stat_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.stat_value = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.stat_id {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.stat_value {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.stat_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.stat_value {
                os.write_uint32(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Stats {
            Stats::new()
        }

        fn clear(&mut self) {
            self.stat_id = ::std::option::Option::None;
            self.stat_value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Stats {
            static instance: Stats = Stats {
                stat_id: ::std::option::Option::None,
                stat_value: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgClientStatsUpdated)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientStatsUpdated {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientStatsUpdated.steam_id)
    pub steam_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgClientStatsUpdated.game_id)
    pub game_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgClientStatsUpdated.crc_stats)
    pub crc_stats: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientStatsUpdated.updated_stats)
    pub updated_stats: ::std::vec::Vec<cmsg_client_stats_updated::Updated_Stats>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientStatsUpdated.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientStatsUpdated {
    fn default() -> &'a CMsgClientStatsUpdated {
        <CMsgClientStatsUpdated as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientStatsUpdated {
    pub fn new() -> CMsgClientStatsUpdated {
        ::std::default::Default::default()
    }

    // optional fixed64 steam_id = 1;

    pub fn steam_id(&self) -> u64 {
        self.steam_id.unwrap_or(0)
    }

    pub fn clear_steam_id(&mut self) {
        self.steam_id = ::std::option::Option::None;
    }

    pub fn has_steam_id(&self) -> bool {
        self.steam_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_id(&mut self, v: u64) {
        self.steam_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 game_id = 2;

    pub fn game_id(&self) -> u64 {
        self.game_id.unwrap_or(0)
    }

    pub fn clear_game_id(&mut self) {
        self.game_id = ::std::option::Option::None;
    }

    pub fn has_game_id(&self) -> bool {
        self.game_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_id(&mut self, v: u64) {
        self.game_id = ::std::option::Option::Some(v);
    }

    // optional uint32 crc_stats = 3;

    pub fn crc_stats(&self) -> u32 {
        self.crc_stats.unwrap_or(0)
    }

    pub fn clear_crc_stats(&mut self) {
        self.crc_stats = ::std::option::Option::None;
    }

    pub fn has_crc_stats(&self) -> bool {
        self.crc_stats.is_some()
    }

    // Param is passed by value, moved
    pub fn set_crc_stats(&mut self, v: u32) {
        self.crc_stats = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CMsgClientStatsUpdated {
    const NAME: &'static str = "CMsgClientStatsUpdated";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steam_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.game_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                24 => {
                    self.crc_stats = ::std::option::Option::Some(is.read_uint32()?);
                },
                34 => {
                    self.updated_stats.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steam_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.game_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.crc_stats {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        for value in &self.updated_stats {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steam_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.game_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.crc_stats {
            os.write_uint32(3, v)?;
        }
        for v in &self.updated_stats {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientStatsUpdated {
        CMsgClientStatsUpdated::new()
    }

    fn clear(&mut self) {
        self.steam_id = ::std::option::Option::None;
        self.game_id = ::std::option::Option::None;
        self.crc_stats = ::std::option::Option::None;
        self.updated_stats.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientStatsUpdated {
        static instance: CMsgClientStatsUpdated = CMsgClientStatsUpdated {
            steam_id: ::std::option::Option::None,
            game_id: ::std::option::Option::None,
            crc_stats: ::std::option::Option::None,
            updated_stats: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientStatsUpdated`
pub mod cmsg_client_stats_updated {
    // @@protoc_insertion_point(message:CMsgClientStatsUpdated.Updated_Stats)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Updated_Stats {
        // message fields
        // @@protoc_insertion_point(field:CMsgClientStatsUpdated.Updated_Stats.stat_id)
        pub stat_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientStatsUpdated.Updated_Stats.stat_value)
        pub stat_value: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgClientStatsUpdated.Updated_Stats.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Updated_Stats {
        fn default() -> &'a Updated_Stats {
            <Updated_Stats as ::protobuf::Message>::default_instance()
        }
    }

    impl Updated_Stats {
        pub fn new() -> Updated_Stats {
            ::std::default::Default::default()
        }

        // optional uint32 stat_id = 1;

        pub fn stat_id(&self) -> u32 {
            self.stat_id.unwrap_or(0)
        }

        pub fn clear_stat_id(&mut self) {
            self.stat_id = ::std::option::Option::None;
        }

        pub fn has_stat_id(&self) -> bool {
            self.stat_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_stat_id(&mut self, v: u32) {
            self.stat_id = ::std::option::Option::Some(v);
        }

        // optional uint32 stat_value = 2;

        pub fn stat_value(&self) -> u32 {
            self.stat_value.unwrap_or(0)
        }

        pub fn clear_stat_value(&mut self) {
            self.stat_value = ::std::option::Option::None;
        }

        pub fn has_stat_value(&self) -> bool {
            self.stat_value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_stat_value(&mut self, v: u32) {
            self.stat_value = ::std::option::Option::Some(v);
        }
    }

    impl ::protobuf::Message for Updated_Stats {
        const NAME: &'static str = "Updated_Stats";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.stat_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.stat_value = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.stat_id {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.stat_value {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.stat_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.stat_value {
                os.write_uint32(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Updated_Stats {
            Updated_Stats::new()
        }

        fn clear(&mut self) {
            self.stat_id = ::std::option::Option::None;
            self.stat_value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Updated_Stats {
            static instance: Updated_Stats = Updated_Stats {
                stat_id: ::std::option::Option::None,
                stat_value: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgClientStoreUserStats)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientStoreUserStats {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientStoreUserStats.game_id)
    pub game_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgClientStoreUserStats.explicit_reset)
    pub explicit_reset: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgClientStoreUserStats.stats_to_store)
    pub stats_to_store: ::std::vec::Vec<cmsg_client_store_user_stats::Stats_To_Store>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientStoreUserStats.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientStoreUserStats {
    fn default() -> &'a CMsgClientStoreUserStats {
        <CMsgClientStoreUserStats as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientStoreUserStats {
    pub fn new() -> CMsgClientStoreUserStats {
        ::std::default::Default::default()
    }

    // optional fixed64 game_id = 1;

    pub fn game_id(&self) -> u64 {
        self.game_id.unwrap_or(0)
    }

    pub fn clear_game_id(&mut self) {
        self.game_id = ::std::option::Option::None;
    }

    pub fn has_game_id(&self) -> bool {
        self.game_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_id(&mut self, v: u64) {
        self.game_id = ::std::option::Option::Some(v);
    }

    // optional bool explicit_reset = 2;

    pub fn explicit_reset(&self) -> bool {
        self.explicit_reset.unwrap_or(false)
    }

    pub fn clear_explicit_reset(&mut self) {
        self.explicit_reset = ::std::option::Option::None;
    }

    pub fn has_explicit_reset(&self) -> bool {
        self.explicit_reset.is_some()
    }

    // Param is passed by value, moved
    pub fn set_explicit_reset(&mut self, v: bool) {
        self.explicit_reset = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CMsgClientStoreUserStats {
    const NAME: &'static str = "CMsgClientStoreUserStats";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.game_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.explicit_reset = ::std::option::Option::Some(is.read_bool()?);
                },
                26 => {
                    self.stats_to_store.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.game_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.explicit_reset {
            my_size += 1 + 1;
        }
        for value in &self.stats_to_store {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.game_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.explicit_reset {
            os.write_bool(2, v)?;
        }
        for v in &self.stats_to_store {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientStoreUserStats {
        CMsgClientStoreUserStats::new()
    }

    fn clear(&mut self) {
        self.game_id = ::std::option::Option::None;
        self.explicit_reset = ::std::option::Option::None;
        self.stats_to_store.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientStoreUserStats {
        static instance: CMsgClientStoreUserStats = CMsgClientStoreUserStats {
            game_id: ::std::option::Option::None,
            explicit_reset: ::std::option::Option::None,
            stats_to_store: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientStoreUserStats`
pub mod cmsg_client_store_user_stats {
    // @@protoc_insertion_point(message:CMsgClientStoreUserStats.Stats_To_Store)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Stats_To_Store {
        // message fields
        // @@protoc_insertion_point(field:CMsgClientStoreUserStats.Stats_To_Store.stat_id)
        pub stat_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientStoreUserStats.Stats_To_Store.stat_value)
        pub stat_value: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgClientStoreUserStats.Stats_To_Store.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Stats_To_Store {
        fn default() -> &'a Stats_To_Store {
            <Stats_To_Store as ::protobuf::Message>::default_instance()
        }
    }

    impl Stats_To_Store {
        pub fn new() -> Stats_To_Store {
            ::std::default::Default::default()
        }

        // optional uint32 stat_id = 1;

        pub fn stat_id(&self) -> u32 {
            self.stat_id.unwrap_or(0)
        }

        pub fn clear_stat_id(&mut self) {
            self.stat_id = ::std::option::Option::None;
        }

        pub fn has_stat_id(&self) -> bool {
            self.stat_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_stat_id(&mut self, v: u32) {
            self.stat_id = ::std::option::Option::Some(v);
        }

        // optional uint32 stat_value = 2;

        pub fn stat_value(&self) -> u32 {
            self.stat_value.unwrap_or(0)
        }

        pub fn clear_stat_value(&mut self) {
            self.stat_value = ::std::option::Option::None;
        }

        pub fn has_stat_value(&self) -> bool {
            self.stat_value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_stat_value(&mut self, v: u32) {
            self.stat_value = ::std::option::Option::Some(v);
        }
    }

    impl ::protobuf::Message for Stats_To_Store {
        const NAME: &'static str = "Stats_To_Store";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.stat_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.stat_value = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.stat_id {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.stat_value {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.stat_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.stat_value {
                os.write_uint32(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Stats_To_Store {
            Stats_To_Store::new()
        }

        fn clear(&mut self) {
            self.stat_id = ::std::option::Option::None;
            self.stat_value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Stats_To_Store {
            static instance: Stats_To_Store = Stats_To_Store {
                stat_id: ::std::option::Option::None,
                stat_value: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}
#[allow(unused_imports)]
use crate::steammessages_base::*;
impl crate::RpcMessage for CMsgClientGetUserStats {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessageWithKind for CMsgClientGetUserStats {
    const KIND: crate::enums_clientserver::EMsg = crate::enums_clientserver::EMsg::k_EMsgClientGetUserStats;
}
impl crate::RpcMessage for CMsgClientGetUserStatsResponse {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessageWithKind for CMsgClientGetUserStatsResponse {
    const KIND: crate::enums_clientserver::EMsg = crate::enums_clientserver::EMsg::k_EMsgClientGetUserStatsResponse;
}
impl crate::RpcMessage for CMsgClientStoreUserStatsResponse {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessageWithKind for CMsgClientStoreUserStatsResponse {
    const KIND: crate::enums_clientserver::EMsg = crate::enums_clientserver::EMsg::k_EMsgClientStoreUserStatsResponse;
}
impl crate::RpcMessage for CMsgClientStoreUserStats2 {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessageWithKind for CMsgClientStoreUserStats2 {
    const KIND: crate::enums_clientserver::EMsg = crate::enums_clientserver::EMsg::k_EMsgClientStoreUserStats2;
}
impl crate::RpcMessage for CMsgClientStatsUpdated {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessageWithKind for CMsgClientStatsUpdated {
    const KIND: crate::enums_clientserver::EMsg = crate::enums_clientserver::EMsg::k_EMsgClientStatsUpdated;
}
impl crate::RpcMessage for CMsgClientStoreUserStats {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessageWithKind for CMsgClientStoreUserStats {
    const KIND: crate::enums_clientserver::EMsg = crate::enums_clientserver::EMsg::k_EMsgClientStoreUserStats;
}
