// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_remoteclient_service_messages.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:CRemoteClient_CreateSession_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_CreateSession_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_CreateSession_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_CreateSession_Request {
    fn default() -> &'a CRemoteClient_CreateSession_Request {
        <CRemoteClient_CreateSession_Request as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_CreateSession_Request {
    pub fn new() -> CRemoteClient_CreateSession_Request {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CRemoteClient_CreateSession_Request {
    const NAME: &'static str = "CRemoteClient_CreateSession_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_CreateSession_Request {
        CRemoteClient_CreateSession_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_CreateSession_Request {
        static instance: CRemoteClient_CreateSession_Request = CRemoteClient_CreateSession_Request {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CRemoteClient_CreateSession_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_CreateSession_Response {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_CreateSession_Response.session_id)
    pub session_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_CreateSession_Response.euniverse)
    pub euniverse: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_CreateSession_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_CreateSession_Response {
    fn default() -> &'a CRemoteClient_CreateSession_Response {
        <CRemoteClient_CreateSession_Response as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_CreateSession_Response {
    pub fn new() -> CRemoteClient_CreateSession_Response {
        ::std::default::Default::default()
    }

    // optional fixed64 session_id = 1;

    pub fn session_id(&self) -> u64 {
        self.session_id.unwrap_or(0)
    }

    pub fn clear_session_id(&mut self) {
        self.session_id = ::std::option::Option::None;
    }

    pub fn has_session_id(&self) -> bool {
        self.session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u64) {
        self.session_id = ::std::option::Option::Some(v);
    }

    // optional int32 euniverse = 2;

    pub fn euniverse(&self) -> i32 {
        self.euniverse.unwrap_or(0)
    }

    pub fn clear_euniverse(&mut self) {
        self.euniverse = ::std::option::Option::None;
    }

    pub fn has_euniverse(&self) -> bool {
        self.euniverse.is_some()
    }

    // Param is passed by value, moved
    pub fn set_euniverse(&mut self, v: i32) {
        self.euniverse = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CRemoteClient_CreateSession_Response {
    const NAME: &'static str = "CRemoteClient_CreateSession_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.euniverse = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.session_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.euniverse {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.session_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.euniverse {
            os.write_int32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_CreateSession_Response {
        CRemoteClient_CreateSession_Response::new()
    }

    fn clear(&mut self) {
        self.session_id = ::std::option::Option::None;
        self.euniverse = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_CreateSession_Response {
        static instance: CRemoteClient_CreateSession_Response = CRemoteClient_CreateSession_Response {
            session_id: ::std::option::Option::None,
            euniverse: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CRemoteClient_StartPairing_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_StartPairing_Request {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_StartPairing_Request.session_id)
    pub session_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_StartPairing_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_StartPairing_Request {
    fn default() -> &'a CRemoteClient_StartPairing_Request {
        <CRemoteClient_StartPairing_Request as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_StartPairing_Request {
    pub fn new() -> CRemoteClient_StartPairing_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 session_id = 1;

    pub fn session_id(&self) -> u64 {
        self.session_id.unwrap_or(0)
    }

    pub fn clear_session_id(&mut self) {
        self.session_id = ::std::option::Option::None;
    }

    pub fn has_session_id(&self) -> bool {
        self.session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u64) {
        self.session_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CRemoteClient_StartPairing_Request {
    const NAME: &'static str = "CRemoteClient_StartPairing_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.session_id {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.session_id {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_StartPairing_Request {
        CRemoteClient_StartPairing_Request::new()
    }

    fn clear(&mut self) {
        self.session_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_StartPairing_Request {
        static instance: CRemoteClient_StartPairing_Request = CRemoteClient_StartPairing_Request {
            session_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CRemoteClient_StartPairing_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_StartPairing_Response {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_StartPairing_Response.pin)
    pub pin: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_StartPairing_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_StartPairing_Response {
    fn default() -> &'a CRemoteClient_StartPairing_Response {
        <CRemoteClient_StartPairing_Response as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_StartPairing_Response {
    pub fn new() -> CRemoteClient_StartPairing_Response {
        ::std::default::Default::default()
    }

    // optional uint32 pin = 1;

    pub fn pin(&self) -> u32 {
        self.pin.unwrap_or(0)
    }

    pub fn clear_pin(&mut self) {
        self.pin = ::std::option::Option::None;
    }

    pub fn has_pin(&self) -> bool {
        self.pin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pin(&mut self, v: u32) {
        self.pin = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CRemoteClient_StartPairing_Response {
    const NAME: &'static str = "CRemoteClient_StartPairing_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.pin = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.pin {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.pin {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_StartPairing_Response {
        CRemoteClient_StartPairing_Response::new()
    }

    fn clear(&mut self) {
        self.pin = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_StartPairing_Response {
        static instance: CRemoteClient_StartPairing_Response = CRemoteClient_StartPairing_Response {
            pin: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CRemoteClient_SetPairingInfo_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_SetPairingInfo_Request {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_SetPairingInfo_Request.session_id)
    pub session_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_SetPairingInfo_Request.device_id)
    pub device_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_SetPairingInfo_Request.request)
    pub request: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_SetPairingInfo_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_SetPairingInfo_Request {
    fn default() -> &'a CRemoteClient_SetPairingInfo_Request {
        <CRemoteClient_SetPairingInfo_Request as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_SetPairingInfo_Request {
    pub fn new() -> CRemoteClient_SetPairingInfo_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 session_id = 1;

    pub fn session_id(&self) -> u64 {
        self.session_id.unwrap_or(0)
    }

    pub fn clear_session_id(&mut self) {
        self.session_id = ::std::option::Option::None;
    }

    pub fn has_session_id(&self) -> bool {
        self.session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u64) {
        self.session_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 device_id = 2;

    pub fn device_id(&self) -> u64 {
        self.device_id.unwrap_or(0)
    }

    pub fn clear_device_id(&mut self) {
        self.device_id = ::std::option::Option::None;
    }

    pub fn has_device_id(&self) -> bool {
        self.device_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_id(&mut self, v: u64) {
        self.device_id = ::std::option::Option::Some(v);
    }

    // optional bytes request = 3;

    pub fn request(&self) -> &[u8] {
        match self.request.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_request(&mut self) {
        self.request = ::std::option::Option::None;
    }

    pub fn has_request(&self) -> bool {
        self.request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request(&mut self, v: ::std::vec::Vec<u8>) {
        self.request = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.request.is_none() {
            self.request = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.request.as_mut().unwrap()
    }

    // Take field
    pub fn take_request(&mut self) -> ::std::vec::Vec<u8> {
        self.request.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CRemoteClient_SetPairingInfo_Request {
    const NAME: &'static str = "CRemoteClient_SetPairingInfo_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.device_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                26 => {
                    self.request = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.session_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.device_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.request.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.session_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.device_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.request.as_ref() {
            os.write_bytes(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_SetPairingInfo_Request {
        CRemoteClient_SetPairingInfo_Request::new()
    }

    fn clear(&mut self) {
        self.session_id = ::std::option::Option::None;
        self.device_id = ::std::option::Option::None;
        self.request = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_SetPairingInfo_Request {
        static instance: CRemoteClient_SetPairingInfo_Request = CRemoteClient_SetPairingInfo_Request {
            session_id: ::std::option::Option::None,
            device_id: ::std::option::Option::None,
            request: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CRemoteClient_SetPairingInfo_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_SetPairingInfo_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_SetPairingInfo_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_SetPairingInfo_Response {
    fn default() -> &'a CRemoteClient_SetPairingInfo_Response {
        <CRemoteClient_SetPairingInfo_Response as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_SetPairingInfo_Response {
    pub fn new() -> CRemoteClient_SetPairingInfo_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CRemoteClient_SetPairingInfo_Response {
    const NAME: &'static str = "CRemoteClient_SetPairingInfo_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_SetPairingInfo_Response {
        CRemoteClient_SetPairingInfo_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_SetPairingInfo_Response {
        static instance: CRemoteClient_SetPairingInfo_Response = CRemoteClient_SetPairingInfo_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Get pairing info for an entered PIN"]
// @@protoc_insertion_point(message:CRemoteClient_GetPairingInfo_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_GetPairingInfo_Request {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_GetPairingInfo_Request.pin)
    pub pin: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_GetPairingInfo_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_GetPairingInfo_Request {
    fn default() -> &'a CRemoteClient_GetPairingInfo_Request {
        <CRemoteClient_GetPairingInfo_Request as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_GetPairingInfo_Request {
    pub fn new() -> CRemoteClient_GetPairingInfo_Request {
        ::std::default::Default::default()
    }

    // optional uint32 pin = 1;

    pub fn pin(&self) -> u32 {
        self.pin.unwrap_or(0)
    }

    pub fn clear_pin(&mut self) {
        self.pin = ::std::option::Option::None;
    }

    pub fn has_pin(&self) -> bool {
        self.pin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pin(&mut self, v: u32) {
        self.pin = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CRemoteClient_GetPairingInfo_Request {
    const NAME: &'static str = "CRemoteClient_GetPairingInfo_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.pin = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.pin {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.pin {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_GetPairingInfo_Request {
        CRemoteClient_GetPairingInfo_Request::new()
    }

    fn clear(&mut self) {
        self.pin = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_GetPairingInfo_Request {
        static instance: CRemoteClient_GetPairingInfo_Request = CRemoteClient_GetPairingInfo_Request {
            pin: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CRemoteClient_GetPairingInfo_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_GetPairingInfo_Response {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_GetPairingInfo_Response.session_id)
    pub session_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_GetPairingInfo_Response.device_id)
    pub device_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_GetPairingInfo_Response.request)
    pub request: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_GetPairingInfo_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_GetPairingInfo_Response {
    fn default() -> &'a CRemoteClient_GetPairingInfo_Response {
        <CRemoteClient_GetPairingInfo_Response as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_GetPairingInfo_Response {
    pub fn new() -> CRemoteClient_GetPairingInfo_Response {
        ::std::default::Default::default()
    }

    // optional fixed64 session_id = 1;

    pub fn session_id(&self) -> u64 {
        self.session_id.unwrap_or(0)
    }

    pub fn clear_session_id(&mut self) {
        self.session_id = ::std::option::Option::None;
    }

    pub fn has_session_id(&self) -> bool {
        self.session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u64) {
        self.session_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 device_id = 2;

    pub fn device_id(&self) -> u64 {
        self.device_id.unwrap_or(0)
    }

    pub fn clear_device_id(&mut self) {
        self.device_id = ::std::option::Option::None;
    }

    pub fn has_device_id(&self) -> bool {
        self.device_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_id(&mut self, v: u64) {
        self.device_id = ::std::option::Option::Some(v);
    }

    // optional bytes request = 3;

    pub fn request(&self) -> &[u8] {
        match self.request.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_request(&mut self) {
        self.request = ::std::option::Option::None;
    }

    pub fn has_request(&self) -> bool {
        self.request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request(&mut self, v: ::std::vec::Vec<u8>) {
        self.request = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.request.is_none() {
            self.request = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.request.as_mut().unwrap()
    }

    // Take field
    pub fn take_request(&mut self) -> ::std::vec::Vec<u8> {
        self.request.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CRemoteClient_GetPairingInfo_Response {
    const NAME: &'static str = "CRemoteClient_GetPairingInfo_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.device_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                26 => {
                    self.request = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.session_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.device_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.request.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.session_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.device_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.request.as_ref() {
            os.write_bytes(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_GetPairingInfo_Response {
        CRemoteClient_GetPairingInfo_Response::new()
    }

    fn clear(&mut self) {
        self.session_id = ::std::option::Option::None;
        self.device_id = ::std::option::Option::None;
        self.request = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_GetPairingInfo_Response {
        static instance: CRemoteClient_GetPairingInfo_Response = CRemoteClient_GetPairingInfo_Response {
            session_id: ::std::option::Option::None,
            device_id: ::std::option::Option::None,
            request: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CRemoteClient_CancelPairing_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_CancelPairing_Request {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_CancelPairing_Request.session_id)
    pub session_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_CancelPairing_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_CancelPairing_Request {
    fn default() -> &'a CRemoteClient_CancelPairing_Request {
        <CRemoteClient_CancelPairing_Request as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_CancelPairing_Request {
    pub fn new() -> CRemoteClient_CancelPairing_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 session_id = 1;

    pub fn session_id(&self) -> u64 {
        self.session_id.unwrap_or(0)
    }

    pub fn clear_session_id(&mut self) {
        self.session_id = ::std::option::Option::None;
    }

    pub fn has_session_id(&self) -> bool {
        self.session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u64) {
        self.session_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CRemoteClient_CancelPairing_Request {
    const NAME: &'static str = "CRemoteClient_CancelPairing_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.session_id {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.session_id {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_CancelPairing_Request {
        CRemoteClient_CancelPairing_Request::new()
    }

    fn clear(&mut self) {
        self.session_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_CancelPairing_Request {
        static instance: CRemoteClient_CancelPairing_Request = CRemoteClient_CancelPairing_Request {
            session_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CRemoteClient_CancelPairing_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_CancelPairing_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_CancelPairing_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_CancelPairing_Response {
    fn default() -> &'a CRemoteClient_CancelPairing_Response {
        <CRemoteClient_CancelPairing_Response as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_CancelPairing_Response {
    pub fn new() -> CRemoteClient_CancelPairing_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CRemoteClient_CancelPairing_Response {
    const NAME: &'static str = "CRemoteClient_CancelPairing_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_CancelPairing_Response {
        CRemoteClient_CancelPairing_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_CancelPairing_Response {
        static instance: CRemoteClient_CancelPairing_Response = CRemoteClient_CancelPairing_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Register for status updates with a Steam client"]
// @@protoc_insertion_point(message:CRemoteClient_RegisterStatusUpdate_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_RegisterStatusUpdate_Notification {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_RegisterStatusUpdate_Notification.session_id)
    pub session_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_RegisterStatusUpdate_Notification.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_RegisterStatusUpdate_Notification.device_id)
    pub device_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_RegisterStatusUpdate_Notification.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_RegisterStatusUpdate_Notification {
    fn default() -> &'a CRemoteClient_RegisterStatusUpdate_Notification {
        <CRemoteClient_RegisterStatusUpdate_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_RegisterStatusUpdate_Notification {
    pub fn new() -> CRemoteClient_RegisterStatusUpdate_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 session_id = 1;

    pub fn session_id(&self) -> u64 {
        self.session_id.unwrap_or(0)
    }

    pub fn clear_session_id(&mut self) {
        self.session_id = ::std::option::Option::None;
    }

    pub fn has_session_id(&self) -> bool {
        self.session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u64) {
        self.session_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 2;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 device_id = 3;

    pub fn device_id(&self) -> u64 {
        self.device_id.unwrap_or(0)
    }

    pub fn clear_device_id(&mut self) {
        self.device_id = ::std::option::Option::None;
    }

    pub fn has_device_id(&self) -> bool {
        self.device_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_id(&mut self, v: u64) {
        self.device_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CRemoteClient_RegisterStatusUpdate_Notification {
    const NAME: &'static str = "CRemoteClient_RegisterStatusUpdate_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                25 => {
                    self.device_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.session_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.device_id {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.session_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.device_id {
            os.write_fixed64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_RegisterStatusUpdate_Notification {
        CRemoteClient_RegisterStatusUpdate_Notification::new()
    }

    fn clear(&mut self) {
        self.session_id = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.device_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_RegisterStatusUpdate_Notification {
        static instance: CRemoteClient_RegisterStatusUpdate_Notification = CRemoteClient_RegisterStatusUpdate_Notification {
            session_id: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            device_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Unregister for status updates with a Steam client"]
// @@protoc_insertion_point(message:CRemoteClient_UnregisterStatusUpdate_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_UnregisterStatusUpdate_Notification {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_UnregisterStatusUpdate_Notification.session_id)
    pub session_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_UnregisterStatusUpdate_Notification.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_UnregisterStatusUpdate_Notification.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_UnregisterStatusUpdate_Notification {
    fn default() -> &'a CRemoteClient_UnregisterStatusUpdate_Notification {
        <CRemoteClient_UnregisterStatusUpdate_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_UnregisterStatusUpdate_Notification {
    pub fn new() -> CRemoteClient_UnregisterStatusUpdate_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 session_id = 1;

    pub fn session_id(&self) -> u64 {
        self.session_id.unwrap_or(0)
    }

    pub fn clear_session_id(&mut self) {
        self.session_id = ::std::option::Option::None;
    }

    pub fn has_session_id(&self) -> bool {
        self.session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u64) {
        self.session_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 2;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CRemoteClient_UnregisterStatusUpdate_Notification {
    const NAME: &'static str = "CRemoteClient_UnregisterStatusUpdate_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.session_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.session_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_UnregisterStatusUpdate_Notification {
        CRemoteClient_UnregisterStatusUpdate_Notification::new()
    }

    fn clear(&mut self) {
        self.session_id = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_UnregisterStatusUpdate_Notification {
        static instance: CRemoteClient_UnregisterStatusUpdate_Notification = CRemoteClient_UnregisterStatusUpdate_Notification {
            session_id: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Let the service know we're available for status listeners"]
// @@protoc_insertion_point(message:CRemoteClient_Online_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_Online_Notification {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_Online_Notification.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_Online_Notification.remote_client_id)
    pub remote_client_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_Online_Notification.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_Online_Notification {
    fn default() -> &'a CRemoteClient_Online_Notification {
        <CRemoteClient_Online_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_Online_Notification {
    pub fn new() -> CRemoteClient_Online_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 remote_client_id = 2;

    pub fn remote_client_id(&self) -> u64 {
        self.remote_client_id.unwrap_or(0)
    }

    pub fn clear_remote_client_id(&mut self) {
        self.remote_client_id = ::std::option::Option::None;
    }

    pub fn has_remote_client_id(&self) -> bool {
        self.remote_client_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_remote_client_id(&mut self, v: u64) {
        self.remote_client_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CRemoteClient_Online_Notification {
    const NAME: &'static str = "CRemoteClient_Online_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.remote_client_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.remote_client_id {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.remote_client_id {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_Online_Notification {
        CRemoteClient_Online_Notification::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.remote_client_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_Online_Notification {
        static instance: CRemoteClient_Online_Notification = CRemoteClient_Online_Notification {
            steamid: ::std::option::Option::None,
            remote_client_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Send a packet to a Steam client"]
// @@protoc_insertion_point(message:CRemoteClient_RemotePacket_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_RemotePacket_Notification {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_RemotePacket_Notification.session_id)
    pub session_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_RemotePacket_Notification.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_RemotePacket_Notification.payload)
    pub payload: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_RemotePacket_Notification.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_RemotePacket_Notification {
    fn default() -> &'a CRemoteClient_RemotePacket_Notification {
        <CRemoteClient_RemotePacket_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_RemotePacket_Notification {
    pub fn new() -> CRemoteClient_RemotePacket_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 session_id = 1;

    pub fn session_id(&self) -> u64 {
        self.session_id.unwrap_or(0)
    }

    pub fn clear_session_id(&mut self) {
        self.session_id = ::std::option::Option::None;
    }

    pub fn has_session_id(&self) -> bool {
        self.session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u64) {
        self.session_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 2;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional bytes payload = 4;

    pub fn payload(&self) -> &[u8] {
        match self.payload.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_payload(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_payload(&self) -> bool {
        self.payload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.payload.is_none() {
            self.payload = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.payload.as_mut().unwrap()
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        self.payload.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CRemoteClient_RemotePacket_Notification {
    const NAME: &'static str = "CRemoteClient_RemotePacket_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                34 => {
                    self.payload = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.session_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.payload.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.session_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.payload.as_ref() {
            os.write_bytes(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_RemotePacket_Notification {
        CRemoteClient_RemotePacket_Notification::new()
    }

    fn clear(&mut self) {
        self.session_id = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_RemotePacket_Notification {
        static instance: CRemoteClient_RemotePacket_Notification = CRemoteClient_RemotePacket_Notification {
            session_id: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            payload: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Send a reply to a remote client"]
// @@protoc_insertion_point(message:CRemoteClient_ReplyPacket_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_ReplyPacket_Notification {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_ReplyPacket_Notification.session_id)
    pub session_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_ReplyPacket_Notification.payload)
    pub payload: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_ReplyPacket_Notification.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_ReplyPacket_Notification {
    fn default() -> &'a CRemoteClient_ReplyPacket_Notification {
        <CRemoteClient_ReplyPacket_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_ReplyPacket_Notification {
    pub fn new() -> CRemoteClient_ReplyPacket_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 session_id = 1;

    pub fn session_id(&self) -> u64 {
        self.session_id.unwrap_or(0)
    }

    pub fn clear_session_id(&mut self) {
        self.session_id = ::std::option::Option::None;
    }

    pub fn has_session_id(&self) -> bool {
        self.session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u64) {
        self.session_id = ::std::option::Option::Some(v);
    }

    // optional bytes payload = 2;

    pub fn payload(&self) -> &[u8] {
        match self.payload.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_payload(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_payload(&self) -> bool {
        self.payload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.payload.is_none() {
            self.payload = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.payload.as_mut().unwrap()
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        self.payload.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CRemoteClient_ReplyPacket_Notification {
    const NAME: &'static str = "CRemoteClient_ReplyPacket_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    self.payload = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.session_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.payload.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.session_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.payload.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_ReplyPacket_Notification {
        CRemoteClient_ReplyPacket_Notification::new()
    }

    fn clear(&mut self) {
        self.session_id = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_ReplyPacket_Notification {
        static instance: CRemoteClient_ReplyPacket_Notification = CRemoteClient_ReplyPacket_Notification {
            session_id: ::std::option::Option::None,
            payload: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CRemoteClient_GetReplies_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_GetReplies_Request {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_GetReplies_Request.session_id)
    pub session_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_GetReplies_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_GetReplies_Request {
    fn default() -> &'a CRemoteClient_GetReplies_Request {
        <CRemoteClient_GetReplies_Request as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_GetReplies_Request {
    pub fn new() -> CRemoteClient_GetReplies_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 session_id = 1;

    pub fn session_id(&self) -> u64 {
        self.session_id.unwrap_or(0)
    }

    pub fn clear_session_id(&mut self) {
        self.session_id = ::std::option::Option::None;
    }

    pub fn has_session_id(&self) -> bool {
        self.session_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u64) {
        self.session_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CRemoteClient_GetReplies_Request {
    const NAME: &'static str = "CRemoteClient_GetReplies_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.session_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.session_id {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.session_id {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_GetReplies_Request {
        CRemoteClient_GetReplies_Request::new()
    }

    fn clear(&mut self) {
        self.session_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_GetReplies_Request {
        static instance: CRemoteClient_GetReplies_Request = CRemoteClient_GetReplies_Request {
            session_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CRemoteClient_GetReplies_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_GetReplies_Response {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_GetReplies_Response.payload)
    pub payload: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_GetReplies_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_GetReplies_Response {
    fn default() -> &'a CRemoteClient_GetReplies_Response {
        <CRemoteClient_GetReplies_Response as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_GetReplies_Response {
    pub fn new() -> CRemoteClient_GetReplies_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CRemoteClient_GetReplies_Response {
    const NAME: &'static str = "CRemoteClient_GetReplies_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.payload.push(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.payload {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.payload {
            os.write_bytes(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_GetReplies_Response {
        CRemoteClient_GetReplies_Response::new()
    }

    fn clear(&mut self) {
        self.payload.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_GetReplies_Response {
        static instance: CRemoteClient_GetReplies_Response = CRemoteClient_GetReplies_Response {
            payload: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Allocate a TURN server for a streaming session"]
// @@protoc_insertion_point(message:CRemoteClient_AllocateTURNServer_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_AllocateTURNServer_Request {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_AllocateTURNServer_Request.cellid)
    pub cellid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CRemoteClient_AllocateTURNServer_Request.credentials)
    pub credentials: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_AllocateTURNServer_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_AllocateTURNServer_Request {
    fn default() -> &'a CRemoteClient_AllocateTURNServer_Request {
        <CRemoteClient_AllocateTURNServer_Request as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_AllocateTURNServer_Request {
    pub fn new() -> CRemoteClient_AllocateTURNServer_Request {
        ::std::default::Default::default()
    }

    // optional uint32 cellid = 1;

    pub fn cellid(&self) -> u32 {
        self.cellid.unwrap_or(0)
    }

    pub fn clear_cellid(&mut self) {
        self.cellid = ::std::option::Option::None;
    }

    pub fn has_cellid(&self) -> bool {
        self.cellid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cellid(&mut self, v: u32) {
        self.cellid = ::std::option::Option::Some(v);
    }

    // optional string credentials = 2;

    pub fn credentials(&self) -> &str {
        match self.credentials.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_credentials(&mut self) {
        self.credentials = ::std::option::Option::None;
    }

    pub fn has_credentials(&self) -> bool {
        self.credentials.is_some()
    }

    // Param is passed by value, moved
    pub fn set_credentials(&mut self, v: ::std::string::String) {
        self.credentials = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_credentials(&mut self) -> &mut ::std::string::String {
        if self.credentials.is_none() {
            self.credentials = ::std::option::Option::Some(::std::string::String::new());
        }
        self.credentials.as_mut().unwrap()
    }

    // Take field
    pub fn take_credentials(&mut self) -> ::std::string::String {
        self.credentials.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CRemoteClient_AllocateTURNServer_Request {
    const NAME: &'static str = "CRemoteClient_AllocateTURNServer_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.cellid = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.credentials = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.cellid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.credentials.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.cellid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.credentials.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_AllocateTURNServer_Request {
        CRemoteClient_AllocateTURNServer_Request::new()
    }

    fn clear(&mut self) {
        self.cellid = ::std::option::Option::None;
        self.credentials = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_AllocateTURNServer_Request {
        static instance: CRemoteClient_AllocateTURNServer_Request = CRemoteClient_AllocateTURNServer_Request {
            cellid: ::std::option::Option::None,
            credentials: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CRemoteClient_AllocateTURNServer_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_AllocateTURNServer_Response {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_AllocateTURNServer_Response.turn_server)
    pub turn_server: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_AllocateTURNServer_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_AllocateTURNServer_Response {
    fn default() -> &'a CRemoteClient_AllocateTURNServer_Response {
        <CRemoteClient_AllocateTURNServer_Response as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_AllocateTURNServer_Response {
    pub fn new() -> CRemoteClient_AllocateTURNServer_Response {
        ::std::default::Default::default()
    }

    // optional string turn_server = 1;

    pub fn turn_server(&self) -> &str {
        match self.turn_server.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_turn_server(&mut self) {
        self.turn_server = ::std::option::Option::None;
    }

    pub fn has_turn_server(&self) -> bool {
        self.turn_server.is_some()
    }

    // Param is passed by value, moved
    pub fn set_turn_server(&mut self, v: ::std::string::String) {
        self.turn_server = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_turn_server(&mut self) -> &mut ::std::string::String {
        if self.turn_server.is_none() {
            self.turn_server = ::std::option::Option::Some(::std::string::String::new());
        }
        self.turn_server.as_mut().unwrap()
    }

    // Take field
    pub fn take_turn_server(&mut self) -> ::std::string::String {
        self.turn_server.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CRemoteClient_AllocateTURNServer_Response {
    const NAME: &'static str = "CRemoteClient_AllocateTURNServer_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.turn_server = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.turn_server.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.turn_server.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_AllocateTURNServer_Response {
        CRemoteClient_AllocateTURNServer_Response::new()
    }

    fn clear(&mut self) {
        self.turn_server = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_AllocateTURNServer_Response {
        static instance: CRemoteClient_AllocateTURNServer_Response = CRemoteClient_AllocateTURNServer_Response {
            turn_server: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Allocate a UDP relay server for a streaming session"]
// @@protoc_insertion_point(message:CRemoteClient_AllocateRelayServer_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_AllocateRelayServer_Request {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_AllocateRelayServer_Request.cellid)
    pub cellid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CRemoteClient_AllocateRelayServer_Request.credentials)
    pub credentials: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_AllocateRelayServer_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_AllocateRelayServer_Request {
    fn default() -> &'a CRemoteClient_AllocateRelayServer_Request {
        <CRemoteClient_AllocateRelayServer_Request as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_AllocateRelayServer_Request {
    pub fn new() -> CRemoteClient_AllocateRelayServer_Request {
        ::std::default::Default::default()
    }

    // optional uint32 cellid = 1;

    pub fn cellid(&self) -> u32 {
        self.cellid.unwrap_or(0)
    }

    pub fn clear_cellid(&mut self) {
        self.cellid = ::std::option::Option::None;
    }

    pub fn has_cellid(&self) -> bool {
        self.cellid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cellid(&mut self, v: u32) {
        self.cellid = ::std::option::Option::Some(v);
    }

    // optional string credentials = 2;

    pub fn credentials(&self) -> &str {
        match self.credentials.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_credentials(&mut self) {
        self.credentials = ::std::option::Option::None;
    }

    pub fn has_credentials(&self) -> bool {
        self.credentials.is_some()
    }

    // Param is passed by value, moved
    pub fn set_credentials(&mut self, v: ::std::string::String) {
        self.credentials = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_credentials(&mut self) -> &mut ::std::string::String {
        if self.credentials.is_none() {
            self.credentials = ::std::option::Option::Some(::std::string::String::new());
        }
        self.credentials.as_mut().unwrap()
    }

    // Take field
    pub fn take_credentials(&mut self) -> ::std::string::String {
        self.credentials.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CRemoteClient_AllocateRelayServer_Request {
    const NAME: &'static str = "CRemoteClient_AllocateRelayServer_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.cellid = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.credentials = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.cellid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.credentials.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.cellid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.credentials.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_AllocateRelayServer_Request {
        CRemoteClient_AllocateRelayServer_Request::new()
    }

    fn clear(&mut self) {
        self.cellid = ::std::option::Option::None;
        self.credentials = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_AllocateRelayServer_Request {
        static instance: CRemoteClient_AllocateRelayServer_Request = CRemoteClient_AllocateRelayServer_Request {
            cellid: ::std::option::Option::None,
            credentials: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CRemoteClient_AllocateRelayServer_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_AllocateRelayServer_Response {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_AllocateRelayServer_Response.relay_server)
    pub relay_server: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_AllocateRelayServer_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_AllocateRelayServer_Response {
    fn default() -> &'a CRemoteClient_AllocateRelayServer_Response {
        <CRemoteClient_AllocateRelayServer_Response as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_AllocateRelayServer_Response {
    pub fn new() -> CRemoteClient_AllocateRelayServer_Response {
        ::std::default::Default::default()
    }

    // optional string relay_server = 1;

    pub fn relay_server(&self) -> &str {
        match self.relay_server.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_relay_server(&mut self) {
        self.relay_server = ::std::option::Option::None;
    }

    pub fn has_relay_server(&self) -> bool {
        self.relay_server.is_some()
    }

    // Param is passed by value, moved
    pub fn set_relay_server(&mut self, v: ::std::string::String) {
        self.relay_server = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_relay_server(&mut self) -> &mut ::std::string::String {
        if self.relay_server.is_none() {
            self.relay_server = ::std::option::Option::Some(::std::string::String::new());
        }
        self.relay_server.as_mut().unwrap()
    }

    // Take field
    pub fn take_relay_server(&mut self) -> ::std::string::String {
        self.relay_server.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CRemoteClient_AllocateRelayServer_Response {
    const NAME: &'static str = "CRemoteClient_AllocateRelayServer_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.relay_server = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.relay_server.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.relay_server.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_AllocateRelayServer_Response {
        CRemoteClient_AllocateRelayServer_Response::new()
    }

    fn clear(&mut self) {
        self.relay_server = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_AllocateRelayServer_Response {
        static instance: CRemoteClient_AllocateRelayServer_Response = CRemoteClient_AllocateRelayServer_Response {
            relay_server: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Allocate SDR resources for an app"]
// @@protoc_insertion_point(message:CRemoteClient_AllocateSDR_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_AllocateSDR_Request {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_AllocateSDR_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_AllocateSDR_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_AllocateSDR_Request {
    fn default() -> &'a CRemoteClient_AllocateSDR_Request {
        <CRemoteClient_AllocateSDR_Request as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_AllocateSDR_Request {
    pub fn new() -> CRemoteClient_AllocateSDR_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CRemoteClient_AllocateSDR_Request {
    const NAME: &'static str = "CRemoteClient_AllocateSDR_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_AllocateSDR_Request {
        CRemoteClient_AllocateSDR_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_AllocateSDR_Request {
        static instance: CRemoteClient_AllocateSDR_Request = CRemoteClient_AllocateSDR_Request {
            appid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CRemoteClient_AllocateSDR_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_AllocateSDR_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_AllocateSDR_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_AllocateSDR_Response {
    fn default() -> &'a CRemoteClient_AllocateSDR_Response {
        <CRemoteClient_AllocateSDR_Response as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_AllocateSDR_Response {
    pub fn new() -> CRemoteClient_AllocateSDR_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CRemoteClient_AllocateSDR_Response {
    const NAME: &'static str = "CRemoteClient_AllocateSDR_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_AllocateSDR_Response {
        CRemoteClient_AllocateSDR_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_AllocateSDR_Response {
        static instance: CRemoteClient_AllocateSDR_Response = CRemoteClient_AllocateSDR_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Broadcast a packet to remote Steam clients"]
// @@protoc_insertion_point(message:CRemoteClient_SteamBroadcast_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_SteamBroadcast_Notification {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_SteamBroadcast_Notification.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_SteamBroadcast_Notification.clientid)
    pub clientid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_SteamBroadcast_Notification.payload)
    pub payload: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_SteamBroadcast_Notification.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_SteamBroadcast_Notification {
    fn default() -> &'a CRemoteClient_SteamBroadcast_Notification {
        <CRemoteClient_SteamBroadcast_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_SteamBroadcast_Notification {
    pub fn new() -> CRemoteClient_SteamBroadcast_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 clientid = 2;

    pub fn clientid(&self) -> u64 {
        self.clientid.unwrap_or(0)
    }

    pub fn clear_clientid(&mut self) {
        self.clientid = ::std::option::Option::None;
    }

    pub fn has_clientid(&self) -> bool {
        self.clientid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_clientid(&mut self, v: u64) {
        self.clientid = ::std::option::Option::Some(v);
    }

    // optional bytes payload = 3;

    pub fn payload(&self) -> &[u8] {
        match self.payload.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_payload(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_payload(&self) -> bool {
        self.payload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.payload.is_none() {
            self.payload = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.payload.as_mut().unwrap()
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        self.payload.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CRemoteClient_SteamBroadcast_Notification {
    const NAME: &'static str = "CRemoteClient_SteamBroadcast_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.clientid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                26 => {
                    self.payload = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.clientid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.payload.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.clientid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.payload.as_ref() {
            os.write_bytes(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_SteamBroadcast_Notification {
        CRemoteClient_SteamBroadcast_Notification::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.clientid = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_SteamBroadcast_Notification {
        static instance: CRemoteClient_SteamBroadcast_Notification = CRemoteClient_SteamBroadcast_Notification {
            steamid: ::std::option::Option::None,
            clientid: ::std::option::Option::None,
            payload: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Send a packet to a Steam client from a remote Steam client"]
// @@protoc_insertion_point(message:CRemoteClient_SteamToSteam_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_SteamToSteam_Notification {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_SteamToSteam_Notification.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_SteamToSteam_Notification.src_clientid)
    pub src_clientid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_SteamToSteam_Notification.dst_clientid)
    pub dst_clientid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemoteClient_SteamToSteam_Notification.secretid)
    pub secretid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CRemoteClient_SteamToSteam_Notification.encrypted_payload)
    pub encrypted_payload: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_SteamToSteam_Notification.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_SteamToSteam_Notification {
    fn default() -> &'a CRemoteClient_SteamToSteam_Notification {
        <CRemoteClient_SteamToSteam_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_SteamToSteam_Notification {
    pub fn new() -> CRemoteClient_SteamToSteam_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional fixed64 src_clientid = 2;

    pub fn src_clientid(&self) -> u64 {
        self.src_clientid.unwrap_or(0)
    }

    pub fn clear_src_clientid(&mut self) {
        self.src_clientid = ::std::option::Option::None;
    }

    pub fn has_src_clientid(&self) -> bool {
        self.src_clientid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_src_clientid(&mut self, v: u64) {
        self.src_clientid = ::std::option::Option::Some(v);
    }

    // optional fixed64 dst_clientid = 3;

    pub fn dst_clientid(&self) -> u64 {
        self.dst_clientid.unwrap_or(0)
    }

    pub fn clear_dst_clientid(&mut self) {
        self.dst_clientid = ::std::option::Option::None;
    }

    pub fn has_dst_clientid(&self) -> bool {
        self.dst_clientid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dst_clientid(&mut self, v: u64) {
        self.dst_clientid = ::std::option::Option::Some(v);
    }

    // optional uint32 secretid = 4;

    pub fn secretid(&self) -> u32 {
        self.secretid.unwrap_or(0)
    }

    pub fn clear_secretid(&mut self) {
        self.secretid = ::std::option::Option::None;
    }

    pub fn has_secretid(&self) -> bool {
        self.secretid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_secretid(&mut self, v: u32) {
        self.secretid = ::std::option::Option::Some(v);
    }

    // optional bytes encrypted_payload = 5;

    pub fn encrypted_payload(&self) -> &[u8] {
        match self.encrypted_payload.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_encrypted_payload(&mut self) {
        self.encrypted_payload = ::std::option::Option::None;
    }

    pub fn has_encrypted_payload(&self) -> bool {
        self.encrypted_payload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encrypted_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.encrypted_payload = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encrypted_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.encrypted_payload.is_none() {
            self.encrypted_payload = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.encrypted_payload.as_mut().unwrap()
    }

    // Take field
    pub fn take_encrypted_payload(&mut self) -> ::std::vec::Vec<u8> {
        self.encrypted_payload.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CRemoteClient_SteamToSteam_Notification {
    const NAME: &'static str = "CRemoteClient_SteamToSteam_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.src_clientid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                25 => {
                    self.dst_clientid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                32 => {
                    self.secretid = ::std::option::Option::Some(is.read_uint32()?);
                },
                42 => {
                    self.encrypted_payload = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.src_clientid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.dst_clientid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.secretid {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.encrypted_payload.as_ref() {
            my_size += ::protobuf::rt::bytes_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.src_clientid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.dst_clientid {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.secretid {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.encrypted_payload.as_ref() {
            os.write_bytes(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_SteamToSteam_Notification {
        CRemoteClient_SteamToSteam_Notification::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.src_clientid = ::std::option::Option::None;
        self.dst_clientid = ::std::option::Option::None;
        self.secretid = ::std::option::Option::None;
        self.encrypted_payload = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_SteamToSteam_Notification {
        static instance: CRemoteClient_SteamToSteam_Notification = CRemoteClient_SteamToSteam_Notification {
            steamid: ::std::option::Option::None,
            src_clientid: ::std::option::Option::None,
            dst_clientid: ::std::option::Option::None,
            secretid: ::std::option::Option::None,
            encrypted_payload: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Let the server know that we started a Remote Play session"]
// @@protoc_insertion_point(message:CRemotePlay_SessionStarted_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemotePlay_SessionStarted_Request {
    // message fields
    // @@protoc_insertion_point(field:CRemotePlay_SessionStarted_Request.host_account_id)
    pub host_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CRemotePlay_SessionStarted_Request.client_account_id)
    pub client_account_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CRemotePlay_SessionStarted_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CRemotePlay_SessionStarted_Request.device_form_factor)
    pub device_form_factor: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CRemotePlay_SessionStarted_Request.remote_play_together)
    pub remote_play_together: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CRemotePlay_SessionStarted_Request.guest_session)
    pub guest_session: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemotePlay_SessionStarted_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemotePlay_SessionStarted_Request {
    fn default() -> &'a CRemotePlay_SessionStarted_Request {
        <CRemotePlay_SessionStarted_Request as ::protobuf::Message>::default_instance()
    }
}

impl CRemotePlay_SessionStarted_Request {
    pub fn new() -> CRemotePlay_SessionStarted_Request {
        ::std::default::Default::default()
    }

    // optional uint32 host_account_id = 1;

    pub fn host_account_id(&self) -> u32 {
        self.host_account_id.unwrap_or(0)
    }

    pub fn clear_host_account_id(&mut self) {
        self.host_account_id = ::std::option::Option::None;
    }

    pub fn has_host_account_id(&self) -> bool {
        self.host_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_host_account_id(&mut self, v: u32) {
        self.host_account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 client_account_id = 2;

    pub fn client_account_id(&self) -> u32 {
        self.client_account_id.unwrap_or(0)
    }

    pub fn clear_client_account_id(&mut self) {
        self.client_account_id = ::std::option::Option::None;
    }

    pub fn has_client_account_id(&self) -> bool {
        self.client_account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_account_id(&mut self, v: u32) {
        self.client_account_id = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 3;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional int32 device_form_factor = 4;

    pub fn device_form_factor(&self) -> i32 {
        self.device_form_factor.unwrap_or(0)
    }

    pub fn clear_device_form_factor(&mut self) {
        self.device_form_factor = ::std::option::Option::None;
    }

    pub fn has_device_form_factor(&self) -> bool {
        self.device_form_factor.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_form_factor(&mut self, v: i32) {
        self.device_form_factor = ::std::option::Option::Some(v);
    }

    // optional bool remote_play_together = 5;

    pub fn remote_play_together(&self) -> bool {
        self.remote_play_together.unwrap_or(false)
    }

    pub fn clear_remote_play_together(&mut self) {
        self.remote_play_together = ::std::option::Option::None;
    }

    pub fn has_remote_play_together(&self) -> bool {
        self.remote_play_together.is_some()
    }

    // Param is passed by value, moved
    pub fn set_remote_play_together(&mut self, v: bool) {
        self.remote_play_together = ::std::option::Option::Some(v);
    }

    // optional bool guest_session = 6;

    pub fn guest_session(&self) -> bool {
        self.guest_session.unwrap_or(false)
    }

    pub fn clear_guest_session(&mut self) {
        self.guest_session = ::std::option::Option::None;
    }

    pub fn has_guest_session(&self) -> bool {
        self.guest_session.is_some()
    }

    // Param is passed by value, moved
    pub fn set_guest_session(&mut self, v: bool) {
        self.guest_session = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CRemotePlay_SessionStarted_Request {
    const NAME: &'static str = "CRemotePlay_SessionStarted_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.host_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.client_account_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.device_form_factor = ::std::option::Option::Some(is.read_int32()?);
                },
                40 => {
                    self.remote_play_together = ::std::option::Option::Some(is.read_bool()?);
                },
                48 => {
                    self.guest_session = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.host_account_id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.client_account_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.device_form_factor {
            my_size += ::protobuf::rt::int32_size(4, v);
        }
        if let Some(v) = self.remote_play_together {
            my_size += 1 + 1;
        }
        if let Some(v) = self.guest_session {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.host_account_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.client_account_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.device_form_factor {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.remote_play_together {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.guest_session {
            os.write_bool(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemotePlay_SessionStarted_Request {
        CRemotePlay_SessionStarted_Request::new()
    }

    fn clear(&mut self) {
        self.host_account_id = ::std::option::Option::None;
        self.client_account_id = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.device_form_factor = ::std::option::Option::None;
        self.remote_play_together = ::std::option::Option::None;
        self.guest_session = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemotePlay_SessionStarted_Request {
        static instance: CRemotePlay_SessionStarted_Request = CRemotePlay_SessionStarted_Request {
            host_account_id: ::std::option::Option::None,
            client_account_id: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            device_form_factor: ::std::option::Option::None,
            remote_play_together: ::std::option::Option::None,
            guest_session: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CRemotePlay_SessionStarted_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemotePlay_SessionStarted_Response {
    // message fields
    // @@protoc_insertion_point(field:CRemotePlay_SessionStarted_Response.record_id)
    pub record_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemotePlay_SessionStarted_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemotePlay_SessionStarted_Response {
    fn default() -> &'a CRemotePlay_SessionStarted_Response {
        <CRemotePlay_SessionStarted_Response as ::protobuf::Message>::default_instance()
    }
}

impl CRemotePlay_SessionStarted_Response {
    pub fn new() -> CRemotePlay_SessionStarted_Response {
        ::std::default::Default::default()
    }

    // optional fixed64 record_id = 1;

    pub fn record_id(&self) -> u64 {
        self.record_id.unwrap_or(0)
    }

    pub fn clear_record_id(&mut self) {
        self.record_id = ::std::option::Option::None;
    }

    pub fn has_record_id(&self) -> bool {
        self.record_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_record_id(&mut self, v: u64) {
        self.record_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CRemotePlay_SessionStarted_Response {
    const NAME: &'static str = "CRemotePlay_SessionStarted_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.record_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.record_id {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.record_id {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemotePlay_SessionStarted_Response {
        CRemotePlay_SessionStarted_Response::new()
    }

    fn clear(&mut self) {
        self.record_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemotePlay_SessionStarted_Response {
        static instance: CRemotePlay_SessionStarted_Response = CRemotePlay_SessionStarted_Response {
            record_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Let the server know that we stopped a Remote Play session"]
// @@protoc_insertion_point(message:CRemotePlay_SessionStopped_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemotePlay_SessionStopped_Notification {
    // message fields
    // @@protoc_insertion_point(field:CRemotePlay_SessionStopped_Notification.record_id)
    pub record_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CRemotePlay_SessionStopped_Notification.used_x264)
    pub used_x264: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CRemotePlay_SessionStopped_Notification.used_h264)
    pub used_h264: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CRemotePlay_SessionStopped_Notification.used_hevc)
    pub used_hevc: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemotePlay_SessionStopped_Notification.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemotePlay_SessionStopped_Notification {
    fn default() -> &'a CRemotePlay_SessionStopped_Notification {
        <CRemotePlay_SessionStopped_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CRemotePlay_SessionStopped_Notification {
    pub fn new() -> CRemotePlay_SessionStopped_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 record_id = 1;

    pub fn record_id(&self) -> u64 {
        self.record_id.unwrap_or(0)
    }

    pub fn clear_record_id(&mut self) {
        self.record_id = ::std::option::Option::None;
    }

    pub fn has_record_id(&self) -> bool {
        self.record_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_record_id(&mut self, v: u64) {
        self.record_id = ::std::option::Option::Some(v);
    }

    // optional bool used_x264 = 2;

    pub fn used_x264(&self) -> bool {
        self.used_x264.unwrap_or(false)
    }

    pub fn clear_used_x264(&mut self) {
        self.used_x264 = ::std::option::Option::None;
    }

    pub fn has_used_x264(&self) -> bool {
        self.used_x264.is_some()
    }

    // Param is passed by value, moved
    pub fn set_used_x264(&mut self, v: bool) {
        self.used_x264 = ::std::option::Option::Some(v);
    }

    // optional bool used_h264 = 3;

    pub fn used_h264(&self) -> bool {
        self.used_h264.unwrap_or(false)
    }

    pub fn clear_used_h264(&mut self) {
        self.used_h264 = ::std::option::Option::None;
    }

    pub fn has_used_h264(&self) -> bool {
        self.used_h264.is_some()
    }

    // Param is passed by value, moved
    pub fn set_used_h264(&mut self, v: bool) {
        self.used_h264 = ::std::option::Option::Some(v);
    }

    // optional bool used_hevc = 4;

    pub fn used_hevc(&self) -> bool {
        self.used_hevc.unwrap_or(false)
    }

    pub fn clear_used_hevc(&mut self) {
        self.used_hevc = ::std::option::Option::None;
    }

    pub fn has_used_hevc(&self) -> bool {
        self.used_hevc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_used_hevc(&mut self, v: bool) {
        self.used_hevc = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CRemotePlay_SessionStopped_Notification {
    const NAME: &'static str = "CRemotePlay_SessionStopped_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.record_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.used_x264 = ::std::option::Option::Some(is.read_bool()?);
                },
                24 => {
                    self.used_h264 = ::std::option::Option::Some(is.read_bool()?);
                },
                32 => {
                    self.used_hevc = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.record_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.used_x264 {
            my_size += 1 + 1;
        }
        if let Some(v) = self.used_h264 {
            my_size += 1 + 1;
        }
        if let Some(v) = self.used_hevc {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.record_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.used_x264 {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.used_h264 {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.used_hevc {
            os.write_bool(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemotePlay_SessionStopped_Notification {
        CRemotePlay_SessionStopped_Notification::new()
    }

    fn clear(&mut self) {
        self.record_id = ::std::option::Option::None;
        self.used_x264 = ::std::option::Option::None;
        self.used_h264 = ::std::option::Option::None;
        self.used_hevc = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemotePlay_SessionStopped_Notification {
        static instance: CRemotePlay_SessionStopped_Notification = CRemotePlay_SessionStopped_Notification {
            record_id: ::std::option::Option::None,
            used_x264: ::std::option::Option::None,
            used_h264: ::std::option::Option::None,
            used_hevc: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Send a Remote Play Together packet to a Steam client"]
// @@protoc_insertion_point(message:CRemotePlayTogether_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemotePlayTogether_Notification {
    // message fields
    // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.steamid)
    pub steamid: ::std::option::Option<u64>,
    // message oneof groups
    pub Message: ::std::option::Option<cremote_play_together_notification::Message>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemotePlayTogether_Notification.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemotePlayTogether_Notification {
    fn default() -> &'a CRemotePlayTogether_Notification {
        <CRemotePlayTogether_Notification as ::protobuf::Message>::default_instance()
    }
}

impl CRemotePlayTogether_Notification {
    pub fn new() -> CRemotePlayTogether_Notification {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional .CRemotePlayTogether_Notification.GroupUpdated group_updated = 2;

    pub fn group_updated(&self) -> &cremote_play_together_notification::GroupUpdated {
        match self.Message {
            ::std::option::Option::Some(cremote_play_together_notification::Message::GroupUpdated(ref v)) => v,
            _ => <cremote_play_together_notification::GroupUpdated as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_group_updated(&mut self) {
        self.Message = ::std::option::Option::None;
    }

    pub fn has_group_updated(&self) -> bool {
        match self.Message {
            ::std::option::Option::Some(cremote_play_together_notification::Message::GroupUpdated(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_group_updated(&mut self, v: cremote_play_together_notification::GroupUpdated) {
        self.Message = ::std::option::Option::Some(cremote_play_together_notification::Message::GroupUpdated(v))
    }

    // Mutable pointer to the field.
    pub fn mut_group_updated(&mut self) -> &mut cremote_play_together_notification::GroupUpdated {
        if let ::std::option::Option::Some(cremote_play_together_notification::Message::GroupUpdated(_)) = self.Message {
        } else {
            self.Message = ::std::option::Option::Some(cremote_play_together_notification::Message::GroupUpdated(cremote_play_together_notification::GroupUpdated::new()));
        }
        match self.Message {
            ::std::option::Option::Some(cremote_play_together_notification::Message::GroupUpdated(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_group_updated(&mut self) -> cremote_play_together_notification::GroupUpdated {
        if self.has_group_updated() {
            match self.Message.take() {
                ::std::option::Option::Some(cremote_play_together_notification::Message::GroupUpdated(v)) => v,
                _ => panic!(),
            }
        } else {
            cremote_play_together_notification::GroupUpdated::new()
        }
    }
}

impl ::protobuf::Message for CRemotePlayTogether_Notification {
    const NAME: &'static str = "CRemotePlayTogether_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    self.Message = ::std::option::Option::Some(cremote_play_together_notification::Message::GroupUpdated(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let ::std::option::Option::Some(ref v) = self.Message {
            match v {
                &cremote_play_together_notification::Message::GroupUpdated(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let ::std::option::Option::Some(ref v) = self.Message {
            match v {
                &cremote_play_together_notification::Message::GroupUpdated(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemotePlayTogether_Notification {
        CRemotePlayTogether_Notification::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.Message = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemotePlayTogether_Notification {
        static instance: CRemotePlayTogether_Notification = CRemotePlayTogether_Notification {
            steamid: ::std::option::Option::None,
            Message: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CRemotePlayTogether_Notification`
pub mod cremote_play_together_notification {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:CRemotePlayTogether_Notification.Message)
    pub enum Message {
        // @@protoc_insertion_point(oneof_field:CRemotePlayTogether_Notification.group_updated)
        GroupUpdated(GroupUpdated),
    }

    impl ::protobuf::Oneof for Message {
    }

    impl Message {
    }
    // @@protoc_insertion_point(message:CRemotePlayTogether_Notification.Player)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Player {
        // message fields
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.Player.steamid)
        pub steamid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.Player.guestid)
        pub guestid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.Player.avatar_hash)
        pub avatar_hash: ::std::option::Option<::std::vec::Vec<u8>>,
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.Player.keyboard_enabled)
        pub keyboard_enabled: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.Player.mouse_enabled)
        pub mouse_enabled: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.Player.controller_enabled)
        pub controller_enabled: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:CRemotePlayTogether_Notification.Player.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Player {
        fn default() -> &'a Player {
            <Player as ::protobuf::Message>::default_instance()
        }
    }

    impl Player {
        pub fn new() -> Player {
            ::std::default::Default::default()
        }

        // optional fixed64 steamid = 1;

        pub fn steamid(&self) -> u64 {
            self.steamid.unwrap_or(0)
        }

        pub fn clear_steamid(&mut self) {
            self.steamid = ::std::option::Option::None;
        }

        pub fn has_steamid(&self) -> bool {
            self.steamid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_steamid(&mut self, v: u64) {
            self.steamid = ::std::option::Option::Some(v);
        }

        // optional uint32 guestid = 2;

        pub fn guestid(&self) -> u32 {
            self.guestid.unwrap_or(0)
        }

        pub fn clear_guestid(&mut self) {
            self.guestid = ::std::option::Option::None;
        }

        pub fn has_guestid(&self) -> bool {
            self.guestid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_guestid(&mut self, v: u32) {
            self.guestid = ::std::option::Option::Some(v);
        }

        // optional bytes avatar_hash = 3;

        pub fn avatar_hash(&self) -> &[u8] {
            match self.avatar_hash.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_avatar_hash(&mut self) {
            self.avatar_hash = ::std::option::Option::None;
        }

        pub fn has_avatar_hash(&self) -> bool {
            self.avatar_hash.is_some()
        }

        // Param is passed by value, moved
        pub fn set_avatar_hash(&mut self, v: ::std::vec::Vec<u8>) {
            self.avatar_hash = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_avatar_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.avatar_hash.is_none() {
                self.avatar_hash = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.avatar_hash.as_mut().unwrap()
        }

        // Take field
        pub fn take_avatar_hash(&mut self) -> ::std::vec::Vec<u8> {
            self.avatar_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }

        // optional bool keyboard_enabled = 4;

        pub fn keyboard_enabled(&self) -> bool {
            self.keyboard_enabled.unwrap_or(false)
        }

        pub fn clear_keyboard_enabled(&mut self) {
            self.keyboard_enabled = ::std::option::Option::None;
        }

        pub fn has_keyboard_enabled(&self) -> bool {
            self.keyboard_enabled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_keyboard_enabled(&mut self, v: bool) {
            self.keyboard_enabled = ::std::option::Option::Some(v);
        }

        // optional bool mouse_enabled = 5;

        pub fn mouse_enabled(&self) -> bool {
            self.mouse_enabled.unwrap_or(false)
        }

        pub fn clear_mouse_enabled(&mut self) {
            self.mouse_enabled = ::std::option::Option::None;
        }

        pub fn has_mouse_enabled(&self) -> bool {
            self.mouse_enabled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_mouse_enabled(&mut self, v: bool) {
            self.mouse_enabled = ::std::option::Option::Some(v);
        }

        // optional bool controller_enabled = 6;

        pub fn controller_enabled(&self) -> bool {
            self.controller_enabled.unwrap_or(false)
        }

        pub fn clear_controller_enabled(&mut self) {
            self.controller_enabled = ::std::option::Option::None;
        }

        pub fn has_controller_enabled(&self) -> bool {
            self.controller_enabled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_controller_enabled(&mut self, v: bool) {
            self.controller_enabled = ::std::option::Option::Some(v);
        }
    }

    impl ::protobuf::Message for Player {
        const NAME: &'static str = "Player";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    9 => {
                        self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    16 => {
                        self.guestid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    26 => {
                        self.avatar_hash = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    32 => {
                        self.keyboard_enabled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    40 => {
                        self.mouse_enabled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    48 => {
                        self.controller_enabled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.steamid {
                my_size += 1 + 8;
            }
            if let Some(v) = self.guestid {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.avatar_hash.as_ref() {
                my_size += ::protobuf::rt::bytes_size(3, &v);
            }
            if let Some(v) = self.keyboard_enabled {
                my_size += 1 + 1;
            }
            if let Some(v) = self.mouse_enabled {
                my_size += 1 + 1;
            }
            if let Some(v) = self.controller_enabled {
                my_size += 1 + 1;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.steamid {
                os.write_fixed64(1, v)?;
            }
            if let Some(v) = self.guestid {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.avatar_hash.as_ref() {
                os.write_bytes(3, v)?;
            }
            if let Some(v) = self.keyboard_enabled {
                os.write_bool(4, v)?;
            }
            if let Some(v) = self.mouse_enabled {
                os.write_bool(5, v)?;
            }
            if let Some(v) = self.controller_enabled {
                os.write_bool(6, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Player {
            Player::new()
        }

        fn clear(&mut self) {
            self.steamid = ::std::option::Option::None;
            self.guestid = ::std::option::Option::None;
            self.avatar_hash = ::std::option::Option::None;
            self.keyboard_enabled = ::std::option::Option::None;
            self.mouse_enabled = ::std::option::Option::None;
            self.controller_enabled = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Player {
            static instance: Player = Player {
                steamid: ::std::option::Option::None,
                guestid: ::std::option::Option::None,
                avatar_hash: ::std::option::Option::None,
                keyboard_enabled: ::std::option::Option::None,
                mouse_enabled: ::std::option::Option::None,
                controller_enabled: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CRemotePlayTogether_Notification.ControllerSlot_obsolete)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ControllerSlot_obsolete {
        // message fields
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.ControllerSlot_obsolete.slotid)
        pub slotid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.ControllerSlot_obsolete.steamid)
        pub steamid: ::std::option::Option<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:CRemotePlayTogether_Notification.ControllerSlot_obsolete.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ControllerSlot_obsolete {
        fn default() -> &'a ControllerSlot_obsolete {
            <ControllerSlot_obsolete as ::protobuf::Message>::default_instance()
        }
    }

    impl ControllerSlot_obsolete {
        pub fn new() -> ControllerSlot_obsolete {
            ::std::default::Default::default()
        }

        // optional uint32 slotid = 1;

        pub fn slotid(&self) -> u32 {
            self.slotid.unwrap_or(0)
        }

        pub fn clear_slotid(&mut self) {
            self.slotid = ::std::option::Option::None;
        }

        pub fn has_slotid(&self) -> bool {
            self.slotid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_slotid(&mut self, v: u32) {
            self.slotid = ::std::option::Option::Some(v);
        }

        // optional fixed64 steamid = 2;

        pub fn steamid(&self) -> u64 {
            self.steamid.unwrap_or(0)
        }

        pub fn clear_steamid(&mut self) {
            self.steamid = ::std::option::Option::None;
        }

        pub fn has_steamid(&self) -> bool {
            self.steamid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_steamid(&mut self, v: u64) {
            self.steamid = ::std::option::Option::Some(v);
        }
    }

    impl ::protobuf::Message for ControllerSlot_obsolete {
        const NAME: &'static str = "ControllerSlot_obsolete";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.slotid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    17 => {
                        self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.slotid {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.steamid {
                my_size += 1 + 8;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.slotid {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.steamid {
                os.write_fixed64(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ControllerSlot_obsolete {
            ControllerSlot_obsolete::new()
        }

        fn clear(&mut self) {
            self.slotid = ::std::option::Option::None;
            self.steamid = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ControllerSlot_obsolete {
            static instance: ControllerSlot_obsolete = ControllerSlot_obsolete {
                slotid: ::std::option::Option::None,
                steamid: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CRemotePlayTogether_Notification.ControllerSlot)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ControllerSlot {
        // message fields
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.ControllerSlot.slotid)
        pub slotid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.ControllerSlot.player)
        pub player: ::protobuf::MessageField<Player>,
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.ControllerSlot.controller_type)
        pub controller_type: ::std::option::Option<i32>,
        // special fields
        // @@protoc_insertion_point(special_field:CRemotePlayTogether_Notification.ControllerSlot.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ControllerSlot {
        fn default() -> &'a ControllerSlot {
            <ControllerSlot as ::protobuf::Message>::default_instance()
        }
    }

    impl ControllerSlot {
        pub fn new() -> ControllerSlot {
            ::std::default::Default::default()
        }

        // optional uint32 slotid = 1;

        pub fn slotid(&self) -> u32 {
            self.slotid.unwrap_or(0)
        }

        pub fn clear_slotid(&mut self) {
            self.slotid = ::std::option::Option::None;
        }

        pub fn has_slotid(&self) -> bool {
            self.slotid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_slotid(&mut self, v: u32) {
            self.slotid = ::std::option::Option::Some(v);
        }

        // optional int32 controller_type = 3;

        pub fn controller_type(&self) -> i32 {
            self.controller_type.unwrap_or(0)
        }

        pub fn clear_controller_type(&mut self) {
            self.controller_type = ::std::option::Option::None;
        }

        pub fn has_controller_type(&self) -> bool {
            self.controller_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_controller_type(&mut self, v: i32) {
            self.controller_type = ::std::option::Option::Some(v);
        }
    }

    impl ::protobuf::Message for ControllerSlot {
        const NAME: &'static str = "ControllerSlot";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.slotid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.player)?;
                    },
                    24 => {
                        self.controller_type = ::std::option::Option::Some(is.read_int32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.slotid {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.player.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.controller_type {
                my_size += ::protobuf::rt::int32_size(3, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.slotid {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.player.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            if let Some(v) = self.controller_type {
                os.write_int32(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ControllerSlot {
            ControllerSlot::new()
        }

        fn clear(&mut self) {
            self.slotid = ::std::option::Option::None;
            self.player.clear();
            self.controller_type = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ControllerSlot {
            static instance: ControllerSlot = ControllerSlot {
                slotid: ::std::option::Option::None,
                player: ::protobuf::MessageField::none(),
                controller_type: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    // @@protoc_insertion_point(message:CRemotePlayTogether_Notification.GroupUpdated)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct GroupUpdated {
        // message fields
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.GroupUpdated.host_steamid)
        pub host_steamid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.GroupUpdated.host_clientid)
        pub host_clientid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.GroupUpdated.players_obsolete)
        pub players_obsolete: ::std::vec::Vec<u64>,
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.GroupUpdated.host_gameid)
        pub host_gameid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.GroupUpdated.controller_slots_obsolete)
        pub controller_slots_obsolete: ::std::vec::Vec<ControllerSlot_obsolete>,
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.GroupUpdated.has_new_players)
        pub has_new_players: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.GroupUpdated.player_slots)
        pub player_slots: ::std::vec::Vec<Player>,
        // @@protoc_insertion_point(field:CRemotePlayTogether_Notification.GroupUpdated.controller_slots)
        pub controller_slots: ::std::vec::Vec<ControllerSlot>,
        // special fields
        // @@protoc_insertion_point(special_field:CRemotePlayTogether_Notification.GroupUpdated.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a GroupUpdated {
        fn default() -> &'a GroupUpdated {
            <GroupUpdated as ::protobuf::Message>::default_instance()
        }
    }

    impl GroupUpdated {
        pub fn new() -> GroupUpdated {
            ::std::default::Default::default()
        }

        // optional fixed64 host_steamid = 1;

        pub fn host_steamid(&self) -> u64 {
            self.host_steamid.unwrap_or(0)
        }

        pub fn clear_host_steamid(&mut self) {
            self.host_steamid = ::std::option::Option::None;
        }

        pub fn has_host_steamid(&self) -> bool {
            self.host_steamid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_host_steamid(&mut self, v: u64) {
            self.host_steamid = ::std::option::Option::Some(v);
        }

        // optional fixed64 host_clientid = 2;

        pub fn host_clientid(&self) -> u64 {
            self.host_clientid.unwrap_or(0)
        }

        pub fn clear_host_clientid(&mut self) {
            self.host_clientid = ::std::option::Option::None;
        }

        pub fn has_host_clientid(&self) -> bool {
            self.host_clientid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_host_clientid(&mut self, v: u64) {
            self.host_clientid = ::std::option::Option::Some(v);
        }

        // optional fixed64 host_gameid = 4;

        pub fn host_gameid(&self) -> u64 {
            self.host_gameid.unwrap_or(0)
        }

        pub fn clear_host_gameid(&mut self) {
            self.host_gameid = ::std::option::Option::None;
        }

        pub fn has_host_gameid(&self) -> bool {
            self.host_gameid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_host_gameid(&mut self, v: u64) {
            self.host_gameid = ::std::option::Option::Some(v);
        }

        // optional bool has_new_players = 6;

        pub fn has_new_players(&self) -> bool {
            self.has_new_players.unwrap_or(false)
        }

        pub fn clear_has_new_players(&mut self) {
            self.has_new_players = ::std::option::Option::None;
        }

        pub fn has_has_new_players(&self) -> bool {
            self.has_new_players.is_some()
        }

        // Param is passed by value, moved
        pub fn set_has_new_players(&mut self, v: bool) {
            self.has_new_players = ::std::option::Option::Some(v);
        }
    }

    impl ::protobuf::Message for GroupUpdated {
        const NAME: &'static str = "GroupUpdated";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    9 => {
                        self.host_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    17 => {
                        self.host_clientid = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    26 => {
                        is.read_repeated_packed_fixed64_into(&mut self.players_obsolete)?;
                    },
                    25 => {
                        self.players_obsolete.push(is.read_fixed64()?);
                    },
                    33 => {
                        self.host_gameid = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    42 => {
                        self.controller_slots_obsolete.push(is.read_message()?);
                    },
                    48 => {
                        self.has_new_players = ::std::option::Option::Some(is.read_bool()?);
                    },
                    58 => {
                        self.player_slots.push(is.read_message()?);
                    },
                    66 => {
                        self.controller_slots.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.host_steamid {
                my_size += 1 + 8;
            }
            if let Some(v) = self.host_clientid {
                my_size += 1 + 8;
            }
            my_size += 9 * self.players_obsolete.len() as u64;
            if let Some(v) = self.host_gameid {
                my_size += 1 + 8;
            }
            for value in &self.controller_slots_obsolete {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            if let Some(v) = self.has_new_players {
                my_size += 1 + 1;
            }
            for value in &self.player_slots {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            for value in &self.controller_slots {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.host_steamid {
                os.write_fixed64(1, v)?;
            }
            if let Some(v) = self.host_clientid {
                os.write_fixed64(2, v)?;
            }
            for v in &self.players_obsolete {
                os.write_fixed64(3, *v)?;
            };
            if let Some(v) = self.host_gameid {
                os.write_fixed64(4, v)?;
            }
            for v in &self.controller_slots_obsolete {
                ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
            };
            if let Some(v) = self.has_new_players {
                os.write_bool(6, v)?;
            }
            for v in &self.player_slots {
                ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
            };
            for v in &self.controller_slots {
                ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> GroupUpdated {
            GroupUpdated::new()
        }

        fn clear(&mut self) {
            self.host_steamid = ::std::option::Option::None;
            self.host_clientid = ::std::option::Option::None;
            self.players_obsolete.clear();
            self.host_gameid = ::std::option::Option::None;
            self.controller_slots_obsolete.clear();
            self.has_new_players = ::std::option::Option::None;
            self.player_slots.clear();
            self.controller_slots.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static GroupUpdated {
            static instance: GroupUpdated = GroupUpdated {
                host_steamid: ::std::option::Option::None,
                host_clientid: ::std::option::Option::None,
                players_obsolete: ::std::vec::Vec::new(),
                host_gameid: ::std::option::Option::None,
                controller_slots_obsolete: ::std::vec::Vec::new(),
                has_new_players: ::std::option::Option::None,
                player_slots: ::std::vec::Vec::new(),
                controller_slots: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

#[doc = "Create a Remote Play Together invitation"]
// @@protoc_insertion_point(message:CRemoteClient_CreateRemotePlayTogetherInvitation_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_CreateRemotePlayTogetherInvitation_Request {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_CreateRemotePlayTogetherInvitation_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CRemoteClient_CreateRemotePlayTogetherInvitation_Request.launch_parameters)
    pub launch_parameters: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_CreateRemotePlayTogetherInvitation_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_CreateRemotePlayTogetherInvitation_Request {
    fn default() -> &'a CRemoteClient_CreateRemotePlayTogetherInvitation_Request {
        <CRemoteClient_CreateRemotePlayTogetherInvitation_Request as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_CreateRemotePlayTogetherInvitation_Request {
    pub fn new() -> CRemoteClient_CreateRemotePlayTogetherInvitation_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional string launch_parameters = 2;

    pub fn launch_parameters(&self) -> &str {
        match self.launch_parameters.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_launch_parameters(&mut self) {
        self.launch_parameters = ::std::option::Option::None;
    }

    pub fn has_launch_parameters(&self) -> bool {
        self.launch_parameters.is_some()
    }

    // Param is passed by value, moved
    pub fn set_launch_parameters(&mut self, v: ::std::string::String) {
        self.launch_parameters = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_launch_parameters(&mut self) -> &mut ::std::string::String {
        if self.launch_parameters.is_none() {
            self.launch_parameters = ::std::option::Option::Some(::std::string::String::new());
        }
        self.launch_parameters.as_mut().unwrap()
    }

    // Take field
    pub fn take_launch_parameters(&mut self) -> ::std::string::String {
        self.launch_parameters.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CRemoteClient_CreateRemotePlayTogetherInvitation_Request {
    const NAME: &'static str = "CRemoteClient_CreateRemotePlayTogetherInvitation_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.launch_parameters = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.launch_parameters.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.launch_parameters.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_CreateRemotePlayTogetherInvitation_Request {
        CRemoteClient_CreateRemotePlayTogetherInvitation_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.launch_parameters = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_CreateRemotePlayTogetherInvitation_Request {
        static instance: CRemoteClient_CreateRemotePlayTogetherInvitation_Request = CRemoteClient_CreateRemotePlayTogetherInvitation_Request {
            appid: ::std::option::Option::None,
            launch_parameters: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CRemoteClient_CreateRemotePlayTogetherInvitation_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_CreateRemotePlayTogetherInvitation_Response {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_CreateRemotePlayTogetherInvitation_Response.invitation_code)
    pub invitation_code: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_CreateRemotePlayTogetherInvitation_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_CreateRemotePlayTogetherInvitation_Response {
    fn default() -> &'a CRemoteClient_CreateRemotePlayTogetherInvitation_Response {
        <CRemoteClient_CreateRemotePlayTogetherInvitation_Response as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_CreateRemotePlayTogetherInvitation_Response {
    pub fn new() -> CRemoteClient_CreateRemotePlayTogetherInvitation_Response {
        ::std::default::Default::default()
    }

    // optional string invitation_code = 1;

    pub fn invitation_code(&self) -> &str {
        match self.invitation_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_invitation_code(&mut self) {
        self.invitation_code = ::std::option::Option::None;
    }

    pub fn has_invitation_code(&self) -> bool {
        self.invitation_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invitation_code(&mut self, v: ::std::string::String) {
        self.invitation_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invitation_code(&mut self) -> &mut ::std::string::String {
        if self.invitation_code.is_none() {
            self.invitation_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.invitation_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_invitation_code(&mut self) -> ::std::string::String {
        self.invitation_code.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CRemoteClient_CreateRemotePlayTogetherInvitation_Response {
    const NAME: &'static str = "CRemoteClient_CreateRemotePlayTogetherInvitation_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.invitation_code = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.invitation_code.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.invitation_code.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_CreateRemotePlayTogetherInvitation_Response {
        CRemoteClient_CreateRemotePlayTogetherInvitation_Response::new()
    }

    fn clear(&mut self) {
        self.invitation_code = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_CreateRemotePlayTogetherInvitation_Response {
        static instance: CRemoteClient_CreateRemotePlayTogetherInvitation_Response = CRemoteClient_CreateRemotePlayTogetherInvitation_Response {
            invitation_code: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Delete a Remote Play Together invitation"]
// @@protoc_insertion_point(message:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_DeleteRemotePlayTogetherInvitation_Request {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request.invitation_code)
    pub invitation_code: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_DeleteRemotePlayTogetherInvitation_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_DeleteRemotePlayTogetherInvitation_Request {
    fn default() -> &'a CRemoteClient_DeleteRemotePlayTogetherInvitation_Request {
        <CRemoteClient_DeleteRemotePlayTogetherInvitation_Request as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_DeleteRemotePlayTogetherInvitation_Request {
    pub fn new() -> CRemoteClient_DeleteRemotePlayTogetherInvitation_Request {
        ::std::default::Default::default()
    }

    // optional string invitation_code = 1;

    pub fn invitation_code(&self) -> &str {
        match self.invitation_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_invitation_code(&mut self) {
        self.invitation_code = ::std::option::Option::None;
    }

    pub fn has_invitation_code(&self) -> bool {
        self.invitation_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invitation_code(&mut self, v: ::std::string::String) {
        self.invitation_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invitation_code(&mut self) -> &mut ::std::string::String {
        if self.invitation_code.is_none() {
            self.invitation_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.invitation_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_invitation_code(&mut self) -> ::std::string::String {
        self.invitation_code.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CRemoteClient_DeleteRemotePlayTogetherInvitation_Request {
    const NAME: &'static str = "CRemoteClient_DeleteRemotePlayTogetherInvitation_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.invitation_code = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.invitation_code.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.invitation_code.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_DeleteRemotePlayTogetherInvitation_Request {
        CRemoteClient_DeleteRemotePlayTogetherInvitation_Request::new()
    }

    fn clear(&mut self) {
        self.invitation_code = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_DeleteRemotePlayTogetherInvitation_Request {
        static instance: CRemoteClient_DeleteRemotePlayTogetherInvitation_Request = CRemoteClient_DeleteRemotePlayTogetherInvitation_Request {
            invitation_code: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CRemoteClient_DeleteRemotePlayTogetherInvitation_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_DeleteRemotePlayTogetherInvitation_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_DeleteRemotePlayTogetherInvitation_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_DeleteRemotePlayTogetherInvitation_Response {
    fn default() -> &'a CRemoteClient_DeleteRemotePlayTogetherInvitation_Response {
        <CRemoteClient_DeleteRemotePlayTogetherInvitation_Response as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_DeleteRemotePlayTogetherInvitation_Response {
    pub fn new() -> CRemoteClient_DeleteRemotePlayTogetherInvitation_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CRemoteClient_DeleteRemotePlayTogetherInvitation_Response {
    const NAME: &'static str = "CRemoteClient_DeleteRemotePlayTogetherInvitation_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_DeleteRemotePlayTogetherInvitation_Response {
        CRemoteClient_DeleteRemotePlayTogetherInvitation_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_DeleteRemotePlayTogetherInvitation_Response {
        static instance: CRemoteClient_DeleteRemotePlayTogetherInvitation_Response = CRemoteClient_DeleteRemotePlayTogetherInvitation_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CRemoteClient_LookupRemotePlayTogetherInvitation_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_LookupRemotePlayTogetherInvitation_Request {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_LookupRemotePlayTogetherInvitation_Request.invitation_code)
    pub invitation_code: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_LookupRemotePlayTogetherInvitation_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_LookupRemotePlayTogetherInvitation_Request {
    fn default() -> &'a CRemoteClient_LookupRemotePlayTogetherInvitation_Request {
        <CRemoteClient_LookupRemotePlayTogetherInvitation_Request as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_LookupRemotePlayTogetherInvitation_Request {
    pub fn new() -> CRemoteClient_LookupRemotePlayTogetherInvitation_Request {
        ::std::default::Default::default()
    }

    // optional string invitation_code = 1;

    pub fn invitation_code(&self) -> &str {
        match self.invitation_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_invitation_code(&mut self) {
        self.invitation_code = ::std::option::Option::None;
    }

    pub fn has_invitation_code(&self) -> bool {
        self.invitation_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invitation_code(&mut self, v: ::std::string::String) {
        self.invitation_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invitation_code(&mut self) -> &mut ::std::string::String {
        if self.invitation_code.is_none() {
            self.invitation_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.invitation_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_invitation_code(&mut self) -> ::std::string::String {
        self.invitation_code.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CRemoteClient_LookupRemotePlayTogetherInvitation_Request {
    const NAME: &'static str = "CRemoteClient_LookupRemotePlayTogetherInvitation_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.invitation_code = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.invitation_code.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.invitation_code.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_LookupRemotePlayTogetherInvitation_Request {
        CRemoteClient_LookupRemotePlayTogetherInvitation_Request::new()
    }

    fn clear(&mut self) {
        self.invitation_code = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_LookupRemotePlayTogetherInvitation_Request {
        static instance: CRemoteClient_LookupRemotePlayTogetherInvitation_Request = CRemoteClient_LookupRemotePlayTogetherInvitation_Request {
            invitation_code: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CRemoteClient_LookupRemotePlayTogetherInvitation_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CRemoteClient_LookupRemotePlayTogetherInvitation_Response {
    // message fields
    // @@protoc_insertion_point(field:CRemoteClient_LookupRemotePlayTogetherInvitation_Response.invitation_url)
    pub invitation_url: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CRemoteClient_LookupRemotePlayTogetherInvitation_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CRemoteClient_LookupRemotePlayTogetherInvitation_Response {
    fn default() -> &'a CRemoteClient_LookupRemotePlayTogetherInvitation_Response {
        <CRemoteClient_LookupRemotePlayTogetherInvitation_Response as ::protobuf::Message>::default_instance()
    }
}

impl CRemoteClient_LookupRemotePlayTogetherInvitation_Response {
    pub fn new() -> CRemoteClient_LookupRemotePlayTogetherInvitation_Response {
        ::std::default::Default::default()
    }

    // optional string invitation_url = 1;

    pub fn invitation_url(&self) -> &str {
        match self.invitation_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_invitation_url(&mut self) {
        self.invitation_url = ::std::option::Option::None;
    }

    pub fn has_invitation_url(&self) -> bool {
        self.invitation_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invitation_url(&mut self, v: ::std::string::String) {
        self.invitation_url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invitation_url(&mut self) -> &mut ::std::string::String {
        if self.invitation_url.is_none() {
            self.invitation_url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.invitation_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_invitation_url(&mut self) -> ::std::string::String {
        self.invitation_url.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CRemoteClient_LookupRemotePlayTogetherInvitation_Response {
    const NAME: &'static str = "CRemoteClient_LookupRemotePlayTogetherInvitation_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.invitation_url = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.invitation_url.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.invitation_url.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CRemoteClient_LookupRemotePlayTogetherInvitation_Response {
        CRemoteClient_LookupRemotePlayTogetherInvitation_Response::new()
    }

    fn clear(&mut self) {
        self.invitation_url = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CRemoteClient_LookupRemotePlayTogetherInvitation_Response {
        static instance: CRemoteClient_LookupRemotePlayTogetherInvitation_Response = CRemoteClient_LookupRemotePlayTogetherInvitation_Response {
            invitation_url: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}
impl crate::RpcMessage for CRemoteClient_CreateSession_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemoteClient_CreateSession_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemoteClient_StartPairing_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemoteClient_StartPairing_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemoteClient_SetPairingInfo_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemoteClient_SetPairingInfo_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemoteClient_GetPairingInfo_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemoteClient_GetPairingInfo_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemoteClient_CancelPairing_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemoteClient_CancelPairing_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemoteClient_RegisterStatusUpdate_Notification {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemoteClient_UnregisterStatusUpdate_Notification {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemoteClient_Online_Notification {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemoteClient_RemotePacket_Notification {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemoteClient_ReplyPacket_Notification {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemoteClient_GetReplies_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemoteClient_GetReplies_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemoteClient_AllocateTURNServer_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemoteClient_AllocateTURNServer_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemoteClient_AllocateRelayServer_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemoteClient_AllocateRelayServer_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemoteClient_AllocateSDR_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemoteClient_AllocateSDR_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemoteClient_SteamBroadcast_Notification {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemoteClient_SteamToSteam_Notification {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemotePlay_SessionStarted_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemotePlay_SessionStarted_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemotePlay_SessionStopped_Notification {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemotePlayTogether_Notification {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemoteClient_CreateRemotePlayTogetherInvitation_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemoteClient_CreateRemotePlayTogetherInvitation_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemoteClient_DeleteRemotePlayTogetherInvitation_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemoteClient_DeleteRemotePlayTogetherInvitation_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemoteClient_LookupRemotePlayTogetherInvitation_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CRemoteClient_LookupRemotePlayTogetherInvitation_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
