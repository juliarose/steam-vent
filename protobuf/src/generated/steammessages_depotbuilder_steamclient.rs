// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_depotbuilder.steamclient.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

#[doc = "Get inital parameters to start building a depot"]
// @@protoc_insertion_point(message:CContentBuilder_InitDepotBuild_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentBuilder_InitDepotBuild_Request {
    // message fields
    // @@protoc_insertion_point(field:CContentBuilder_InitDepotBuild_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CContentBuilder_InitDepotBuild_Request.depotid)
    pub depotid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CContentBuilder_InitDepotBuild_Request.workshop_itemid)
    pub workshop_itemid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CContentBuilder_InitDepotBuild_Request.for_local_cs)
    pub for_local_cs: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CContentBuilder_InitDepotBuild_Request.target_branch)
    pub target_branch: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentBuilder_InitDepotBuild_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentBuilder_InitDepotBuild_Request {
    fn default() -> &'a CContentBuilder_InitDepotBuild_Request {
        <CContentBuilder_InitDepotBuild_Request as ::protobuf::Message>::default_instance()
    }
}

impl CContentBuilder_InitDepotBuild_Request {
    pub fn new() -> CContentBuilder_InitDepotBuild_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 depotid = 2;

    pub fn depotid(&self) -> u32 {
        self.depotid.unwrap_or(0)
    }

    pub fn clear_depotid(&mut self) {
        self.depotid = ::std::option::Option::None;
    }

    pub fn has_depotid(&self) -> bool {
        self.depotid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_depotid(&mut self, v: u32) {
        self.depotid = ::std::option::Option::Some(v);
    }

    // optional uint64 workshop_itemid = 3;

    pub fn workshop_itemid(&self) -> u64 {
        self.workshop_itemid.unwrap_or(0)
    }

    pub fn clear_workshop_itemid(&mut self) {
        self.workshop_itemid = ::std::option::Option::None;
    }

    pub fn has_workshop_itemid(&self) -> bool {
        self.workshop_itemid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_workshop_itemid(&mut self, v: u64) {
        self.workshop_itemid = ::std::option::Option::Some(v);
    }

    // optional bool for_local_cs = 4;

    pub fn for_local_cs(&self) -> bool {
        self.for_local_cs.unwrap_or(false)
    }

    pub fn clear_for_local_cs(&mut self) {
        self.for_local_cs = ::std::option::Option::None;
    }

    pub fn has_for_local_cs(&self) -> bool {
        self.for_local_cs.is_some()
    }

    // Param is passed by value, moved
    pub fn set_for_local_cs(&mut self, v: bool) {
        self.for_local_cs = ::std::option::Option::Some(v);
    }

    // optional string target_branch = 5;

    pub fn target_branch(&self) -> &str {
        match self.target_branch.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_target_branch(&mut self) {
        self.target_branch = ::std::option::Option::None;
    }

    pub fn has_target_branch(&self) -> bool {
        self.target_branch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_target_branch(&mut self, v: ::std::string::String) {
        self.target_branch = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_target_branch(&mut self) -> &mut ::std::string::String {
        if self.target_branch.is_none() {
            self.target_branch = ::std::option::Option::Some(::std::string::String::new());
        }
        self.target_branch.as_mut().unwrap()
    }

    // Take field
    pub fn take_target_branch(&mut self) -> ::std::string::String {
        self.target_branch.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CContentBuilder_InitDepotBuild_Request {
    const NAME: &'static str = "CContentBuilder_InitDepotBuild_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.depotid = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.workshop_itemid = ::std::option::Option::Some(is.read_uint64()?);
                },
                32 => {
                    self.for_local_cs = ::std::option::Option::Some(is.read_bool()?);
                },
                42 => {
                    self.target_branch = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.depotid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.workshop_itemid {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        if let Some(v) = self.for_local_cs {
            my_size += 1 + 1;
        }
        if let Some(v) = self.target_branch.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.depotid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.workshop_itemid {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.for_local_cs {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.target_branch.as_ref() {
            os.write_string(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentBuilder_InitDepotBuild_Request {
        CContentBuilder_InitDepotBuild_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.depotid = ::std::option::Option::None;
        self.workshop_itemid = ::std::option::Option::None;
        self.for_local_cs = ::std::option::Option::None;
        self.target_branch = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentBuilder_InitDepotBuild_Request {
        static instance: CContentBuilder_InitDepotBuild_Request = CContentBuilder_InitDepotBuild_Request {
            appid: ::std::option::Option::None,
            depotid: ::std::option::Option::None,
            workshop_itemid: ::std::option::Option::None,
            for_local_cs: ::std::option::Option::None,
            target_branch: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CContentBuilder_InitDepotBuild_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentBuilder_InitDepotBuild_Response {
    // message fields
    // @@protoc_insertion_point(field:CContentBuilder_InitDepotBuild_Response.baseline_manifestid)
    pub baseline_manifestid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CContentBuilder_InitDepotBuild_Response.chunk_size)
    pub chunk_size: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CContentBuilder_InitDepotBuild_Response.aes_key)
    pub aes_key: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:CContentBuilder_InitDepotBuild_Response.rsa_key)
    pub rsa_key: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:CContentBuilder_InitDepotBuild_Response.url_host)
    pub url_host: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CContentBuilder_InitDepotBuild_Response.offset_detection_enabled)
    pub offset_detection_enabled: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CContentBuilder_InitDepotBuild_Response.offset_detection_min_clean_chunk)
    pub offset_detection_min_clean_chunk: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CContentBuilder_InitDepotBuild_Response.offset_detection_blast_radius_pre)
    pub offset_detection_blast_radius_pre: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CContentBuilder_InitDepotBuild_Response.offset_detection_blast_radius_post)
    pub offset_detection_blast_radius_post: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CContentBuilder_InitDepotBuild_Response.offset_detection_max_distance_pre)
    pub offset_detection_max_distance_pre: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CContentBuilder_InitDepotBuild_Response.offset_detection_max_distance_post)
    pub offset_detection_max_distance_post: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentBuilder_InitDepotBuild_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentBuilder_InitDepotBuild_Response {
    fn default() -> &'a CContentBuilder_InitDepotBuild_Response {
        <CContentBuilder_InitDepotBuild_Response as ::protobuf::Message>::default_instance()
    }
}

impl CContentBuilder_InitDepotBuild_Response {
    pub fn new() -> CContentBuilder_InitDepotBuild_Response {
        ::std::default::Default::default()
    }

    // optional uint64 baseline_manifestid = 1;

    pub fn baseline_manifestid(&self) -> u64 {
        self.baseline_manifestid.unwrap_or(0)
    }

    pub fn clear_baseline_manifestid(&mut self) {
        self.baseline_manifestid = ::std::option::Option::None;
    }

    pub fn has_baseline_manifestid(&self) -> bool {
        self.baseline_manifestid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_baseline_manifestid(&mut self, v: u64) {
        self.baseline_manifestid = ::std::option::Option::Some(v);
    }

    // optional uint32 chunk_size = 2;

    pub fn chunk_size(&self) -> u32 {
        self.chunk_size.unwrap_or(0)
    }

    pub fn clear_chunk_size(&mut self) {
        self.chunk_size = ::std::option::Option::None;
    }

    pub fn has_chunk_size(&self) -> bool {
        self.chunk_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chunk_size(&mut self, v: u32) {
        self.chunk_size = ::std::option::Option::Some(v);
    }

    // optional bytes aes_key = 3;

    pub fn aes_key(&self) -> &[u8] {
        match self.aes_key.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_aes_key(&mut self) {
        self.aes_key = ::std::option::Option::None;
    }

    pub fn has_aes_key(&self) -> bool {
        self.aes_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_aes_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.aes_key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_aes_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.aes_key.is_none() {
            self.aes_key = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.aes_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_aes_key(&mut self) -> ::std::vec::Vec<u8> {
        self.aes_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes rsa_key = 4;

    pub fn rsa_key(&self) -> &[u8] {
        match self.rsa_key.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_rsa_key(&mut self) {
        self.rsa_key = ::std::option::Option::None;
    }

    pub fn has_rsa_key(&self) -> bool {
        self.rsa_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rsa_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.rsa_key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rsa_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.rsa_key.is_none() {
            self.rsa_key = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.rsa_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_rsa_key(&mut self) -> ::std::vec::Vec<u8> {
        self.rsa_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string url_host = 5;

    pub fn url_host(&self) -> &str {
        match self.url_host.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_url_host(&mut self) {
        self.url_host = ::std::option::Option::None;
    }

    pub fn has_url_host(&self) -> bool {
        self.url_host.is_some()
    }

    // Param is passed by value, moved
    pub fn set_url_host(&mut self, v: ::std::string::String) {
        self.url_host = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url_host(&mut self) -> &mut ::std::string::String {
        if self.url_host.is_none() {
            self.url_host = ::std::option::Option::Some(::std::string::String::new());
        }
        self.url_host.as_mut().unwrap()
    }

    // Take field
    pub fn take_url_host(&mut self) -> ::std::string::String {
        self.url_host.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool offset_detection_enabled = 6;

    pub fn offset_detection_enabled(&self) -> bool {
        self.offset_detection_enabled.unwrap_or(false)
    }

    pub fn clear_offset_detection_enabled(&mut self) {
        self.offset_detection_enabled = ::std::option::Option::None;
    }

    pub fn has_offset_detection_enabled(&self) -> bool {
        self.offset_detection_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_offset_detection_enabled(&mut self, v: bool) {
        self.offset_detection_enabled = ::std::option::Option::Some(v);
    }

    // optional uint32 offset_detection_min_clean_chunk = 7;

    pub fn offset_detection_min_clean_chunk(&self) -> u32 {
        self.offset_detection_min_clean_chunk.unwrap_or(0)
    }

    pub fn clear_offset_detection_min_clean_chunk(&mut self) {
        self.offset_detection_min_clean_chunk = ::std::option::Option::None;
    }

    pub fn has_offset_detection_min_clean_chunk(&self) -> bool {
        self.offset_detection_min_clean_chunk.is_some()
    }

    // Param is passed by value, moved
    pub fn set_offset_detection_min_clean_chunk(&mut self, v: u32) {
        self.offset_detection_min_clean_chunk = ::std::option::Option::Some(v);
    }

    // optional uint32 offset_detection_blast_radius_pre = 8;

    pub fn offset_detection_blast_radius_pre(&self) -> u32 {
        self.offset_detection_blast_radius_pre.unwrap_or(0)
    }

    pub fn clear_offset_detection_blast_radius_pre(&mut self) {
        self.offset_detection_blast_radius_pre = ::std::option::Option::None;
    }

    pub fn has_offset_detection_blast_radius_pre(&self) -> bool {
        self.offset_detection_blast_radius_pre.is_some()
    }

    // Param is passed by value, moved
    pub fn set_offset_detection_blast_radius_pre(&mut self, v: u32) {
        self.offset_detection_blast_radius_pre = ::std::option::Option::Some(v);
    }

    // optional uint32 offset_detection_blast_radius_post = 9;

    pub fn offset_detection_blast_radius_post(&self) -> u32 {
        self.offset_detection_blast_radius_post.unwrap_or(0)
    }

    pub fn clear_offset_detection_blast_radius_post(&mut self) {
        self.offset_detection_blast_radius_post = ::std::option::Option::None;
    }

    pub fn has_offset_detection_blast_radius_post(&self) -> bool {
        self.offset_detection_blast_radius_post.is_some()
    }

    // Param is passed by value, moved
    pub fn set_offset_detection_blast_radius_post(&mut self, v: u32) {
        self.offset_detection_blast_radius_post = ::std::option::Option::Some(v);
    }

    // optional uint32 offset_detection_max_distance_pre = 10;

    pub fn offset_detection_max_distance_pre(&self) -> u32 {
        self.offset_detection_max_distance_pre.unwrap_or(0)
    }

    pub fn clear_offset_detection_max_distance_pre(&mut self) {
        self.offset_detection_max_distance_pre = ::std::option::Option::None;
    }

    pub fn has_offset_detection_max_distance_pre(&self) -> bool {
        self.offset_detection_max_distance_pre.is_some()
    }

    // Param is passed by value, moved
    pub fn set_offset_detection_max_distance_pre(&mut self, v: u32) {
        self.offset_detection_max_distance_pre = ::std::option::Option::Some(v);
    }

    // optional uint32 offset_detection_max_distance_post = 11;

    pub fn offset_detection_max_distance_post(&self) -> u32 {
        self.offset_detection_max_distance_post.unwrap_or(0)
    }

    pub fn clear_offset_detection_max_distance_post(&mut self) {
        self.offset_detection_max_distance_post = ::std::option::Option::None;
    }

    pub fn has_offset_detection_max_distance_post(&self) -> bool {
        self.offset_detection_max_distance_post.is_some()
    }

    // Param is passed by value, moved
    pub fn set_offset_detection_max_distance_post(&mut self, v: u32) {
        self.offset_detection_max_distance_post = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CContentBuilder_InitDepotBuild_Response {
    const NAME: &'static str = "CContentBuilder_InitDepotBuild_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.baseline_manifestid = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.chunk_size = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.aes_key = ::std::option::Option::Some(is.read_bytes()?);
                },
                34 => {
                    self.rsa_key = ::std::option::Option::Some(is.read_bytes()?);
                },
                42 => {
                    self.url_host = ::std::option::Option::Some(is.read_string()?);
                },
                48 => {
                    self.offset_detection_enabled = ::std::option::Option::Some(is.read_bool()?);
                },
                56 => {
                    self.offset_detection_min_clean_chunk = ::std::option::Option::Some(is.read_uint32()?);
                },
                64 => {
                    self.offset_detection_blast_radius_pre = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.offset_detection_blast_radius_post = ::std::option::Option::Some(is.read_uint32()?);
                },
                80 => {
                    self.offset_detection_max_distance_pre = ::std::option::Option::Some(is.read_uint32()?);
                },
                88 => {
                    self.offset_detection_max_distance_post = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.baseline_manifestid {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.chunk_size {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.aes_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(v) = self.rsa_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        if let Some(v) = self.url_host.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.offset_detection_enabled {
            my_size += 1 + 1;
        }
        if let Some(v) = self.offset_detection_min_clean_chunk {
            my_size += ::protobuf::rt::uint32_size(7, v);
        }
        if let Some(v) = self.offset_detection_blast_radius_pre {
            my_size += ::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.offset_detection_blast_radius_post {
            my_size += ::protobuf::rt::uint32_size(9, v);
        }
        if let Some(v) = self.offset_detection_max_distance_pre {
            my_size += ::protobuf::rt::uint32_size(10, v);
        }
        if let Some(v) = self.offset_detection_max_distance_post {
            my_size += ::protobuf::rt::uint32_size(11, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.baseline_manifestid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.chunk_size {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.aes_key.as_ref() {
            os.write_bytes(3, v)?;
        }
        if let Some(v) = self.rsa_key.as_ref() {
            os.write_bytes(4, v)?;
        }
        if let Some(v) = self.url_host.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.offset_detection_enabled {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.offset_detection_min_clean_chunk {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.offset_detection_blast_radius_pre {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.offset_detection_blast_radius_post {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.offset_detection_max_distance_pre {
            os.write_uint32(10, v)?;
        }
        if let Some(v) = self.offset_detection_max_distance_post {
            os.write_uint32(11, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentBuilder_InitDepotBuild_Response {
        CContentBuilder_InitDepotBuild_Response::new()
    }

    fn clear(&mut self) {
        self.baseline_manifestid = ::std::option::Option::None;
        self.chunk_size = ::std::option::Option::None;
        self.aes_key = ::std::option::Option::None;
        self.rsa_key = ::std::option::Option::None;
        self.url_host = ::std::option::Option::None;
        self.offset_detection_enabled = ::std::option::Option::None;
        self.offset_detection_min_clean_chunk = ::std::option::Option::None;
        self.offset_detection_blast_radius_pre = ::std::option::Option::None;
        self.offset_detection_blast_radius_post = ::std::option::Option::None;
        self.offset_detection_max_distance_pre = ::std::option::Option::None;
        self.offset_detection_max_distance_post = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentBuilder_InitDepotBuild_Response {
        static instance: CContentBuilder_InitDepotBuild_Response = CContentBuilder_InitDepotBuild_Response {
            baseline_manifestid: ::std::option::Option::None,
            chunk_size: ::std::option::Option::None,
            aes_key: ::std::option::Option::None,
            rsa_key: ::std::option::Option::None,
            url_host: ::std::option::Option::None,
            offset_detection_enabled: ::std::option::Option::None,
            offset_detection_min_clean_chunk: ::std::option::Option::None,
            offset_detection_blast_radius_pre: ::std::option::Option::None,
            offset_detection_blast_radius_post: ::std::option::Option::None,
            offset_detection_max_distance_pre: ::std::option::Option::None,
            offset_detection_max_distance_post: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Start uploading manifest and chunks for a depot"]
// @@protoc_insertion_point(message:CContentBuilder_StartDepotUpload_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentBuilder_StartDepotUpload_Request {
    // message fields
    // @@protoc_insertion_point(field:CContentBuilder_StartDepotUpload_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CContentBuilder_StartDepotUpload_Request.depotid)
    pub depotid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CContentBuilder_StartDepotUpload_Request.workshop_itemid)
    pub workshop_itemid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CContentBuilder_StartDepotUpload_Request.for_local_cs)
    pub for_local_cs: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CContentBuilder_StartDepotUpload_Request.baseline_manifestid)
    pub baseline_manifestid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CContentBuilder_StartDepotUpload_Request.manifest_size)
    pub manifest_size: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentBuilder_StartDepotUpload_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentBuilder_StartDepotUpload_Request {
    fn default() -> &'a CContentBuilder_StartDepotUpload_Request {
        <CContentBuilder_StartDepotUpload_Request as ::protobuf::Message>::default_instance()
    }
}

impl CContentBuilder_StartDepotUpload_Request {
    pub fn new() -> CContentBuilder_StartDepotUpload_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 depotid = 2;

    pub fn depotid(&self) -> u32 {
        self.depotid.unwrap_or(0)
    }

    pub fn clear_depotid(&mut self) {
        self.depotid = ::std::option::Option::None;
    }

    pub fn has_depotid(&self) -> bool {
        self.depotid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_depotid(&mut self, v: u32) {
        self.depotid = ::std::option::Option::Some(v);
    }

    // optional uint64 workshop_itemid = 3;

    pub fn workshop_itemid(&self) -> u64 {
        self.workshop_itemid.unwrap_or(0)
    }

    pub fn clear_workshop_itemid(&mut self) {
        self.workshop_itemid = ::std::option::Option::None;
    }

    pub fn has_workshop_itemid(&self) -> bool {
        self.workshop_itemid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_workshop_itemid(&mut self, v: u64) {
        self.workshop_itemid = ::std::option::Option::Some(v);
    }

    // optional bool for_local_cs = 4;

    pub fn for_local_cs(&self) -> bool {
        self.for_local_cs.unwrap_or(false)
    }

    pub fn clear_for_local_cs(&mut self) {
        self.for_local_cs = ::std::option::Option::None;
    }

    pub fn has_for_local_cs(&self) -> bool {
        self.for_local_cs.is_some()
    }

    // Param is passed by value, moved
    pub fn set_for_local_cs(&mut self, v: bool) {
        self.for_local_cs = ::std::option::Option::Some(v);
    }

    // optional uint64 baseline_manifestid = 5;

    pub fn baseline_manifestid(&self) -> u64 {
        self.baseline_manifestid.unwrap_or(0)
    }

    pub fn clear_baseline_manifestid(&mut self) {
        self.baseline_manifestid = ::std::option::Option::None;
    }

    pub fn has_baseline_manifestid(&self) -> bool {
        self.baseline_manifestid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_baseline_manifestid(&mut self, v: u64) {
        self.baseline_manifestid = ::std::option::Option::Some(v);
    }

    // optional uint32 manifest_size = 6;

    pub fn manifest_size(&self) -> u32 {
        self.manifest_size.unwrap_or(0)
    }

    pub fn clear_manifest_size(&mut self) {
        self.manifest_size = ::std::option::Option::None;
    }

    pub fn has_manifest_size(&self) -> bool {
        self.manifest_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_manifest_size(&mut self, v: u32) {
        self.manifest_size = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CContentBuilder_StartDepotUpload_Request {
    const NAME: &'static str = "CContentBuilder_StartDepotUpload_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.depotid = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.workshop_itemid = ::std::option::Option::Some(is.read_uint64()?);
                },
                32 => {
                    self.for_local_cs = ::std::option::Option::Some(is.read_bool()?);
                },
                40 => {
                    self.baseline_manifestid = ::std::option::Option::Some(is.read_uint64()?);
                },
                48 => {
                    self.manifest_size = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.depotid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.workshop_itemid {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        if let Some(v) = self.for_local_cs {
            my_size += 1 + 1;
        }
        if let Some(v) = self.baseline_manifestid {
            my_size += ::protobuf::rt::uint64_size(5, v);
        }
        if let Some(v) = self.manifest_size {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.depotid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.workshop_itemid {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.for_local_cs {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.baseline_manifestid {
            os.write_uint64(5, v)?;
        }
        if let Some(v) = self.manifest_size {
            os.write_uint32(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentBuilder_StartDepotUpload_Request {
        CContentBuilder_StartDepotUpload_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.depotid = ::std::option::Option::None;
        self.workshop_itemid = ::std::option::Option::None;
        self.for_local_cs = ::std::option::Option::None;
        self.baseline_manifestid = ::std::option::Option::None;
        self.manifest_size = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentBuilder_StartDepotUpload_Request {
        static instance: CContentBuilder_StartDepotUpload_Request = CContentBuilder_StartDepotUpload_Request {
            appid: ::std::option::Option::None,
            depotid: ::std::option::Option::None,
            workshop_itemid: ::std::option::Option::None,
            for_local_cs: ::std::option::Option::None,
            baseline_manifestid: ::std::option::Option::None,
            manifest_size: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CContentBuilder_StartDepotUpload_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentBuilder_StartDepotUpload_Response {
    // message fields
    // @@protoc_insertion_point(field:CContentBuilder_StartDepotUpload_Response.depot_build_handle)
    pub depot_build_handle: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentBuilder_StartDepotUpload_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentBuilder_StartDepotUpload_Response {
    fn default() -> &'a CContentBuilder_StartDepotUpload_Response {
        <CContentBuilder_StartDepotUpload_Response as ::protobuf::Message>::default_instance()
    }
}

impl CContentBuilder_StartDepotUpload_Response {
    pub fn new() -> CContentBuilder_StartDepotUpload_Response {
        ::std::default::Default::default()
    }

    // optional uint64 depot_build_handle = 1;

    pub fn depot_build_handle(&self) -> u64 {
        self.depot_build_handle.unwrap_or(0)
    }

    pub fn clear_depot_build_handle(&mut self) {
        self.depot_build_handle = ::std::option::Option::None;
    }

    pub fn has_depot_build_handle(&self) -> bool {
        self.depot_build_handle.is_some()
    }

    // Param is passed by value, moved
    pub fn set_depot_build_handle(&mut self, v: u64) {
        self.depot_build_handle = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CContentBuilder_StartDepotUpload_Response {
    const NAME: &'static str = "CContentBuilder_StartDepotUpload_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.depot_build_handle = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.depot_build_handle {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.depot_build_handle {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentBuilder_StartDepotUpload_Response {
        CContentBuilder_StartDepotUpload_Response::new()
    }

    fn clear(&mut self) {
        self.depot_build_handle = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentBuilder_StartDepotUpload_Response {
        static instance: CContentBuilder_StartDepotUpload_Response = CContentBuilder_StartDepotUpload_Response {
            depot_build_handle: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Get list of missing chunks for depot upload"]
// @@protoc_insertion_point(message:CContentBuilder_GetMissingDepotChunks_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentBuilder_GetMissingDepotChunks_Request {
    // message fields
    // @@protoc_insertion_point(field:CContentBuilder_GetMissingDepotChunks_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CContentBuilder_GetMissingDepotChunks_Request.depot_build_handle)
    pub depot_build_handle: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentBuilder_GetMissingDepotChunks_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentBuilder_GetMissingDepotChunks_Request {
    fn default() -> &'a CContentBuilder_GetMissingDepotChunks_Request {
        <CContentBuilder_GetMissingDepotChunks_Request as ::protobuf::Message>::default_instance()
    }
}

impl CContentBuilder_GetMissingDepotChunks_Request {
    pub fn new() -> CContentBuilder_GetMissingDepotChunks_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 depot_build_handle = 2;

    pub fn depot_build_handle(&self) -> u64 {
        self.depot_build_handle.unwrap_or(0)
    }

    pub fn clear_depot_build_handle(&mut self) {
        self.depot_build_handle = ::std::option::Option::None;
    }

    pub fn has_depot_build_handle(&self) -> bool {
        self.depot_build_handle.is_some()
    }

    // Param is passed by value, moved
    pub fn set_depot_build_handle(&mut self, v: u64) {
        self.depot_build_handle = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CContentBuilder_GetMissingDepotChunks_Request {
    const NAME: &'static str = "CContentBuilder_GetMissingDepotChunks_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.depot_build_handle = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.depot_build_handle {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.depot_build_handle {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentBuilder_GetMissingDepotChunks_Request {
        CContentBuilder_GetMissingDepotChunks_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.depot_build_handle = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentBuilder_GetMissingDepotChunks_Request {
        static instance: CContentBuilder_GetMissingDepotChunks_Request = CContentBuilder_GetMissingDepotChunks_Request {
            appid: ::std::option::Option::None,
            depot_build_handle: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CContentBuilder_GetMissingDepotChunks_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentBuilder_GetMissingDepotChunks_Response {
    // message fields
    // @@protoc_insertion_point(field:CContentBuilder_GetMissingDepotChunks_Response.missing_chunks)
    pub missing_chunks: ::std::vec::Vec<ccontent_builder_get_missing_depot_chunks_response::Chunks>,
    // @@protoc_insertion_point(field:CContentBuilder_GetMissingDepotChunks_Response.total_missing_chunks)
    pub total_missing_chunks: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CContentBuilder_GetMissingDepotChunks_Response.total_missing_bytes)
    pub total_missing_bytes: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentBuilder_GetMissingDepotChunks_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentBuilder_GetMissingDepotChunks_Response {
    fn default() -> &'a CContentBuilder_GetMissingDepotChunks_Response {
        <CContentBuilder_GetMissingDepotChunks_Response as ::protobuf::Message>::default_instance()
    }
}

impl CContentBuilder_GetMissingDepotChunks_Response {
    pub fn new() -> CContentBuilder_GetMissingDepotChunks_Response {
        ::std::default::Default::default()
    }

    // optional uint32 total_missing_chunks = 2;

    pub fn total_missing_chunks(&self) -> u32 {
        self.total_missing_chunks.unwrap_or(0)
    }

    pub fn clear_total_missing_chunks(&mut self) {
        self.total_missing_chunks = ::std::option::Option::None;
    }

    pub fn has_total_missing_chunks(&self) -> bool {
        self.total_missing_chunks.is_some()
    }

    // Param is passed by value, moved
    pub fn set_total_missing_chunks(&mut self, v: u32) {
        self.total_missing_chunks = ::std::option::Option::Some(v);
    }

    // optional uint64 total_missing_bytes = 3;

    pub fn total_missing_bytes(&self) -> u64 {
        self.total_missing_bytes.unwrap_or(0)
    }

    pub fn clear_total_missing_bytes(&mut self) {
        self.total_missing_bytes = ::std::option::Option::None;
    }

    pub fn has_total_missing_bytes(&self) -> bool {
        self.total_missing_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_total_missing_bytes(&mut self, v: u64) {
        self.total_missing_bytes = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CContentBuilder_GetMissingDepotChunks_Response {
    const NAME: &'static str = "CContentBuilder_GetMissingDepotChunks_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.missing_chunks.push(is.read_message()?);
                },
                16 => {
                    self.total_missing_chunks = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.total_missing_bytes = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.missing_chunks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.total_missing_chunks {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.total_missing_bytes {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.missing_chunks {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.total_missing_chunks {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.total_missing_bytes {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentBuilder_GetMissingDepotChunks_Response {
        CContentBuilder_GetMissingDepotChunks_Response::new()
    }

    fn clear(&mut self) {
        self.missing_chunks.clear();
        self.total_missing_chunks = ::std::option::Option::None;
        self.total_missing_bytes = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentBuilder_GetMissingDepotChunks_Response {
        static instance: CContentBuilder_GetMissingDepotChunks_Response = CContentBuilder_GetMissingDepotChunks_Response {
            missing_chunks: ::std::vec::Vec::new(),
            total_missing_chunks: ::std::option::Option::None,
            total_missing_bytes: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CContentBuilder_GetMissingDepotChunks_Response`
pub mod ccontent_builder_get_missing_depot_chunks_response {
    // @@protoc_insertion_point(message:CContentBuilder_GetMissingDepotChunks_Response.Chunks)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Chunks {
        // message fields
        // @@protoc_insertion_point(field:CContentBuilder_GetMissingDepotChunks_Response.Chunks.sha)
        pub sha: ::std::option::Option<::std::vec::Vec<u8>>,
        // special fields
        // @@protoc_insertion_point(special_field:CContentBuilder_GetMissingDepotChunks_Response.Chunks.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Chunks {
        fn default() -> &'a Chunks {
            <Chunks as ::protobuf::Message>::default_instance()
        }
    }

    impl Chunks {
        pub fn new() -> Chunks {
            ::std::default::Default::default()
        }

        // optional bytes sha = 1;

        pub fn sha(&self) -> &[u8] {
            match self.sha.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_sha(&mut self) {
            self.sha = ::std::option::Option::None;
        }

        pub fn has_sha(&self) -> bool {
            self.sha.is_some()
        }

        // Param is passed by value, moved
        pub fn set_sha(&mut self, v: ::std::vec::Vec<u8>) {
            self.sha = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_sha(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.sha.is_none() {
                self.sha = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.sha.as_mut().unwrap()
        }

        // Take field
        pub fn take_sha(&mut self) -> ::std::vec::Vec<u8> {
            self.sha.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }
    }

    impl ::protobuf::Message for Chunks {
        const NAME: &'static str = "Chunks";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.sha = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.sha.as_ref() {
                my_size += ::protobuf::rt::bytes_size(1, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.sha.as_ref() {
                os.write_bytes(1, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Chunks {
            Chunks::new()
        }

        fn clear(&mut self) {
            self.sha = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Chunks {
            static instance: Chunks = Chunks {
                sha: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

#[doc = "Commit a depot build after manifest and all chunks are uploaded"]
// @@protoc_insertion_point(message:CContentBuilder_FinishDepotUpload_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentBuilder_FinishDepotUpload_Request {
    // message fields
    // @@protoc_insertion_point(field:CContentBuilder_FinishDepotUpload_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CContentBuilder_FinishDepotUpload_Request.depot_build_handle)
    pub depot_build_handle: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentBuilder_FinishDepotUpload_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentBuilder_FinishDepotUpload_Request {
    fn default() -> &'a CContentBuilder_FinishDepotUpload_Request {
        <CContentBuilder_FinishDepotUpload_Request as ::protobuf::Message>::default_instance()
    }
}

impl CContentBuilder_FinishDepotUpload_Request {
    pub fn new() -> CContentBuilder_FinishDepotUpload_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 depot_build_handle = 2;

    pub fn depot_build_handle(&self) -> u64 {
        self.depot_build_handle.unwrap_or(0)
    }

    pub fn clear_depot_build_handle(&mut self) {
        self.depot_build_handle = ::std::option::Option::None;
    }

    pub fn has_depot_build_handle(&self) -> bool {
        self.depot_build_handle.is_some()
    }

    // Param is passed by value, moved
    pub fn set_depot_build_handle(&mut self, v: u64) {
        self.depot_build_handle = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CContentBuilder_FinishDepotUpload_Request {
    const NAME: &'static str = "CContentBuilder_FinishDepotUpload_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.depot_build_handle = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.depot_build_handle {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.depot_build_handle {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentBuilder_FinishDepotUpload_Request {
        CContentBuilder_FinishDepotUpload_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.depot_build_handle = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentBuilder_FinishDepotUpload_Request {
        static instance: CContentBuilder_FinishDepotUpload_Request = CContentBuilder_FinishDepotUpload_Request {
            appid: ::std::option::Option::None,
            depot_build_handle: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CContentBuilder_FinishDepotUpload_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentBuilder_FinishDepotUpload_Response {
    // message fields
    // @@protoc_insertion_point(field:CContentBuilder_FinishDepotUpload_Response.manifestid)
    pub manifestid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CContentBuilder_FinishDepotUpload_Response.prev_reused)
    pub prev_reused: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentBuilder_FinishDepotUpload_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentBuilder_FinishDepotUpload_Response {
    fn default() -> &'a CContentBuilder_FinishDepotUpload_Response {
        <CContentBuilder_FinishDepotUpload_Response as ::protobuf::Message>::default_instance()
    }
}

impl CContentBuilder_FinishDepotUpload_Response {
    pub fn new() -> CContentBuilder_FinishDepotUpload_Response {
        ::std::default::Default::default()
    }

    // optional uint64 manifestid = 1;

    pub fn manifestid(&self) -> u64 {
        self.manifestid.unwrap_or(0)
    }

    pub fn clear_manifestid(&mut self) {
        self.manifestid = ::std::option::Option::None;
    }

    pub fn has_manifestid(&self) -> bool {
        self.manifestid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_manifestid(&mut self, v: u64) {
        self.manifestid = ::std::option::Option::Some(v);
    }

    // optional bool prev_reused = 2;

    pub fn prev_reused(&self) -> bool {
        self.prev_reused.unwrap_or(false)
    }

    pub fn clear_prev_reused(&mut self) {
        self.prev_reused = ::std::option::Option::None;
    }

    pub fn has_prev_reused(&self) -> bool {
        self.prev_reused.is_some()
    }

    // Param is passed by value, moved
    pub fn set_prev_reused(&mut self, v: bool) {
        self.prev_reused = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CContentBuilder_FinishDepotUpload_Response {
    const NAME: &'static str = "CContentBuilder_FinishDepotUpload_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.manifestid = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.prev_reused = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.manifestid {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.prev_reused {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.manifestid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.prev_reused {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentBuilder_FinishDepotUpload_Response {
        CContentBuilder_FinishDepotUpload_Response::new()
    }

    fn clear(&mut self) {
        self.manifestid = ::std::option::Option::None;
        self.prev_reused = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentBuilder_FinishDepotUpload_Response {
        static instance: CContentBuilder_FinishDepotUpload_Response = CContentBuilder_FinishDepotUpload_Response {
            manifestid: ::std::option::Option::None,
            prev_reused: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Combine previous depot uploads into an app build and commit it"]
// @@protoc_insertion_point(message:CContentBuilder_CommitAppBuild_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentBuilder_CommitAppBuild_Request {
    // message fields
    // @@protoc_insertion_point(field:CContentBuilder_CommitAppBuild_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CContentBuilder_CommitAppBuild_Request.depot_manifests)
    pub depot_manifests: ::std::vec::Vec<ccontent_builder_commit_app_build_request::Depots>,
    // @@protoc_insertion_point(field:CContentBuilder_CommitAppBuild_Request.build_notes)
    pub build_notes: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CContentBuilder_CommitAppBuild_Request.live_branch)
    pub live_branch: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentBuilder_CommitAppBuild_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentBuilder_CommitAppBuild_Request {
    fn default() -> &'a CContentBuilder_CommitAppBuild_Request {
        <CContentBuilder_CommitAppBuild_Request as ::protobuf::Message>::default_instance()
    }
}

impl CContentBuilder_CommitAppBuild_Request {
    pub fn new() -> CContentBuilder_CommitAppBuild_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional string build_notes = 4;

    pub fn build_notes(&self) -> &str {
        match self.build_notes.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_build_notes(&mut self) {
        self.build_notes = ::std::option::Option::None;
    }

    pub fn has_build_notes(&self) -> bool {
        self.build_notes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_build_notes(&mut self, v: ::std::string::String) {
        self.build_notes = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_build_notes(&mut self) -> &mut ::std::string::String {
        if self.build_notes.is_none() {
            self.build_notes = ::std::option::Option::Some(::std::string::String::new());
        }
        self.build_notes.as_mut().unwrap()
    }

    // Take field
    pub fn take_build_notes(&mut self) -> ::std::string::String {
        self.build_notes.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string live_branch = 5;

    pub fn live_branch(&self) -> &str {
        match self.live_branch.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_live_branch(&mut self) {
        self.live_branch = ::std::option::Option::None;
    }

    pub fn has_live_branch(&self) -> bool {
        self.live_branch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_live_branch(&mut self, v: ::std::string::String) {
        self.live_branch = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_live_branch(&mut self) -> &mut ::std::string::String {
        if self.live_branch.is_none() {
            self.live_branch = ::std::option::Option::Some(::std::string::String::new());
        }
        self.live_branch.as_mut().unwrap()
    }

    // Take field
    pub fn take_live_branch(&mut self) -> ::std::string::String {
        self.live_branch.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CContentBuilder_CommitAppBuild_Request {
    const NAME: &'static str = "CContentBuilder_CommitAppBuild_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.depot_manifests.push(is.read_message()?);
                },
                34 => {
                    self.build_notes = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.live_branch = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        for value in &self.depot_manifests {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.build_notes.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.live_branch.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        for v in &self.depot_manifests {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.build_notes.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.live_branch.as_ref() {
            os.write_string(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentBuilder_CommitAppBuild_Request {
        CContentBuilder_CommitAppBuild_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.depot_manifests.clear();
        self.build_notes = ::std::option::Option::None;
        self.live_branch = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentBuilder_CommitAppBuild_Request {
        static instance: CContentBuilder_CommitAppBuild_Request = CContentBuilder_CommitAppBuild_Request {
            appid: ::std::option::Option::None,
            depot_manifests: ::std::vec::Vec::new(),
            build_notes: ::std::option::Option::None,
            live_branch: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CContentBuilder_CommitAppBuild_Request`
pub mod ccontent_builder_commit_app_build_request {
    // @@protoc_insertion_point(message:CContentBuilder_CommitAppBuild_Request.Depots)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Depots {
        // message fields
        // @@protoc_insertion_point(field:CContentBuilder_CommitAppBuild_Request.Depots.depotid)
        pub depotid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CContentBuilder_CommitAppBuild_Request.Depots.manifestid)
        pub manifestid: ::std::option::Option<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:CContentBuilder_CommitAppBuild_Request.Depots.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Depots {
        fn default() -> &'a Depots {
            <Depots as ::protobuf::Message>::default_instance()
        }
    }

    impl Depots {
        pub fn new() -> Depots {
            ::std::default::Default::default()
        }

        // optional uint32 depotid = 1;

        pub fn depotid(&self) -> u32 {
            self.depotid.unwrap_or(0)
        }

        pub fn clear_depotid(&mut self) {
            self.depotid = ::std::option::Option::None;
        }

        pub fn has_depotid(&self) -> bool {
            self.depotid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_depotid(&mut self, v: u32) {
            self.depotid = ::std::option::Option::Some(v);
        }

        // optional uint64 manifestid = 2;

        pub fn manifestid(&self) -> u64 {
            self.manifestid.unwrap_or(0)
        }

        pub fn clear_manifestid(&mut self) {
            self.manifestid = ::std::option::Option::None;
        }

        pub fn has_manifestid(&self) -> bool {
            self.manifestid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_manifestid(&mut self, v: u64) {
            self.manifestid = ::std::option::Option::Some(v);
        }
    }

    impl ::protobuf::Message for Depots {
        const NAME: &'static str = "Depots";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.depotid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.manifestid = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.depotid {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.manifestid {
                my_size += ::protobuf::rt::uint64_size(2, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.depotid {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.manifestid {
                os.write_uint64(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Depots {
            Depots::new()
        }

        fn clear(&mut self) {
            self.depotid = ::std::option::Option::None;
            self.manifestid = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Depots {
            static instance: Depots = Depots {
                depotid: ::std::option::Option::None,
                manifestid: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CContentBuilder_CommitAppBuild_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentBuilder_CommitAppBuild_Response {
    // message fields
    // @@protoc_insertion_point(field:CContentBuilder_CommitAppBuild_Response.buildid)
    pub buildid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentBuilder_CommitAppBuild_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentBuilder_CommitAppBuild_Response {
    fn default() -> &'a CContentBuilder_CommitAppBuild_Response {
        <CContentBuilder_CommitAppBuild_Response as ::protobuf::Message>::default_instance()
    }
}

impl CContentBuilder_CommitAppBuild_Response {
    pub fn new() -> CContentBuilder_CommitAppBuild_Response {
        ::std::default::Default::default()
    }

    // optional uint32 buildid = 1;

    pub fn buildid(&self) -> u32 {
        self.buildid.unwrap_or(0)
    }

    pub fn clear_buildid(&mut self) {
        self.buildid = ::std::option::Option::None;
    }

    pub fn has_buildid(&self) -> bool {
        self.buildid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_buildid(&mut self, v: u32) {
        self.buildid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CContentBuilder_CommitAppBuild_Response {
    const NAME: &'static str = "CContentBuilder_CommitAppBuild_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.buildid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.buildid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.buildid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentBuilder_CommitAppBuild_Response {
        CContentBuilder_CommitAppBuild_Response::new()
    }

    fn clear(&mut self) {
        self.buildid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentBuilder_CommitAppBuild_Response {
        static instance: CContentBuilder_CommitAppBuild_Response = CContentBuilder_CommitAppBuild_Response {
            buildid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Sign an install script"]
// @@protoc_insertion_point(message:CContentBuilder_SignInstallScript_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentBuilder_SignInstallScript_Request {
    // message fields
    // @@protoc_insertion_point(field:CContentBuilder_SignInstallScript_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CContentBuilder_SignInstallScript_Request.depotid)
    pub depotid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CContentBuilder_SignInstallScript_Request.install_script)
    pub install_script: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentBuilder_SignInstallScript_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentBuilder_SignInstallScript_Request {
    fn default() -> &'a CContentBuilder_SignInstallScript_Request {
        <CContentBuilder_SignInstallScript_Request as ::protobuf::Message>::default_instance()
    }
}

impl CContentBuilder_SignInstallScript_Request {
    pub fn new() -> CContentBuilder_SignInstallScript_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 depotid = 2;

    pub fn depotid(&self) -> u32 {
        self.depotid.unwrap_or(0)
    }

    pub fn clear_depotid(&mut self) {
        self.depotid = ::std::option::Option::None;
    }

    pub fn has_depotid(&self) -> bool {
        self.depotid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_depotid(&mut self, v: u32) {
        self.depotid = ::std::option::Option::Some(v);
    }

    // optional string install_script = 3;

    pub fn install_script(&self) -> &str {
        match self.install_script.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_install_script(&mut self) {
        self.install_script = ::std::option::Option::None;
    }

    pub fn has_install_script(&self) -> bool {
        self.install_script.is_some()
    }

    // Param is passed by value, moved
    pub fn set_install_script(&mut self, v: ::std::string::String) {
        self.install_script = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_install_script(&mut self) -> &mut ::std::string::String {
        if self.install_script.is_none() {
            self.install_script = ::std::option::Option::Some(::std::string::String::new());
        }
        self.install_script.as_mut().unwrap()
    }

    // Take field
    pub fn take_install_script(&mut self) -> ::std::string::String {
        self.install_script.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CContentBuilder_SignInstallScript_Request {
    const NAME: &'static str = "CContentBuilder_SignInstallScript_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.depotid = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.install_script = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.depotid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.install_script.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.depotid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.install_script.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentBuilder_SignInstallScript_Request {
        CContentBuilder_SignInstallScript_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.depotid = ::std::option::Option::None;
        self.install_script = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentBuilder_SignInstallScript_Request {
        static instance: CContentBuilder_SignInstallScript_Request = CContentBuilder_SignInstallScript_Request {
            appid: ::std::option::Option::None,
            depotid: ::std::option::Option::None,
            install_script: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CContentBuilder_SignInstallScript_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CContentBuilder_SignInstallScript_Response {
    // message fields
    // @@protoc_insertion_point(field:CContentBuilder_SignInstallScript_Response.signed_install_script)
    pub signed_install_script: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CContentBuilder_SignInstallScript_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CContentBuilder_SignInstallScript_Response {
    fn default() -> &'a CContentBuilder_SignInstallScript_Response {
        <CContentBuilder_SignInstallScript_Response as ::protobuf::Message>::default_instance()
    }
}

impl CContentBuilder_SignInstallScript_Response {
    pub fn new() -> CContentBuilder_SignInstallScript_Response {
        ::std::default::Default::default()
    }

    // optional string signed_install_script = 1;

    pub fn signed_install_script(&self) -> &str {
        match self.signed_install_script.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_signed_install_script(&mut self) {
        self.signed_install_script = ::std::option::Option::None;
    }

    pub fn has_signed_install_script(&self) -> bool {
        self.signed_install_script.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signed_install_script(&mut self, v: ::std::string::String) {
        self.signed_install_script = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signed_install_script(&mut self) -> &mut ::std::string::String {
        if self.signed_install_script.is_none() {
            self.signed_install_script = ::std::option::Option::Some(::std::string::String::new());
        }
        self.signed_install_script.as_mut().unwrap()
    }

    // Take field
    pub fn take_signed_install_script(&mut self) -> ::std::string::String {
        self.signed_install_script.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CContentBuilder_SignInstallScript_Response {
    const NAME: &'static str = "CContentBuilder_SignInstallScript_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.signed_install_script = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.signed_install_script.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.signed_install_script.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CContentBuilder_SignInstallScript_Response {
        CContentBuilder_SignInstallScript_Response::new()
    }

    fn clear(&mut self) {
        self.signed_install_script = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CContentBuilder_SignInstallScript_Response {
        static instance: CContentBuilder_SignInstallScript_Response = CContentBuilder_SignInstallScript_Response {
            signed_install_script: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}
#[allow(unused_imports)]
use crate::steammessages_base::*;
#[allow(unused_imports)]
use crate::steammessages_unified_base_steamclient::*;
impl crate::RpcMessage for CContentBuilder_InitDepotBuild_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CContentBuilder_InitDepotBuild_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CContentBuilder_StartDepotUpload_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CContentBuilder_StartDepotUpload_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CContentBuilder_GetMissingDepotChunks_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CContentBuilder_GetMissingDepotChunks_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CContentBuilder_FinishDepotUpload_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CContentBuilder_FinishDepotUpload_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CContentBuilder_CommitAppBuild_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CContentBuilder_CommitAppBuild_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CContentBuilder_SignInstallScript_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CContentBuilder_SignInstallScript_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
///Interface to build and upload depot content
struct ContentBuilder {}
impl crate::RpcService for ContentBuilder {
    const SERVICE_NAME: &'static str = "ContentBuilder";
}
impl crate::RpcMethod for CContentBuilder_CommitAppBuild_Request {
    const METHOD_NAME: &'static str = "ContentBuilder.CommitAppBuild#1";
    type Response = CContentBuilder_CommitAppBuild_Response;
}
impl crate::RpcMethod for CContentBuilder_FinishDepotUpload_Request {
    const METHOD_NAME: &'static str = "ContentBuilder.FinishDepotUpload#1";
    type Response = CContentBuilder_FinishDepotUpload_Response;
}
impl crate::RpcMethod for CContentBuilder_GetMissingDepotChunks_Request {
    const METHOD_NAME: &'static str = "ContentBuilder.GetMissingDepotChunks#1";
    type Response = CContentBuilder_GetMissingDepotChunks_Response;
}
impl crate::RpcMethod for CContentBuilder_InitDepotBuild_Request {
    const METHOD_NAME: &'static str = "ContentBuilder.InitDepotBuild#1";
    type Response = CContentBuilder_InitDepotBuild_Response;
}
impl crate::RpcMethod for CContentBuilder_SignInstallScript_Request {
    const METHOD_NAME: &'static str = "ContentBuilder.SignInstallScript#1";
    type Response = CContentBuilder_SignInstallScript_Response;
}
impl crate::RpcMethod for CContentBuilder_StartDepotUpload_Request {
    const METHOD_NAME: &'static str = "ContentBuilder.StartDepotUpload#1";
    type Response = CContentBuilder_StartDepotUpload_Response;
}
