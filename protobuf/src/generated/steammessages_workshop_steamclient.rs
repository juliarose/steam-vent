// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_workshop.steamclient.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

#[doc = "Retrieve the status of the user's EULA acceptance."]
// @@protoc_insertion_point(message:CWorkshop_GetEULAStatus_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CWorkshop_GetEULAStatus_Request {
    // message fields
    // @@protoc_insertion_point(field:CWorkshop_GetEULAStatus_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CWorkshop_GetEULAStatus_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CWorkshop_GetEULAStatus_Request {
    fn default() -> &'a CWorkshop_GetEULAStatus_Request {
        <CWorkshop_GetEULAStatus_Request as ::protobuf::Message>::default_instance()
    }
}

impl CWorkshop_GetEULAStatus_Request {
    pub fn new() -> CWorkshop_GetEULAStatus_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CWorkshop_GetEULAStatus_Request {
    const NAME: &'static str = "CWorkshop_GetEULAStatus_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CWorkshop_GetEULAStatus_Request {
        CWorkshop_GetEULAStatus_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CWorkshop_GetEULAStatus_Request {
        static instance: CWorkshop_GetEULAStatus_Request = CWorkshop_GetEULAStatus_Request {
            appid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CWorkshop_GetEULAStatus_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CWorkshop_GetEULAStatus_Response {
    // message fields
    // @@protoc_insertion_point(field:CWorkshop_GetEULAStatus_Response.version)
    pub version: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CWorkshop_GetEULAStatus_Response.timestamp_action)
    pub timestamp_action: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CWorkshop_GetEULAStatus_Response.accepted)
    pub accepted: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CWorkshop_GetEULAStatus_Response.needs_action)
    pub needs_action: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CWorkshop_GetEULAStatus_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CWorkshop_GetEULAStatus_Response {
    fn default() -> &'a CWorkshop_GetEULAStatus_Response {
        <CWorkshop_GetEULAStatus_Response as ::protobuf::Message>::default_instance()
    }
}

impl CWorkshop_GetEULAStatus_Response {
    pub fn new() -> CWorkshop_GetEULAStatus_Response {
        ::std::default::Default::default()
    }

    // optional uint32 version = 1;

    pub fn version(&self) -> u32 {
        self.version.unwrap_or(0)
    }

    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u32) {
        self.version = ::std::option::Option::Some(v);
    }

    // optional uint32 timestamp_action = 2;

    pub fn timestamp_action(&self) -> u32 {
        self.timestamp_action.unwrap_or(0)
    }

    pub fn clear_timestamp_action(&mut self) {
        self.timestamp_action = ::std::option::Option::None;
    }

    pub fn has_timestamp_action(&self) -> bool {
        self.timestamp_action.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp_action(&mut self, v: u32) {
        self.timestamp_action = ::std::option::Option::Some(v);
    }

    // optional bool accepted = 3;

    pub fn accepted(&self) -> bool {
        self.accepted.unwrap_or(false)
    }

    pub fn clear_accepted(&mut self) {
        self.accepted = ::std::option::Option::None;
    }

    pub fn has_accepted(&self) -> bool {
        self.accepted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accepted(&mut self, v: bool) {
        self.accepted = ::std::option::Option::Some(v);
    }

    // optional bool needs_action = 4;

    pub fn needs_action(&self) -> bool {
        self.needs_action.unwrap_or(false)
    }

    pub fn clear_needs_action(&mut self) {
        self.needs_action = ::std::option::Option::None;
    }

    pub fn has_needs_action(&self) -> bool {
        self.needs_action.is_some()
    }

    // Param is passed by value, moved
    pub fn set_needs_action(&mut self, v: bool) {
        self.needs_action = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CWorkshop_GetEULAStatus_Response {
    const NAME: &'static str = "CWorkshop_GetEULAStatus_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.version = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.timestamp_action = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.accepted = ::std::option::Option::Some(is.read_bool()?);
                },
                32 => {
                    self.needs_action = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.version {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.timestamp_action {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.accepted {
            my_size += 1 + 1;
        }
        if let Some(v) = self.needs_action {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.version {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.timestamp_action {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.accepted {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.needs_action {
            os.write_bool(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CWorkshop_GetEULAStatus_Response {
        CWorkshop_GetEULAStatus_Response::new()
    }

    fn clear(&mut self) {
        self.version = ::std::option::Option::None;
        self.timestamp_action = ::std::option::Option::None;
        self.accepted = ::std::option::Option::None;
        self.needs_action = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CWorkshop_GetEULAStatus_Response {
        static instance: CWorkshop_GetEULAStatus_Response = CWorkshop_GetEULAStatus_Response {
            version: ::std::option::Option::None,
            timestamp_action: ::std::option::Option::None,
            accepted: ::std::option::Option::None,
            needs_action: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}
#[allow(unused_imports)]
use crate::steammessages_base::*;
#[allow(unused_imports)]
use crate::steammessages_unified_base_steamclient::*;
impl crate::RpcMessage for CWorkshop_GetEULAStatus_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CWorkshop_GetEULAStatus_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
///A service to access published file data
struct Workshop {}
impl crate::RpcService for Workshop {
    const SERVICE_NAME: &'static str = "Workshop";
}
impl crate::RpcMethod for CWorkshop_GetEULAStatus_Request {
    const METHOD_NAME: &'static str = "Workshop.GetEULAStatus#1";
    type Response = CWorkshop_GetEULAStatus_Response;
}
