// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_vac.steamclient.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

#[doc = "File signature check was performed"]
// @@protoc_insertion_point(message:CFileVerification_SignatureCheck_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CFileVerification_SignatureCheck_Request {
    // message fields
    // @@protoc_insertion_point(field:CFileVerification_SignatureCheck_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CFileVerification_SignatureCheck_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CFileVerification_SignatureCheck_Request.file_size)
    pub file_size: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CFileVerification_SignatureCheck_Request.file_timestamp)
    pub file_timestamp: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CFileVerification_SignatureCheck_Request.file_timestamp2)
    pub file_timestamp2: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CFileVerification_SignatureCheck_Request.signature_result)
    pub signature_result: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CFileVerification_SignatureCheck_Request.filename)
    pub filename: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CFileVerification_SignatureCheck_Request.client_package_version)
    pub client_package_version: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CFileVerification_SignatureCheck_Request.sha1hash)
    pub sha1hash: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:CFileVerification_SignatureCheck_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CFileVerification_SignatureCheck_Request {
    fn default() -> &'a CFileVerification_SignatureCheck_Request {
        <CFileVerification_SignatureCheck_Request as ::protobuf::Message>::default_instance()
    }
}

impl CFileVerification_SignatureCheck_Request {
    pub fn new() -> CFileVerification_SignatureCheck_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 file_size = 3;

    pub fn file_size(&self) -> u64 {
        self.file_size.unwrap_or(0)
    }

    pub fn clear_file_size(&mut self) {
        self.file_size = ::std::option::Option::None;
    }

    pub fn has_file_size(&self) -> bool {
        self.file_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_size(&mut self, v: u64) {
        self.file_size = ::std::option::Option::Some(v);
    }

    // optional uint32 file_timestamp = 4;

    pub fn file_timestamp(&self) -> u32 {
        self.file_timestamp.unwrap_or(0)
    }

    pub fn clear_file_timestamp(&mut self) {
        self.file_timestamp = ::std::option::Option::None;
    }

    pub fn has_file_timestamp(&self) -> bool {
        self.file_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_timestamp(&mut self, v: u32) {
        self.file_timestamp = ::std::option::Option::Some(v);
    }

    // optional uint32 file_timestamp2 = 5;

    pub fn file_timestamp2(&self) -> u32 {
        self.file_timestamp2.unwrap_or(0)
    }

    pub fn clear_file_timestamp2(&mut self) {
        self.file_timestamp2 = ::std::option::Option::None;
    }

    pub fn has_file_timestamp2(&self) -> bool {
        self.file_timestamp2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_timestamp2(&mut self, v: u32) {
        self.file_timestamp2 = ::std::option::Option::Some(v);
    }

    // optional uint32 signature_result = 6;

    pub fn signature_result(&self) -> u32 {
        self.signature_result.unwrap_or(0)
    }

    pub fn clear_signature_result(&mut self) {
        self.signature_result = ::std::option::Option::None;
    }

    pub fn has_signature_result(&self) -> bool {
        self.signature_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature_result(&mut self, v: u32) {
        self.signature_result = ::std::option::Option::Some(v);
    }

    // optional string filename = 7;

    pub fn filename(&self) -> &str {
        match self.filename.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_filename(&mut self) {
        self.filename = ::std::option::Option::None;
    }

    pub fn has_filename(&self) -> bool {
        self.filename.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filename(&mut self, v: ::std::string::String) {
        self.filename = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filename(&mut self) -> &mut ::std::string::String {
        if self.filename.is_none() {
            self.filename = ::std::option::Option::Some(::std::string::String::new());
        }
        self.filename.as_mut().unwrap()
    }

    // Take field
    pub fn take_filename(&mut self) -> ::std::string::String {
        self.filename.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 client_package_version = 8;

    pub fn client_package_version(&self) -> u32 {
        self.client_package_version.unwrap_or(0)
    }

    pub fn clear_client_package_version(&mut self) {
        self.client_package_version = ::std::option::Option::None;
    }

    pub fn has_client_package_version(&self) -> bool {
        self.client_package_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_package_version(&mut self, v: u32) {
        self.client_package_version = ::std::option::Option::Some(v);
    }

    // optional bytes sha1hash = 9;

    pub fn sha1hash(&self) -> &[u8] {
        match self.sha1hash.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_sha1hash(&mut self) {
        self.sha1hash = ::std::option::Option::None;
    }

    pub fn has_sha1hash(&self) -> bool {
        self.sha1hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sha1hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.sha1hash = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sha1hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.sha1hash.is_none() {
            self.sha1hash = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.sha1hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_sha1hash(&mut self) -> ::std::vec::Vec<u8> {
        self.sha1hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CFileVerification_SignatureCheck_Request {
    const NAME: &'static str = "CFileVerification_SignatureCheck_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.file_size = ::std::option::Option::Some(is.read_uint64()?);
                },
                32 => {
                    self.file_timestamp = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.file_timestamp2 = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.signature_result = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    self.filename = ::std::option::Option::Some(is.read_string()?);
                },
                64 => {
                    self.client_package_version = ::std::option::Option::Some(is.read_uint32()?);
                },
                74 => {
                    self.sha1hash = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.file_size {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        if let Some(v) = self.file_timestamp {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.file_timestamp2 {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.signature_result {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.filename.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.client_package_version {
            my_size += ::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.sha1hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(9, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.file_size {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.file_timestamp {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.file_timestamp2 {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.signature_result {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.filename.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.client_package_version {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.sha1hash.as_ref() {
            os.write_bytes(9, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CFileVerification_SignatureCheck_Request {
        CFileVerification_SignatureCheck_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.file_size = ::std::option::Option::None;
        self.file_timestamp = ::std::option::Option::None;
        self.file_timestamp2 = ::std::option::Option::None;
        self.signature_result = ::std::option::Option::None;
        self.filename = ::std::option::Option::None;
        self.client_package_version = ::std::option::Option::None;
        self.sha1hash = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CFileVerification_SignatureCheck_Request {
        static instance: CFileVerification_SignatureCheck_Request = CFileVerification_SignatureCheck_Request {
            steamid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            file_size: ::std::option::Option::None,
            file_timestamp: ::std::option::Option::None,
            file_timestamp2: ::std::option::Option::None,
            signature_result: ::std::option::Option::None,
            filename: ::std::option::Option::None,
            client_package_version: ::std::option::Option::None,
            sha1hash: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CFileVerification_SignatureCheck_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CFileVerification_SignatureCheck_Response {
    // message fields
    // @@protoc_insertion_point(field:CFileVerification_SignatureCheck_Response.deny_operation)
    pub deny_operation: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CFileVerification_SignatureCheck_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CFileVerification_SignatureCheck_Response {
    fn default() -> &'a CFileVerification_SignatureCheck_Response {
        <CFileVerification_SignatureCheck_Response as ::protobuf::Message>::default_instance()
    }
}

impl CFileVerification_SignatureCheck_Response {
    pub fn new() -> CFileVerification_SignatureCheck_Response {
        ::std::default::Default::default()
    }

    // optional bool deny_operation = 1;

    pub fn deny_operation(&self) -> bool {
        self.deny_operation.unwrap_or(false)
    }

    pub fn clear_deny_operation(&mut self) {
        self.deny_operation = ::std::option::Option::None;
    }

    pub fn has_deny_operation(&self) -> bool {
        self.deny_operation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deny_operation(&mut self, v: bool) {
        self.deny_operation = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CFileVerification_SignatureCheck_Response {
    const NAME: &'static str = "CFileVerification_SignatureCheck_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.deny_operation = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.deny_operation {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.deny_operation {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CFileVerification_SignatureCheck_Response {
        CFileVerification_SignatureCheck_Response::new()
    }

    fn clear(&mut self) {
        self.deny_operation = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CFileVerification_SignatureCheck_Response {
        static instance: CFileVerification_SignatureCheck_Response = CFileVerification_SignatureCheck_Response {
            deny_operation: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Steam Service check was performed"]
// @@protoc_insertion_point(message:CFileVerification_SteamServiceCheck_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CFileVerification_SteamServiceCheck_Request {
    // message fields
    // @@protoc_insertion_point(field:CFileVerification_SteamServiceCheck_Request.service_status)
    pub service_status: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CFileVerification_SteamServiceCheck_Request.client_package_version)
    pub client_package_version: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CFileVerification_SteamServiceCheck_Request.launcher_type)
    pub launcher_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CFileVerification_SteamServiceCheck_Request.os_type)
    pub os_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CFileVerification_SteamServiceCheck_Request.service_repair)
    pub service_repair: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CFileVerification_SteamServiceCheck_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CFileVerification_SteamServiceCheck_Request {
    fn default() -> &'a CFileVerification_SteamServiceCheck_Request {
        <CFileVerification_SteamServiceCheck_Request as ::protobuf::Message>::default_instance()
    }
}

impl CFileVerification_SteamServiceCheck_Request {
    pub fn new() -> CFileVerification_SteamServiceCheck_Request {
        ::std::default::Default::default()
    }

    // optional uint32 service_status = 2;

    pub fn service_status(&self) -> u32 {
        self.service_status.unwrap_or(0)
    }

    pub fn clear_service_status(&mut self) {
        self.service_status = ::std::option::Option::None;
    }

    pub fn has_service_status(&self) -> bool {
        self.service_status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_service_status(&mut self, v: u32) {
        self.service_status = ::std::option::Option::Some(v);
    }

    // optional uint32 client_package_version = 3;

    pub fn client_package_version(&self) -> u32 {
        self.client_package_version.unwrap_or(0)
    }

    pub fn clear_client_package_version(&mut self) {
        self.client_package_version = ::std::option::Option::None;
    }

    pub fn has_client_package_version(&self) -> bool {
        self.client_package_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_package_version(&mut self, v: u32) {
        self.client_package_version = ::std::option::Option::Some(v);
    }

    // optional uint32 launcher_type = 4;

    pub fn launcher_type(&self) -> u32 {
        self.launcher_type.unwrap_or(0)
    }

    pub fn clear_launcher_type(&mut self) {
        self.launcher_type = ::std::option::Option::None;
    }

    pub fn has_launcher_type(&self) -> bool {
        self.launcher_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_launcher_type(&mut self, v: u32) {
        self.launcher_type = ::std::option::Option::Some(v);
    }

    // optional uint32 os_type = 5;

    pub fn os_type(&self) -> u32 {
        self.os_type.unwrap_or(0)
    }

    pub fn clear_os_type(&mut self) {
        self.os_type = ::std::option::Option::None;
    }

    pub fn has_os_type(&self) -> bool {
        self.os_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_os_type(&mut self, v: u32) {
        self.os_type = ::std::option::Option::Some(v);
    }

    // optional uint32 service_repair = 6;

    pub fn service_repair(&self) -> u32 {
        self.service_repair.unwrap_or(0)
    }

    pub fn clear_service_repair(&mut self) {
        self.service_repair = ::std::option::Option::None;
    }

    pub fn has_service_repair(&self) -> bool {
        self.service_repair.is_some()
    }

    // Param is passed by value, moved
    pub fn set_service_repair(&mut self, v: u32) {
        self.service_repair = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CFileVerification_SteamServiceCheck_Request {
    const NAME: &'static str = "CFileVerification_SteamServiceCheck_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.service_status = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.client_package_version = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.launcher_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.os_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.service_repair = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.service_status {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.client_package_version {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.launcher_type {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.os_type {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.service_repair {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.service_status {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.client_package_version {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.launcher_type {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.os_type {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.service_repair {
            os.write_uint32(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CFileVerification_SteamServiceCheck_Request {
        CFileVerification_SteamServiceCheck_Request::new()
    }

    fn clear(&mut self) {
        self.service_status = ::std::option::Option::None;
        self.client_package_version = ::std::option::Option::None;
        self.launcher_type = ::std::option::Option::None;
        self.os_type = ::std::option::Option::None;
        self.service_repair = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CFileVerification_SteamServiceCheck_Request {
        static instance: CFileVerification_SteamServiceCheck_Request = CFileVerification_SteamServiceCheck_Request {
            service_status: ::std::option::Option::None,
            client_package_version: ::std::option::Option::None,
            launcher_type: ::std::option::Option::None,
            os_type: ::std::option::Option::None,
            service_repair: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CFileVerification_SteamServiceCheck_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CFileVerification_SteamServiceCheck_Response {
    // message fields
    // @@protoc_insertion_point(field:CFileVerification_SteamServiceCheck_Response.attempt_repair)
    pub attempt_repair: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CFileVerification_SteamServiceCheck_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CFileVerification_SteamServiceCheck_Response {
    fn default() -> &'a CFileVerification_SteamServiceCheck_Response {
        <CFileVerification_SteamServiceCheck_Response as ::protobuf::Message>::default_instance()
    }
}

impl CFileVerification_SteamServiceCheck_Response {
    pub fn new() -> CFileVerification_SteamServiceCheck_Response {
        ::std::default::Default::default()
    }

    // optional bool attempt_repair = 1;

    pub fn attempt_repair(&self) -> bool {
        self.attempt_repair.unwrap_or(false)
    }

    pub fn clear_attempt_repair(&mut self) {
        self.attempt_repair = ::std::option::Option::None;
    }

    pub fn has_attempt_repair(&self) -> bool {
        self.attempt_repair.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attempt_repair(&mut self, v: bool) {
        self.attempt_repair = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CFileVerification_SteamServiceCheck_Response {
    const NAME: &'static str = "CFileVerification_SteamServiceCheck_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.attempt_repair = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.attempt_repair {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.attempt_repair {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CFileVerification_SteamServiceCheck_Response {
        CFileVerification_SteamServiceCheck_Response::new()
    }

    fn clear(&mut self) {
        self.attempt_repair = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CFileVerification_SteamServiceCheck_Response {
        static instance: CFileVerification_SteamServiceCheck_Response = CFileVerification_SteamServiceCheck_Response {
            attempt_repair: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}
#[allow(unused_imports)]
use crate::steammessages_base::*;
#[allow(unused_imports)]
use crate::steammessages_unified_base_steamclient::*;
impl crate::RpcMessage for CFileVerification_SignatureCheck_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CFileVerification_SignatureCheck_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CFileVerification_SteamServiceCheck_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CFileVerification_SteamServiceCheck_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
///File verification services
struct FileVerification {}
impl crate::RpcService for FileVerification {
    const SERVICE_NAME: &'static str = "FileVerification";
}
impl crate::RpcMethod for CFileVerification_SignatureCheck_Request {
    const METHOD_NAME: &'static str = "FileVerification.SignatureCheck#1";
    type Response = CFileVerification_SignatureCheck_Response;
}
impl crate::RpcMethod for CFileVerification_SteamServiceCheck_Request {
    const METHOD_NAME: &'static str = "FileVerification.SteamServiceCheck#1";
    type Response = CFileVerification_SteamServiceCheck_Response;
}
