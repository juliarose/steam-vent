// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_credentials.steamclient.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

#[doc = "TestAvailablePassword."]
// @@protoc_insertion_point(message:CCredentials_TestAvailablePassword_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCredentials_TestAvailablePassword_Request {
    // message fields
    // @@protoc_insertion_point(field:CCredentials_TestAvailablePassword_Request.password)
    pub password: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCredentials_TestAvailablePassword_Request.sha_digest_password)
    pub sha_digest_password: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:CCredentials_TestAvailablePassword_Request.account_name)
    pub account_name: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CCredentials_TestAvailablePassword_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCredentials_TestAvailablePassword_Request {
    fn default() -> &'a CCredentials_TestAvailablePassword_Request {
        <CCredentials_TestAvailablePassword_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCredentials_TestAvailablePassword_Request {
    pub fn new() -> CCredentials_TestAvailablePassword_Request {
        ::std::default::Default::default()
    }

    // optional string password = 1;

    pub fn password(&self) -> &str {
        match self.password.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_password(&mut self) {
        self.password = ::std::option::Option::None;
    }

    pub fn has_password(&self) -> bool {
        self.password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::std::string::String) {
        self.password = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::std::string::String {
        if self.password.is_none() {
            self.password = ::std::option::Option::Some(::std::string::String::new());
        }
        self.password.as_mut().unwrap()
    }

    // Take field
    pub fn take_password(&mut self) -> ::std::string::String {
        self.password.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes sha_digest_password = 2;

    pub fn sha_digest_password(&self) -> &[u8] {
        match self.sha_digest_password.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_sha_digest_password(&mut self) {
        self.sha_digest_password = ::std::option::Option::None;
    }

    pub fn has_sha_digest_password(&self) -> bool {
        self.sha_digest_password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sha_digest_password(&mut self, v: ::std::vec::Vec<u8>) {
        self.sha_digest_password = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sha_digest_password(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.sha_digest_password.is_none() {
            self.sha_digest_password = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.sha_digest_password.as_mut().unwrap()
    }

    // Take field
    pub fn take_sha_digest_password(&mut self) -> ::std::vec::Vec<u8> {
        self.sha_digest_password.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string account_name = 3;

    pub fn account_name(&self) -> &str {
        match self.account_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_account_name(&mut self) {
        self.account_name = ::std::option::Option::None;
    }

    pub fn has_account_name(&self) -> bool {
        self.account_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_name(&mut self, v: ::std::string::String) {
        self.account_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_name(&mut self) -> &mut ::std::string::String {
        if self.account_name.is_none() {
            self.account_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.account_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_account_name(&mut self) -> ::std::string::String {
        self.account_name.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CCredentials_TestAvailablePassword_Request {
    const NAME: &'static str = "CCredentials_TestAvailablePassword_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.password = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.sha_digest_password = ::std::option::Option::Some(is.read_bytes()?);
                },
                26 => {
                    self.account_name = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.password.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.sha_digest_password.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.account_name.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.password.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.sha_digest_password.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.account_name.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCredentials_TestAvailablePassword_Request {
        CCredentials_TestAvailablePassword_Request::new()
    }

    fn clear(&mut self) {
        self.password = ::std::option::Option::None;
        self.sha_digest_password = ::std::option::Option::None;
        self.account_name = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCredentials_TestAvailablePassword_Request {
        static instance: CCredentials_TestAvailablePassword_Request = CCredentials_TestAvailablePassword_Request {
            password: ::std::option::Option::None,
            sha_digest_password: ::std::option::Option::None,
            account_name: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CCredentials_TestAvailablePassword_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCredentials_TestAvailablePassword_Response {
    // message fields
    // @@protoc_insertion_point(field:CCredentials_TestAvailablePassword_Response.is_valid)
    pub is_valid: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CCredentials_TestAvailablePassword_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCredentials_TestAvailablePassword_Response {
    fn default() -> &'a CCredentials_TestAvailablePassword_Response {
        <CCredentials_TestAvailablePassword_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCredentials_TestAvailablePassword_Response {
    pub fn new() -> CCredentials_TestAvailablePassword_Response {
        ::std::default::Default::default()
    }

    // optional bool is_valid = 3;

    pub fn is_valid(&self) -> bool {
        self.is_valid.unwrap_or(false)
    }

    pub fn clear_is_valid(&mut self) {
        self.is_valid = ::std::option::Option::None;
    }

    pub fn has_is_valid(&self) -> bool {
        self.is_valid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_valid(&mut self, v: bool) {
        self.is_valid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CCredentials_TestAvailablePassword_Response {
    const NAME: &'static str = "CCredentials_TestAvailablePassword_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                24 => {
                    self.is_valid = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.is_valid {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.is_valid {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCredentials_TestAvailablePassword_Response {
        CCredentials_TestAvailablePassword_Response::new()
    }

    fn clear(&mut self) {
        self.is_valid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCredentials_TestAvailablePassword_Response {
        static instance: CCredentials_TestAvailablePassword_Response = CCredentials_TestAvailablePassword_Response {
            is_valid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "GetSteamGuardDetails."]
// @@protoc_insertion_point(message:CCredentials_GetSteamGuardDetails_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCredentials_GetSteamGuardDetails_Request {
    // message fields
    // @@protoc_insertion_point(field:CCredentials_GetSteamGuardDetails_Request.webcookie)
    pub webcookie: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCredentials_GetSteamGuardDetails_Request.timestamp_minimum_wanted)
    pub timestamp_minimum_wanted: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CCredentials_GetSteamGuardDetails_Request.deprecated_ipaddress)
    pub deprecated_ipaddress: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CCredentials_GetSteamGuardDetails_Request.ip_address)
    pub ip_address: ::protobuf::MessageField<super::steammessages_base::CMsgIPAddress>,
    // special fields
    // @@protoc_insertion_point(special_field:CCredentials_GetSteamGuardDetails_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCredentials_GetSteamGuardDetails_Request {
    fn default() -> &'a CCredentials_GetSteamGuardDetails_Request {
        <CCredentials_GetSteamGuardDetails_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCredentials_GetSteamGuardDetails_Request {
    pub fn new() -> CCredentials_GetSteamGuardDetails_Request {
        ::std::default::Default::default()
    }

    // optional string webcookie = 2;

    pub fn webcookie(&self) -> &str {
        match self.webcookie.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_webcookie(&mut self) {
        self.webcookie = ::std::option::Option::None;
    }

    pub fn has_webcookie(&self) -> bool {
        self.webcookie.is_some()
    }

    // Param is passed by value, moved
    pub fn set_webcookie(&mut self, v: ::std::string::String) {
        self.webcookie = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_webcookie(&mut self) -> &mut ::std::string::String {
        if self.webcookie.is_none() {
            self.webcookie = ::std::option::Option::Some(::std::string::String::new());
        }
        self.webcookie.as_mut().unwrap()
    }

    // Take field
    pub fn take_webcookie(&mut self) -> ::std::string::String {
        self.webcookie.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed32 timestamp_minimum_wanted = 3;

    pub fn timestamp_minimum_wanted(&self) -> u32 {
        self.timestamp_minimum_wanted.unwrap_or(0)
    }

    pub fn clear_timestamp_minimum_wanted(&mut self) {
        self.timestamp_minimum_wanted = ::std::option::Option::None;
    }

    pub fn has_timestamp_minimum_wanted(&self) -> bool {
        self.timestamp_minimum_wanted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp_minimum_wanted(&mut self, v: u32) {
        self.timestamp_minimum_wanted = ::std::option::Option::Some(v);
    }

    // optional int32 deprecated_ipaddress = 4;

    pub fn deprecated_ipaddress(&self) -> i32 {
        self.deprecated_ipaddress.unwrap_or(0)
    }

    pub fn clear_deprecated_ipaddress(&mut self) {
        self.deprecated_ipaddress = ::std::option::Option::None;
    }

    pub fn has_deprecated_ipaddress(&self) -> bool {
        self.deprecated_ipaddress.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deprecated_ipaddress(&mut self, v: i32) {
        self.deprecated_ipaddress = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CCredentials_GetSteamGuardDetails_Request {
    const NAME: &'static str = "CCredentials_GetSteamGuardDetails_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.webcookie = ::std::option::Option::Some(is.read_string()?);
                },
                29 => {
                    self.timestamp_minimum_wanted = ::std::option::Option::Some(is.read_fixed32()?);
                },
                32 => {
                    self.deprecated_ipaddress = ::std::option::Option::Some(is.read_int32()?);
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ip_address)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.webcookie.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.timestamp_minimum_wanted {
            my_size += 1 + 4;
        }
        if let Some(v) = self.deprecated_ipaddress {
            my_size += ::protobuf::rt::int32_size(4, v);
        }
        if let Some(v) = self.ip_address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.webcookie.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.timestamp_minimum_wanted {
            os.write_fixed32(3, v)?;
        }
        if let Some(v) = self.deprecated_ipaddress {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.ip_address.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCredentials_GetSteamGuardDetails_Request {
        CCredentials_GetSteamGuardDetails_Request::new()
    }

    fn clear(&mut self) {
        self.webcookie = ::std::option::Option::None;
        self.timestamp_minimum_wanted = ::std::option::Option::None;
        self.deprecated_ipaddress = ::std::option::Option::None;
        self.ip_address.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCredentials_GetSteamGuardDetails_Request {
        static instance: CCredentials_GetSteamGuardDetails_Request = CCredentials_GetSteamGuardDetails_Request {
            webcookie: ::std::option::Option::None,
            timestamp_minimum_wanted: ::std::option::Option::None,
            deprecated_ipaddress: ::std::option::Option::None,
            ip_address: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CCredentials_GetSteamGuardDetails_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCredentials_GetSteamGuardDetails_Response {
    // message fields
    // @@protoc_insertion_point(field:CCredentials_GetSteamGuardDetails_Response.is_steamguard_enabled)
    pub is_steamguard_enabled: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CCredentials_GetSteamGuardDetails_Response.timestamp_steamguard_enabled)
    pub timestamp_steamguard_enabled: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CCredentials_GetSteamGuardDetails_Response.deprecated_machine_name_userchosen)
    pub deprecated_machine_name_userchosen: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCredentials_GetSteamGuardDetails_Response.deprecated_timestamp_machine_steamguard_enabled)
    pub deprecated_timestamp_machine_steamguard_enabled: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CCredentials_GetSteamGuardDetails_Response.deprecated_authentication_exists_from_geoloc_before_mintime)
    pub deprecated_authentication_exists_from_geoloc_before_mintime: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CCredentials_GetSteamGuardDetails_Response.deprecated_machine_id)
    pub deprecated_machine_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CCredentials_GetSteamGuardDetails_Response.session_data)
    pub session_data: ::std::vec::Vec<ccredentials_get_steam_guard_details_response::SessionData>,
    // @@protoc_insertion_point(field:CCredentials_GetSteamGuardDetails_Response.is_twofactor_enabled)
    pub is_twofactor_enabled: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CCredentials_GetSteamGuardDetails_Response.timestamp_twofactor_enabled)
    pub timestamp_twofactor_enabled: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CCredentials_GetSteamGuardDetails_Response.is_phone_verified)
    pub is_phone_verified: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CCredentials_GetSteamGuardDetails_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCredentials_GetSteamGuardDetails_Response {
    fn default() -> &'a CCredentials_GetSteamGuardDetails_Response {
        <CCredentials_GetSteamGuardDetails_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCredentials_GetSteamGuardDetails_Response {
    pub fn new() -> CCredentials_GetSteamGuardDetails_Response {
        ::std::default::Default::default()
    }

    // optional bool is_steamguard_enabled = 1;

    pub fn is_steamguard_enabled(&self) -> bool {
        self.is_steamguard_enabled.unwrap_or(false)
    }

    pub fn clear_is_steamguard_enabled(&mut self) {
        self.is_steamguard_enabled = ::std::option::Option::None;
    }

    pub fn has_is_steamguard_enabled(&self) -> bool {
        self.is_steamguard_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_steamguard_enabled(&mut self, v: bool) {
        self.is_steamguard_enabled = ::std::option::Option::Some(v);
    }

    // optional fixed32 timestamp_steamguard_enabled = 2;

    pub fn timestamp_steamguard_enabled(&self) -> u32 {
        self.timestamp_steamguard_enabled.unwrap_or(0)
    }

    pub fn clear_timestamp_steamguard_enabled(&mut self) {
        self.timestamp_steamguard_enabled = ::std::option::Option::None;
    }

    pub fn has_timestamp_steamguard_enabled(&self) -> bool {
        self.timestamp_steamguard_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp_steamguard_enabled(&mut self, v: u32) {
        self.timestamp_steamguard_enabled = ::std::option::Option::Some(v);
    }

    // optional string deprecated_machine_name_userchosen = 4;

    pub fn deprecated_machine_name_userchosen(&self) -> &str {
        match self.deprecated_machine_name_userchosen.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_deprecated_machine_name_userchosen(&mut self) {
        self.deprecated_machine_name_userchosen = ::std::option::Option::None;
    }

    pub fn has_deprecated_machine_name_userchosen(&self) -> bool {
        self.deprecated_machine_name_userchosen.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deprecated_machine_name_userchosen(&mut self, v: ::std::string::String) {
        self.deprecated_machine_name_userchosen = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deprecated_machine_name_userchosen(&mut self) -> &mut ::std::string::String {
        if self.deprecated_machine_name_userchosen.is_none() {
            self.deprecated_machine_name_userchosen = ::std::option::Option::Some(::std::string::String::new());
        }
        self.deprecated_machine_name_userchosen.as_mut().unwrap()
    }

    // Take field
    pub fn take_deprecated_machine_name_userchosen(&mut self) -> ::std::string::String {
        self.deprecated_machine_name_userchosen.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed32 deprecated_timestamp_machine_steamguard_enabled = 5;

    pub fn deprecated_timestamp_machine_steamguard_enabled(&self) -> u32 {
        self.deprecated_timestamp_machine_steamguard_enabled.unwrap_or(0)
    }

    pub fn clear_deprecated_timestamp_machine_steamguard_enabled(&mut self) {
        self.deprecated_timestamp_machine_steamguard_enabled = ::std::option::Option::None;
    }

    pub fn has_deprecated_timestamp_machine_steamguard_enabled(&self) -> bool {
        self.deprecated_timestamp_machine_steamguard_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deprecated_timestamp_machine_steamguard_enabled(&mut self, v: u32) {
        self.deprecated_timestamp_machine_steamguard_enabled = ::std::option::Option::Some(v);
    }

    // optional bool deprecated_authentication_exists_from_geoloc_before_mintime = 6;

    pub fn deprecated_authentication_exists_from_geoloc_before_mintime(&self) -> bool {
        self.deprecated_authentication_exists_from_geoloc_before_mintime.unwrap_or(false)
    }

    pub fn clear_deprecated_authentication_exists_from_geoloc_before_mintime(&mut self) {
        self.deprecated_authentication_exists_from_geoloc_before_mintime = ::std::option::Option::None;
    }

    pub fn has_deprecated_authentication_exists_from_geoloc_before_mintime(&self) -> bool {
        self.deprecated_authentication_exists_from_geoloc_before_mintime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deprecated_authentication_exists_from_geoloc_before_mintime(&mut self, v: bool) {
        self.deprecated_authentication_exists_from_geoloc_before_mintime = ::std::option::Option::Some(v);
    }

    // optional uint64 deprecated_machine_id = 7;

    pub fn deprecated_machine_id(&self) -> u64 {
        self.deprecated_machine_id.unwrap_or(0)
    }

    pub fn clear_deprecated_machine_id(&mut self) {
        self.deprecated_machine_id = ::std::option::Option::None;
    }

    pub fn has_deprecated_machine_id(&self) -> bool {
        self.deprecated_machine_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deprecated_machine_id(&mut self, v: u64) {
        self.deprecated_machine_id = ::std::option::Option::Some(v);
    }

    // optional bool is_twofactor_enabled = 9;

    pub fn is_twofactor_enabled(&self) -> bool {
        self.is_twofactor_enabled.unwrap_or(false)
    }

    pub fn clear_is_twofactor_enabled(&mut self) {
        self.is_twofactor_enabled = ::std::option::Option::None;
    }

    pub fn has_is_twofactor_enabled(&self) -> bool {
        self.is_twofactor_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_twofactor_enabled(&mut self, v: bool) {
        self.is_twofactor_enabled = ::std::option::Option::Some(v);
    }

    // optional fixed32 timestamp_twofactor_enabled = 10;

    pub fn timestamp_twofactor_enabled(&self) -> u32 {
        self.timestamp_twofactor_enabled.unwrap_or(0)
    }

    pub fn clear_timestamp_twofactor_enabled(&mut self) {
        self.timestamp_twofactor_enabled = ::std::option::Option::None;
    }

    pub fn has_timestamp_twofactor_enabled(&self) -> bool {
        self.timestamp_twofactor_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp_twofactor_enabled(&mut self, v: u32) {
        self.timestamp_twofactor_enabled = ::std::option::Option::Some(v);
    }

    // optional bool is_phone_verified = 11;

    pub fn is_phone_verified(&self) -> bool {
        self.is_phone_verified.unwrap_or(false)
    }

    pub fn clear_is_phone_verified(&mut self) {
        self.is_phone_verified = ::std::option::Option::None;
    }

    pub fn has_is_phone_verified(&self) -> bool {
        self.is_phone_verified.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_phone_verified(&mut self, v: bool) {
        self.is_phone_verified = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CCredentials_GetSteamGuardDetails_Response {
    const NAME: &'static str = "CCredentials_GetSteamGuardDetails_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.is_steamguard_enabled = ::std::option::Option::Some(is.read_bool()?);
                },
                21 => {
                    self.timestamp_steamguard_enabled = ::std::option::Option::Some(is.read_fixed32()?);
                },
                34 => {
                    self.deprecated_machine_name_userchosen = ::std::option::Option::Some(is.read_string()?);
                },
                45 => {
                    self.deprecated_timestamp_machine_steamguard_enabled = ::std::option::Option::Some(is.read_fixed32()?);
                },
                48 => {
                    self.deprecated_authentication_exists_from_geoloc_before_mintime = ::std::option::Option::Some(is.read_bool()?);
                },
                56 => {
                    self.deprecated_machine_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                66 => {
                    self.session_data.push(is.read_message()?);
                },
                72 => {
                    self.is_twofactor_enabled = ::std::option::Option::Some(is.read_bool()?);
                },
                85 => {
                    self.timestamp_twofactor_enabled = ::std::option::Option::Some(is.read_fixed32()?);
                },
                88 => {
                    self.is_phone_verified = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.is_steamguard_enabled {
            my_size += 1 + 1;
        }
        if let Some(v) = self.timestamp_steamguard_enabled {
            my_size += 1 + 4;
        }
        if let Some(v) = self.deprecated_machine_name_userchosen.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.deprecated_timestamp_machine_steamguard_enabled {
            my_size += 1 + 4;
        }
        if let Some(v) = self.deprecated_authentication_exists_from_geoloc_before_mintime {
            my_size += 1 + 1;
        }
        if let Some(v) = self.deprecated_machine_id {
            my_size += ::protobuf::rt::uint64_size(7, v);
        }
        for value in &self.session_data {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.is_twofactor_enabled {
            my_size += 1 + 1;
        }
        if let Some(v) = self.timestamp_twofactor_enabled {
            my_size += 1 + 4;
        }
        if let Some(v) = self.is_phone_verified {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.is_steamguard_enabled {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.timestamp_steamguard_enabled {
            os.write_fixed32(2, v)?;
        }
        if let Some(v) = self.deprecated_machine_name_userchosen.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.deprecated_timestamp_machine_steamguard_enabled {
            os.write_fixed32(5, v)?;
        }
        if let Some(v) = self.deprecated_authentication_exists_from_geoloc_before_mintime {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.deprecated_machine_id {
            os.write_uint64(7, v)?;
        }
        for v in &self.session_data {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        if let Some(v) = self.is_twofactor_enabled {
            os.write_bool(9, v)?;
        }
        if let Some(v) = self.timestamp_twofactor_enabled {
            os.write_fixed32(10, v)?;
        }
        if let Some(v) = self.is_phone_verified {
            os.write_bool(11, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCredentials_GetSteamGuardDetails_Response {
        CCredentials_GetSteamGuardDetails_Response::new()
    }

    fn clear(&mut self) {
        self.is_steamguard_enabled = ::std::option::Option::None;
        self.timestamp_steamguard_enabled = ::std::option::Option::None;
        self.deprecated_machine_name_userchosen = ::std::option::Option::None;
        self.deprecated_timestamp_machine_steamguard_enabled = ::std::option::Option::None;
        self.deprecated_authentication_exists_from_geoloc_before_mintime = ::std::option::Option::None;
        self.deprecated_machine_id = ::std::option::Option::None;
        self.session_data.clear();
        self.is_twofactor_enabled = ::std::option::Option::None;
        self.timestamp_twofactor_enabled = ::std::option::Option::None;
        self.is_phone_verified = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCredentials_GetSteamGuardDetails_Response {
        static instance: CCredentials_GetSteamGuardDetails_Response = CCredentials_GetSteamGuardDetails_Response {
            is_steamguard_enabled: ::std::option::Option::None,
            timestamp_steamguard_enabled: ::std::option::Option::None,
            deprecated_machine_name_userchosen: ::std::option::Option::None,
            deprecated_timestamp_machine_steamguard_enabled: ::std::option::Option::None,
            deprecated_authentication_exists_from_geoloc_before_mintime: ::std::option::Option::None,
            deprecated_machine_id: ::std::option::Option::None,
            session_data: ::std::vec::Vec::new(),
            is_twofactor_enabled: ::std::option::Option::None,
            timestamp_twofactor_enabled: ::std::option::Option::None,
            is_phone_verified: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CCredentials_GetSteamGuardDetails_Response`
pub mod ccredentials_get_steam_guard_details_response {
    // @@protoc_insertion_point(message:CCredentials_GetSteamGuardDetails_Response.SessionData)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct SessionData {
        // message fields
        // @@protoc_insertion_point(field:CCredentials_GetSteamGuardDetails_Response.SessionData.machine_id)
        pub machine_id: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CCredentials_GetSteamGuardDetails_Response.SessionData.machine_name_userchosen)
        pub machine_name_userchosen: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CCredentials_GetSteamGuardDetails_Response.SessionData.timestamp_machine_steamguard_enabled)
        pub timestamp_machine_steamguard_enabled: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CCredentials_GetSteamGuardDetails_Response.SessionData.authentication_exists_from_geoloc_before_mintime)
        pub authentication_exists_from_geoloc_before_mintime: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CCredentials_GetSteamGuardDetails_Response.SessionData.authentication_exists_from_same_ip_before_mintime)
        pub authentication_exists_from_same_ip_before_mintime: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CCredentials_GetSteamGuardDetails_Response.SessionData.public_ipv4)
        pub public_ipv4: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CCredentials_GetSteamGuardDetails_Response.SessionData.public_ip_address)
        pub public_ip_address: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CCredentials_GetSteamGuardDetails_Response.SessionData.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a SessionData {
        fn default() -> &'a SessionData {
            <SessionData as ::protobuf::Message>::default_instance()
        }
    }

    impl SessionData {
        pub fn new() -> SessionData {
            ::std::default::Default::default()
        }

        // optional uint64 machine_id = 1;

        pub fn machine_id(&self) -> u64 {
            self.machine_id.unwrap_or(0)
        }

        pub fn clear_machine_id(&mut self) {
            self.machine_id = ::std::option::Option::None;
        }

        pub fn has_machine_id(&self) -> bool {
            self.machine_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_machine_id(&mut self, v: u64) {
            self.machine_id = ::std::option::Option::Some(v);
        }

        // optional string machine_name_userchosen = 2;

        pub fn machine_name_userchosen(&self) -> &str {
            match self.machine_name_userchosen.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_machine_name_userchosen(&mut self) {
            self.machine_name_userchosen = ::std::option::Option::None;
        }

        pub fn has_machine_name_userchosen(&self) -> bool {
            self.machine_name_userchosen.is_some()
        }

        // Param is passed by value, moved
        pub fn set_machine_name_userchosen(&mut self, v: ::std::string::String) {
            self.machine_name_userchosen = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_machine_name_userchosen(&mut self) -> &mut ::std::string::String {
            if self.machine_name_userchosen.is_none() {
                self.machine_name_userchosen = ::std::option::Option::Some(::std::string::String::new());
            }
            self.machine_name_userchosen.as_mut().unwrap()
        }

        // Take field
        pub fn take_machine_name_userchosen(&mut self) -> ::std::string::String {
            self.machine_name_userchosen.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional fixed32 timestamp_machine_steamguard_enabled = 3;

        pub fn timestamp_machine_steamguard_enabled(&self) -> u32 {
            self.timestamp_machine_steamguard_enabled.unwrap_or(0)
        }

        pub fn clear_timestamp_machine_steamguard_enabled(&mut self) {
            self.timestamp_machine_steamguard_enabled = ::std::option::Option::None;
        }

        pub fn has_timestamp_machine_steamguard_enabled(&self) -> bool {
            self.timestamp_machine_steamguard_enabled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_timestamp_machine_steamguard_enabled(&mut self, v: u32) {
            self.timestamp_machine_steamguard_enabled = ::std::option::Option::Some(v);
        }

        // optional bool authentication_exists_from_geoloc_before_mintime = 4;

        pub fn authentication_exists_from_geoloc_before_mintime(&self) -> bool {
            self.authentication_exists_from_geoloc_before_mintime.unwrap_or(false)
        }

        pub fn clear_authentication_exists_from_geoloc_before_mintime(&mut self) {
            self.authentication_exists_from_geoloc_before_mintime = ::std::option::Option::None;
        }

        pub fn has_authentication_exists_from_geoloc_before_mintime(&self) -> bool {
            self.authentication_exists_from_geoloc_before_mintime.is_some()
        }

        // Param is passed by value, moved
        pub fn set_authentication_exists_from_geoloc_before_mintime(&mut self, v: bool) {
            self.authentication_exists_from_geoloc_before_mintime = ::std::option::Option::Some(v);
        }

        // optional bool authentication_exists_from_same_ip_before_mintime = 6;

        pub fn authentication_exists_from_same_ip_before_mintime(&self) -> bool {
            self.authentication_exists_from_same_ip_before_mintime.unwrap_or(false)
        }

        pub fn clear_authentication_exists_from_same_ip_before_mintime(&mut self) {
            self.authentication_exists_from_same_ip_before_mintime = ::std::option::Option::None;
        }

        pub fn has_authentication_exists_from_same_ip_before_mintime(&self) -> bool {
            self.authentication_exists_from_same_ip_before_mintime.is_some()
        }

        // Param is passed by value, moved
        pub fn set_authentication_exists_from_same_ip_before_mintime(&mut self, v: bool) {
            self.authentication_exists_from_same_ip_before_mintime = ::std::option::Option::Some(v);
        }

        // optional uint32 public_ipv4 = 7;

        pub fn public_ipv4(&self) -> u32 {
            self.public_ipv4.unwrap_or(0)
        }

        pub fn clear_public_ipv4(&mut self) {
            self.public_ipv4 = ::std::option::Option::None;
        }

        pub fn has_public_ipv4(&self) -> bool {
            self.public_ipv4.is_some()
        }

        // Param is passed by value, moved
        pub fn set_public_ipv4(&mut self, v: u32) {
            self.public_ipv4 = ::std::option::Option::Some(v);
        }

        // optional string public_ip_address = 8;

        pub fn public_ip_address(&self) -> &str {
            match self.public_ip_address.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_public_ip_address(&mut self) {
            self.public_ip_address = ::std::option::Option::None;
        }

        pub fn has_public_ip_address(&self) -> bool {
            self.public_ip_address.is_some()
        }

        // Param is passed by value, moved
        pub fn set_public_ip_address(&mut self, v: ::std::string::String) {
            self.public_ip_address = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_public_ip_address(&mut self) -> &mut ::std::string::String {
            if self.public_ip_address.is_none() {
                self.public_ip_address = ::std::option::Option::Some(::std::string::String::new());
            }
            self.public_ip_address.as_mut().unwrap()
        }

        // Take field
        pub fn take_public_ip_address(&mut self) -> ::std::string::String {
            self.public_ip_address.take().unwrap_or_else(|| ::std::string::String::new())
        }
    }

    impl ::protobuf::Message for SessionData {
        const NAME: &'static str = "SessionData";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.machine_id = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    18 => {
                        self.machine_name_userchosen = ::std::option::Option::Some(is.read_string()?);
                    },
                    29 => {
                        self.timestamp_machine_steamguard_enabled = ::std::option::Option::Some(is.read_fixed32()?);
                    },
                    32 => {
                        self.authentication_exists_from_geoloc_before_mintime = ::std::option::Option::Some(is.read_bool()?);
                    },
                    48 => {
                        self.authentication_exists_from_same_ip_before_mintime = ::std::option::Option::Some(is.read_bool()?);
                    },
                    56 => {
                        self.public_ipv4 = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    66 => {
                        self.public_ip_address = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.machine_id {
                my_size += ::protobuf::rt::uint64_size(1, v);
            }
            if let Some(v) = self.machine_name_userchosen.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            if let Some(v) = self.timestamp_machine_steamguard_enabled {
                my_size += 1 + 4;
            }
            if let Some(v) = self.authentication_exists_from_geoloc_before_mintime {
                my_size += 1 + 1;
            }
            if let Some(v) = self.authentication_exists_from_same_ip_before_mintime {
                my_size += 1 + 1;
            }
            if let Some(v) = self.public_ipv4 {
                my_size += ::protobuf::rt::uint32_size(7, v);
            }
            if let Some(v) = self.public_ip_address.as_ref() {
                my_size += ::protobuf::rt::string_size(8, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.machine_id {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.machine_name_userchosen.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.timestamp_machine_steamguard_enabled {
                os.write_fixed32(3, v)?;
            }
            if let Some(v) = self.authentication_exists_from_geoloc_before_mintime {
                os.write_bool(4, v)?;
            }
            if let Some(v) = self.authentication_exists_from_same_ip_before_mintime {
                os.write_bool(6, v)?;
            }
            if let Some(v) = self.public_ipv4 {
                os.write_uint32(7, v)?;
            }
            if let Some(v) = self.public_ip_address.as_ref() {
                os.write_string(8, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> SessionData {
            SessionData::new()
        }

        fn clear(&mut self) {
            self.machine_id = ::std::option::Option::None;
            self.machine_name_userchosen = ::std::option::Option::None;
            self.timestamp_machine_steamguard_enabled = ::std::option::Option::None;
            self.authentication_exists_from_geoloc_before_mintime = ::std::option::Option::None;
            self.authentication_exists_from_same_ip_before_mintime = ::std::option::Option::None;
            self.public_ipv4 = ::std::option::Option::None;
            self.public_ip_address = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static SessionData {
            static instance: SessionData = SessionData {
                machine_id: ::std::option::Option::None,
                machine_name_userchosen: ::std::option::Option::None,
                timestamp_machine_steamguard_enabled: ::std::option::Option::None,
                authentication_exists_from_geoloc_before_mintime: ::std::option::Option::None,
                authentication_exists_from_same_ip_before_mintime: ::std::option::Option::None,
                public_ipv4: ::std::option::Option::None,
                public_ip_address: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

#[doc = "Validate an email address given a token"]
// @@protoc_insertion_point(message:CCredentials_ValidateEmailAddress_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCredentials_ValidateEmailAddress_Request {
    // message fields
    // @@protoc_insertion_point(field:CCredentials_ValidateEmailAddress_Request.stoken)
    pub stoken: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CCredentials_ValidateEmailAddress_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCredentials_ValidateEmailAddress_Request {
    fn default() -> &'a CCredentials_ValidateEmailAddress_Request {
        <CCredentials_ValidateEmailAddress_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCredentials_ValidateEmailAddress_Request {
    pub fn new() -> CCredentials_ValidateEmailAddress_Request {
        ::std::default::Default::default()
    }

    // optional string stoken = 1;

    pub fn stoken(&self) -> &str {
        match self.stoken.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_stoken(&mut self) {
        self.stoken = ::std::option::Option::None;
    }

    pub fn has_stoken(&self) -> bool {
        self.stoken.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stoken(&mut self, v: ::std::string::String) {
        self.stoken = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stoken(&mut self) -> &mut ::std::string::String {
        if self.stoken.is_none() {
            self.stoken = ::std::option::Option::Some(::std::string::String::new());
        }
        self.stoken.as_mut().unwrap()
    }

    // Take field
    pub fn take_stoken(&mut self) -> ::std::string::String {
        self.stoken.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CCredentials_ValidateEmailAddress_Request {
    const NAME: &'static str = "CCredentials_ValidateEmailAddress_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.stoken = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.stoken.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.stoken.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCredentials_ValidateEmailAddress_Request {
        CCredentials_ValidateEmailAddress_Request::new()
    }

    fn clear(&mut self) {
        self.stoken = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCredentials_ValidateEmailAddress_Request {
        static instance: CCredentials_ValidateEmailAddress_Request = CCredentials_ValidateEmailAddress_Request {
            stoken: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CCredentials_ValidateEmailAddress_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCredentials_ValidateEmailAddress_Response {
    // message fields
    // @@protoc_insertion_point(field:CCredentials_ValidateEmailAddress_Response.was_validated)
    pub was_validated: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CCredentials_ValidateEmailAddress_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCredentials_ValidateEmailAddress_Response {
    fn default() -> &'a CCredentials_ValidateEmailAddress_Response {
        <CCredentials_ValidateEmailAddress_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCredentials_ValidateEmailAddress_Response {
    pub fn new() -> CCredentials_ValidateEmailAddress_Response {
        ::std::default::Default::default()
    }

    // optional bool was_validated = 1;

    pub fn was_validated(&self) -> bool {
        self.was_validated.unwrap_or(false)
    }

    pub fn clear_was_validated(&mut self) {
        self.was_validated = ::std::option::Option::None;
    }

    pub fn has_was_validated(&self) -> bool {
        self.was_validated.is_some()
    }

    // Param is passed by value, moved
    pub fn set_was_validated(&mut self, v: bool) {
        self.was_validated = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CCredentials_ValidateEmailAddress_Response {
    const NAME: &'static str = "CCredentials_ValidateEmailAddress_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.was_validated = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.was_validated {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.was_validated {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCredentials_ValidateEmailAddress_Response {
        CCredentials_ValidateEmailAddress_Response::new()
    }

    fn clear(&mut self) {
        self.was_validated = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCredentials_ValidateEmailAddress_Response {
        static instance: CCredentials_ValidateEmailAddress_Response = CCredentials_ValidateEmailAddress_Response {
            was_validated: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "SteamGuardPhishingReport"]
// @@protoc_insertion_point(message:CCredentials_SteamGuardPhishingReport_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCredentials_SteamGuardPhishingReport_Request {
    // message fields
    // @@protoc_insertion_point(field:CCredentials_SteamGuardPhishingReport_Request.param_string)
    pub param_string: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCredentials_SteamGuardPhishingReport_Request.ipaddress_actual)
    pub ipaddress_actual: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CCredentials_SteamGuardPhishingReport_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCredentials_SteamGuardPhishingReport_Request {
    fn default() -> &'a CCredentials_SteamGuardPhishingReport_Request {
        <CCredentials_SteamGuardPhishingReport_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCredentials_SteamGuardPhishingReport_Request {
    pub fn new() -> CCredentials_SteamGuardPhishingReport_Request {
        ::std::default::Default::default()
    }

    // optional string param_string = 1;

    pub fn param_string(&self) -> &str {
        match self.param_string.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_param_string(&mut self) {
        self.param_string = ::std::option::Option::None;
    }

    pub fn has_param_string(&self) -> bool {
        self.param_string.is_some()
    }

    // Param is passed by value, moved
    pub fn set_param_string(&mut self, v: ::std::string::String) {
        self.param_string = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_param_string(&mut self) -> &mut ::std::string::String {
        if self.param_string.is_none() {
            self.param_string = ::std::option::Option::Some(::std::string::String::new());
        }
        self.param_string.as_mut().unwrap()
    }

    // Take field
    pub fn take_param_string(&mut self) -> ::std::string::String {
        self.param_string.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string ipaddress_actual = 2;

    pub fn ipaddress_actual(&self) -> &str {
        match self.ipaddress_actual.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_ipaddress_actual(&mut self) {
        self.ipaddress_actual = ::std::option::Option::None;
    }

    pub fn has_ipaddress_actual(&self) -> bool {
        self.ipaddress_actual.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ipaddress_actual(&mut self, v: ::std::string::String) {
        self.ipaddress_actual = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ipaddress_actual(&mut self) -> &mut ::std::string::String {
        if self.ipaddress_actual.is_none() {
            self.ipaddress_actual = ::std::option::Option::Some(::std::string::String::new());
        }
        self.ipaddress_actual.as_mut().unwrap()
    }

    // Take field
    pub fn take_ipaddress_actual(&mut self) -> ::std::string::String {
        self.ipaddress_actual.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CCredentials_SteamGuardPhishingReport_Request {
    const NAME: &'static str = "CCredentials_SteamGuardPhishingReport_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.param_string = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.ipaddress_actual = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.param_string.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.ipaddress_actual.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.param_string.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.ipaddress_actual.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCredentials_SteamGuardPhishingReport_Request {
        CCredentials_SteamGuardPhishingReport_Request::new()
    }

    fn clear(&mut self) {
        self.param_string = ::std::option::Option::None;
        self.ipaddress_actual = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCredentials_SteamGuardPhishingReport_Request {
        static instance: CCredentials_SteamGuardPhishingReport_Request = CCredentials_SteamGuardPhishingReport_Request {
            param_string: ::std::option::Option::None,
            ipaddress_actual: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CCredentials_SteamGuardPhishingReport_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCredentials_SteamGuardPhishingReport_Response {
    // message fields
    // @@protoc_insertion_point(field:CCredentials_SteamGuardPhishingReport_Response.ipaddress_loginattempt)
    pub ipaddress_loginattempt: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCredentials_SteamGuardPhishingReport_Response.countryname_loginattempt)
    pub countryname_loginattempt: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCredentials_SteamGuardPhishingReport_Response.statename_loginattempt)
    pub statename_loginattempt: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCredentials_SteamGuardPhishingReport_Response.cityname_loginattempt)
    pub cityname_loginattempt: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCredentials_SteamGuardPhishingReport_Response.ipaddress_actual)
    pub ipaddress_actual: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCredentials_SteamGuardPhishingReport_Response.countryname_actual)
    pub countryname_actual: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCredentials_SteamGuardPhishingReport_Response.statename_actual)
    pub statename_actual: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCredentials_SteamGuardPhishingReport_Response.cityname_actual)
    pub cityname_actual: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCredentials_SteamGuardPhishingReport_Response.steamguard_code)
    pub steamguard_code: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CCredentials_SteamGuardPhishingReport_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCredentials_SteamGuardPhishingReport_Response {
    fn default() -> &'a CCredentials_SteamGuardPhishingReport_Response {
        <CCredentials_SteamGuardPhishingReport_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCredentials_SteamGuardPhishingReport_Response {
    pub fn new() -> CCredentials_SteamGuardPhishingReport_Response {
        ::std::default::Default::default()
    }

    // optional string ipaddress_loginattempt = 1;

    pub fn ipaddress_loginattempt(&self) -> &str {
        match self.ipaddress_loginattempt.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_ipaddress_loginattempt(&mut self) {
        self.ipaddress_loginattempt = ::std::option::Option::None;
    }

    pub fn has_ipaddress_loginattempt(&self) -> bool {
        self.ipaddress_loginattempt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ipaddress_loginattempt(&mut self, v: ::std::string::String) {
        self.ipaddress_loginattempt = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ipaddress_loginattempt(&mut self) -> &mut ::std::string::String {
        if self.ipaddress_loginattempt.is_none() {
            self.ipaddress_loginattempt = ::std::option::Option::Some(::std::string::String::new());
        }
        self.ipaddress_loginattempt.as_mut().unwrap()
    }

    // Take field
    pub fn take_ipaddress_loginattempt(&mut self) -> ::std::string::String {
        self.ipaddress_loginattempt.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string countryname_loginattempt = 2;

    pub fn countryname_loginattempt(&self) -> &str {
        match self.countryname_loginattempt.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_countryname_loginattempt(&mut self) {
        self.countryname_loginattempt = ::std::option::Option::None;
    }

    pub fn has_countryname_loginattempt(&self) -> bool {
        self.countryname_loginattempt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_countryname_loginattempt(&mut self, v: ::std::string::String) {
        self.countryname_loginattempt = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_countryname_loginattempt(&mut self) -> &mut ::std::string::String {
        if self.countryname_loginattempt.is_none() {
            self.countryname_loginattempt = ::std::option::Option::Some(::std::string::String::new());
        }
        self.countryname_loginattempt.as_mut().unwrap()
    }

    // Take field
    pub fn take_countryname_loginattempt(&mut self) -> ::std::string::String {
        self.countryname_loginattempt.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string statename_loginattempt = 3;

    pub fn statename_loginattempt(&self) -> &str {
        match self.statename_loginattempt.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_statename_loginattempt(&mut self) {
        self.statename_loginattempt = ::std::option::Option::None;
    }

    pub fn has_statename_loginattempt(&self) -> bool {
        self.statename_loginattempt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_statename_loginattempt(&mut self, v: ::std::string::String) {
        self.statename_loginattempt = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_statename_loginattempt(&mut self) -> &mut ::std::string::String {
        if self.statename_loginattempt.is_none() {
            self.statename_loginattempt = ::std::option::Option::Some(::std::string::String::new());
        }
        self.statename_loginattempt.as_mut().unwrap()
    }

    // Take field
    pub fn take_statename_loginattempt(&mut self) -> ::std::string::String {
        self.statename_loginattempt.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string cityname_loginattempt = 4;

    pub fn cityname_loginattempt(&self) -> &str {
        match self.cityname_loginattempt.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_cityname_loginattempt(&mut self) {
        self.cityname_loginattempt = ::std::option::Option::None;
    }

    pub fn has_cityname_loginattempt(&self) -> bool {
        self.cityname_loginattempt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cityname_loginattempt(&mut self, v: ::std::string::String) {
        self.cityname_loginattempt = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cityname_loginattempt(&mut self) -> &mut ::std::string::String {
        if self.cityname_loginattempt.is_none() {
            self.cityname_loginattempt = ::std::option::Option::Some(::std::string::String::new());
        }
        self.cityname_loginattempt.as_mut().unwrap()
    }

    // Take field
    pub fn take_cityname_loginattempt(&mut self) -> ::std::string::String {
        self.cityname_loginattempt.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string ipaddress_actual = 5;

    pub fn ipaddress_actual(&self) -> &str {
        match self.ipaddress_actual.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_ipaddress_actual(&mut self) {
        self.ipaddress_actual = ::std::option::Option::None;
    }

    pub fn has_ipaddress_actual(&self) -> bool {
        self.ipaddress_actual.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ipaddress_actual(&mut self, v: ::std::string::String) {
        self.ipaddress_actual = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ipaddress_actual(&mut self) -> &mut ::std::string::String {
        if self.ipaddress_actual.is_none() {
            self.ipaddress_actual = ::std::option::Option::Some(::std::string::String::new());
        }
        self.ipaddress_actual.as_mut().unwrap()
    }

    // Take field
    pub fn take_ipaddress_actual(&mut self) -> ::std::string::String {
        self.ipaddress_actual.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string countryname_actual = 6;

    pub fn countryname_actual(&self) -> &str {
        match self.countryname_actual.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_countryname_actual(&mut self) {
        self.countryname_actual = ::std::option::Option::None;
    }

    pub fn has_countryname_actual(&self) -> bool {
        self.countryname_actual.is_some()
    }

    // Param is passed by value, moved
    pub fn set_countryname_actual(&mut self, v: ::std::string::String) {
        self.countryname_actual = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_countryname_actual(&mut self) -> &mut ::std::string::String {
        if self.countryname_actual.is_none() {
            self.countryname_actual = ::std::option::Option::Some(::std::string::String::new());
        }
        self.countryname_actual.as_mut().unwrap()
    }

    // Take field
    pub fn take_countryname_actual(&mut self) -> ::std::string::String {
        self.countryname_actual.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string statename_actual = 7;

    pub fn statename_actual(&self) -> &str {
        match self.statename_actual.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_statename_actual(&mut self) {
        self.statename_actual = ::std::option::Option::None;
    }

    pub fn has_statename_actual(&self) -> bool {
        self.statename_actual.is_some()
    }

    // Param is passed by value, moved
    pub fn set_statename_actual(&mut self, v: ::std::string::String) {
        self.statename_actual = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_statename_actual(&mut self) -> &mut ::std::string::String {
        if self.statename_actual.is_none() {
            self.statename_actual = ::std::option::Option::Some(::std::string::String::new());
        }
        self.statename_actual.as_mut().unwrap()
    }

    // Take field
    pub fn take_statename_actual(&mut self) -> ::std::string::String {
        self.statename_actual.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string cityname_actual = 8;

    pub fn cityname_actual(&self) -> &str {
        match self.cityname_actual.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_cityname_actual(&mut self) {
        self.cityname_actual = ::std::option::Option::None;
    }

    pub fn has_cityname_actual(&self) -> bool {
        self.cityname_actual.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cityname_actual(&mut self, v: ::std::string::String) {
        self.cityname_actual = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cityname_actual(&mut self) -> &mut ::std::string::String {
        if self.cityname_actual.is_none() {
            self.cityname_actual = ::std::option::Option::Some(::std::string::String::new());
        }
        self.cityname_actual.as_mut().unwrap()
    }

    // Take field
    pub fn take_cityname_actual(&mut self) -> ::std::string::String {
        self.cityname_actual.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string steamguard_code = 9;

    pub fn steamguard_code(&self) -> &str {
        match self.steamguard_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_steamguard_code(&mut self) {
        self.steamguard_code = ::std::option::Option::None;
    }

    pub fn has_steamguard_code(&self) -> bool {
        self.steamguard_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamguard_code(&mut self, v: ::std::string::String) {
        self.steamguard_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_steamguard_code(&mut self) -> &mut ::std::string::String {
        if self.steamguard_code.is_none() {
            self.steamguard_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.steamguard_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_steamguard_code(&mut self) -> ::std::string::String {
        self.steamguard_code.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CCredentials_SteamGuardPhishingReport_Response {
    const NAME: &'static str = "CCredentials_SteamGuardPhishingReport_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.ipaddress_loginattempt = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.countryname_loginattempt = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.statename_loginattempt = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.cityname_loginattempt = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.ipaddress_actual = ::std::option::Option::Some(is.read_string()?);
                },
                50 => {
                    self.countryname_actual = ::std::option::Option::Some(is.read_string()?);
                },
                58 => {
                    self.statename_actual = ::std::option::Option::Some(is.read_string()?);
                },
                66 => {
                    self.cityname_actual = ::std::option::Option::Some(is.read_string()?);
                },
                74 => {
                    self.steamguard_code = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ipaddress_loginattempt.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.countryname_loginattempt.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.statename_loginattempt.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.cityname_loginattempt.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.ipaddress_actual.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.countryname_actual.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(v) = self.statename_actual.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.cityname_actual.as_ref() {
            my_size += ::protobuf::rt::string_size(8, &v);
        }
        if let Some(v) = self.steamguard_code.as_ref() {
            my_size += ::protobuf::rt::string_size(9, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.ipaddress_loginattempt.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.countryname_loginattempt.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.statename_loginattempt.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.cityname_loginattempt.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.ipaddress_actual.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.countryname_actual.as_ref() {
            os.write_string(6, v)?;
        }
        if let Some(v) = self.statename_actual.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.cityname_actual.as_ref() {
            os.write_string(8, v)?;
        }
        if let Some(v) = self.steamguard_code.as_ref() {
            os.write_string(9, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCredentials_SteamGuardPhishingReport_Response {
        CCredentials_SteamGuardPhishingReport_Response::new()
    }

    fn clear(&mut self) {
        self.ipaddress_loginattempt = ::std::option::Option::None;
        self.countryname_loginattempt = ::std::option::Option::None;
        self.statename_loginattempt = ::std::option::Option::None;
        self.cityname_loginattempt = ::std::option::Option::None;
        self.ipaddress_actual = ::std::option::Option::None;
        self.countryname_actual = ::std::option::Option::None;
        self.statename_actual = ::std::option::Option::None;
        self.cityname_actual = ::std::option::Option::None;
        self.steamguard_code = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCredentials_SteamGuardPhishingReport_Response {
        static instance: CCredentials_SteamGuardPhishingReport_Response = CCredentials_SteamGuardPhishingReport_Response {
            ipaddress_loginattempt: ::std::option::Option::None,
            countryname_loginattempt: ::std::option::Option::None,
            statename_loginattempt: ::std::option::Option::None,
            cityname_loginattempt: ::std::option::Option::None,
            ipaddress_actual: ::std::option::Option::None,
            countryname_actual: ::std::option::Option::None,
            statename_actual: ::std::option::Option::None,
            cityname_actual: ::std::option::Option::None,
            steamguard_code: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "GetCredentialChangeTimeDetails."]
// @@protoc_insertion_point(message:CCredentials_LastCredentialChangeTime_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCredentials_LastCredentialChangeTime_Request {
    // message fields
    // @@protoc_insertion_point(field:CCredentials_LastCredentialChangeTime_Request.user_changes_only)
    pub user_changes_only: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CCredentials_LastCredentialChangeTime_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCredentials_LastCredentialChangeTime_Request {
    fn default() -> &'a CCredentials_LastCredentialChangeTime_Request {
        <CCredentials_LastCredentialChangeTime_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCredentials_LastCredentialChangeTime_Request {
    pub fn new() -> CCredentials_LastCredentialChangeTime_Request {
        ::std::default::Default::default()
    }

    // optional bool user_changes_only = 1;

    pub fn user_changes_only(&self) -> bool {
        self.user_changes_only.unwrap_or(false)
    }

    pub fn clear_user_changes_only(&mut self) {
        self.user_changes_only = ::std::option::Option::None;
    }

    pub fn has_user_changes_only(&self) -> bool {
        self.user_changes_only.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_changes_only(&mut self, v: bool) {
        self.user_changes_only = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CCredentials_LastCredentialChangeTime_Request {
    const NAME: &'static str = "CCredentials_LastCredentialChangeTime_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.user_changes_only = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.user_changes_only {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.user_changes_only {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCredentials_LastCredentialChangeTime_Request {
        CCredentials_LastCredentialChangeTime_Request::new()
    }

    fn clear(&mut self) {
        self.user_changes_only = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCredentials_LastCredentialChangeTime_Request {
        static instance: CCredentials_LastCredentialChangeTime_Request = CCredentials_LastCredentialChangeTime_Request {
            user_changes_only: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CCredentials_LastCredentialChangeTime_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCredentials_LastCredentialChangeTime_Response {
    // message fields
    // @@protoc_insertion_point(field:CCredentials_LastCredentialChangeTime_Response.timestamp_last_password_change)
    pub timestamp_last_password_change: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CCredentials_LastCredentialChangeTime_Response.timestamp_last_email_change)
    pub timestamp_last_email_change: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CCredentials_LastCredentialChangeTime_Response.timestamp_last_password_reset)
    pub timestamp_last_password_reset: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CCredentials_LastCredentialChangeTime_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCredentials_LastCredentialChangeTime_Response {
    fn default() -> &'a CCredentials_LastCredentialChangeTime_Response {
        <CCredentials_LastCredentialChangeTime_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCredentials_LastCredentialChangeTime_Response {
    pub fn new() -> CCredentials_LastCredentialChangeTime_Response {
        ::std::default::Default::default()
    }

    // optional fixed32 timestamp_last_password_change = 1;

    pub fn timestamp_last_password_change(&self) -> u32 {
        self.timestamp_last_password_change.unwrap_or(0)
    }

    pub fn clear_timestamp_last_password_change(&mut self) {
        self.timestamp_last_password_change = ::std::option::Option::None;
    }

    pub fn has_timestamp_last_password_change(&self) -> bool {
        self.timestamp_last_password_change.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp_last_password_change(&mut self, v: u32) {
        self.timestamp_last_password_change = ::std::option::Option::Some(v);
    }

    // optional fixed32 timestamp_last_email_change = 2;

    pub fn timestamp_last_email_change(&self) -> u32 {
        self.timestamp_last_email_change.unwrap_or(0)
    }

    pub fn clear_timestamp_last_email_change(&mut self) {
        self.timestamp_last_email_change = ::std::option::Option::None;
    }

    pub fn has_timestamp_last_email_change(&self) -> bool {
        self.timestamp_last_email_change.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp_last_email_change(&mut self, v: u32) {
        self.timestamp_last_email_change = ::std::option::Option::Some(v);
    }

    // optional fixed32 timestamp_last_password_reset = 3;

    pub fn timestamp_last_password_reset(&self) -> u32 {
        self.timestamp_last_password_reset.unwrap_or(0)
    }

    pub fn clear_timestamp_last_password_reset(&mut self) {
        self.timestamp_last_password_reset = ::std::option::Option::None;
    }

    pub fn has_timestamp_last_password_reset(&self) -> bool {
        self.timestamp_last_password_reset.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp_last_password_reset(&mut self, v: u32) {
        self.timestamp_last_password_reset = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CCredentials_LastCredentialChangeTime_Response {
    const NAME: &'static str = "CCredentials_LastCredentialChangeTime_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.timestamp_last_password_change = ::std::option::Option::Some(is.read_fixed32()?);
                },
                21 => {
                    self.timestamp_last_email_change = ::std::option::Option::Some(is.read_fixed32()?);
                },
                29 => {
                    self.timestamp_last_password_reset = ::std::option::Option::Some(is.read_fixed32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.timestamp_last_password_change {
            my_size += 1 + 4;
        }
        if let Some(v) = self.timestamp_last_email_change {
            my_size += 1 + 4;
        }
        if let Some(v) = self.timestamp_last_password_reset {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.timestamp_last_password_change {
            os.write_fixed32(1, v)?;
        }
        if let Some(v) = self.timestamp_last_email_change {
            os.write_fixed32(2, v)?;
        }
        if let Some(v) = self.timestamp_last_password_reset {
            os.write_fixed32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCredentials_LastCredentialChangeTime_Response {
        CCredentials_LastCredentialChangeTime_Response::new()
    }

    fn clear(&mut self) {
        self.timestamp_last_password_change = ::std::option::Option::None;
        self.timestamp_last_email_change = ::std::option::Option::None;
        self.timestamp_last_password_reset = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCredentials_LastCredentialChangeTime_Response {
        static instance: CCredentials_LastCredentialChangeTime_Response = CCredentials_LastCredentialChangeTime_Response {
            timestamp_last_password_change: ::std::option::Option::None,
            timestamp_last_email_change: ::std::option::Option::None,
            timestamp_last_password_reset: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "GetAccountAuthSecret"]
// @@protoc_insertion_point(message:CCredentials_GetAccountAuthSecret_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCredentials_GetAccountAuthSecret_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CCredentials_GetAccountAuthSecret_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCredentials_GetAccountAuthSecret_Request {
    fn default() -> &'a CCredentials_GetAccountAuthSecret_Request {
        <CCredentials_GetAccountAuthSecret_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCredentials_GetAccountAuthSecret_Request {
    pub fn new() -> CCredentials_GetAccountAuthSecret_Request {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CCredentials_GetAccountAuthSecret_Request {
    const NAME: &'static str = "CCredentials_GetAccountAuthSecret_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCredentials_GetAccountAuthSecret_Request {
        CCredentials_GetAccountAuthSecret_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCredentials_GetAccountAuthSecret_Request {
        static instance: CCredentials_GetAccountAuthSecret_Request = CCredentials_GetAccountAuthSecret_Request {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CCredentials_GetAccountAuthSecret_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCredentials_GetAccountAuthSecret_Response {
    // message fields
    // @@protoc_insertion_point(field:CCredentials_GetAccountAuthSecret_Response.secret_id)
    pub secret_id: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CCredentials_GetAccountAuthSecret_Response.secret)
    pub secret: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:CCredentials_GetAccountAuthSecret_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCredentials_GetAccountAuthSecret_Response {
    fn default() -> &'a CCredentials_GetAccountAuthSecret_Response {
        <CCredentials_GetAccountAuthSecret_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCredentials_GetAccountAuthSecret_Response {
    pub fn new() -> CCredentials_GetAccountAuthSecret_Response {
        ::std::default::Default::default()
    }

    // optional int32 secret_id = 1;

    pub fn secret_id(&self) -> i32 {
        self.secret_id.unwrap_or(0)
    }

    pub fn clear_secret_id(&mut self) {
        self.secret_id = ::std::option::Option::None;
    }

    pub fn has_secret_id(&self) -> bool {
        self.secret_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_secret_id(&mut self, v: i32) {
        self.secret_id = ::std::option::Option::Some(v);
    }

    // optional bytes secret = 2;

    pub fn secret(&self) -> &[u8] {
        match self.secret.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_secret(&mut self) {
        self.secret = ::std::option::Option::None;
    }

    pub fn has_secret(&self) -> bool {
        self.secret.is_some()
    }

    // Param is passed by value, moved
    pub fn set_secret(&mut self, v: ::std::vec::Vec<u8>) {
        self.secret = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_secret(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.secret.is_none() {
            self.secret = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.secret.as_mut().unwrap()
    }

    // Take field
    pub fn take_secret(&mut self) -> ::std::vec::Vec<u8> {
        self.secret.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CCredentials_GetAccountAuthSecret_Response {
    const NAME: &'static str = "CCredentials_GetAccountAuthSecret_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.secret_id = ::std::option::Option::Some(is.read_int32()?);
                },
                18 => {
                    self.secret = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.secret_id {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.secret.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.secret_id {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.secret.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCredentials_GetAccountAuthSecret_Response {
        CCredentials_GetAccountAuthSecret_Response::new()
    }

    fn clear(&mut self) {
        self.secret_id = ::std::option::Option::None;
        self.secret = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCredentials_GetAccountAuthSecret_Response {
        static instance: CCredentials_GetAccountAuthSecret_Response = CCredentials_GetAccountAuthSecret_Response {
            secret_id: ::std::option::Option::None,
            secret: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}
#[allow(unused_imports)]
use crate::steammessages_base::*;
#[allow(unused_imports)]
use crate::steammessages_unified_base_steamclient::*;
impl crate::RpcMessage for CCredentials_TestAvailablePassword_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CCredentials_TestAvailablePassword_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CCredentials_GetSteamGuardDetails_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CCredentials_GetSteamGuardDetails_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CCredentials_ValidateEmailAddress_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CCredentials_ValidateEmailAddress_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CCredentials_SteamGuardPhishingReport_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CCredentials_SteamGuardPhishingReport_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CCredentials_LastCredentialChangeTime_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CCredentials_LastCredentialChangeTime_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CCredentials_GetAccountAuthSecret_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CCredentials_GetAccountAuthSecret_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
///Credentials service
struct Credentials {}
impl crate::RpcService for Credentials {
    const SERVICE_NAME: &'static str = "Credentials";
}
impl crate::RpcMethod for CCredentials_GetAccountAuthSecret_Request {
    const METHOD_NAME: &'static str = "Credentials.GetAccountAuthSecret#1";
    type Response = CCredentials_GetAccountAuthSecret_Response;
}
impl crate::RpcMethod for CCredentials_GetSteamGuardDetails_Request {
    const METHOD_NAME: &'static str = "Credentials.GetSteamGuardDetails#1";
    type Response = CCredentials_GetSteamGuardDetails_Response;
}
impl crate::RpcMethod for CCredentials_LastCredentialChangeTime_Request {
    const METHOD_NAME: &'static str = "Credentials.GetCredentialChangeTimeDetails#1";
    type Response = CCredentials_LastCredentialChangeTime_Response;
}
impl crate::RpcMethod for CCredentials_SteamGuardPhishingReport_Request {
    const METHOD_NAME: &'static str = "Credentials.SteamGuardPhishingReport#1";
    type Response = CCredentials_SteamGuardPhishingReport_Response;
}
impl crate::RpcMethod for CCredentials_TestAvailablePassword_Request {
    const METHOD_NAME: &'static str = "Credentials.TestAvailablePassword#1";
    type Response = CCredentials_TestAvailablePassword_Response;
}
impl crate::RpcMethod for CCredentials_ValidateEmailAddress_Request {
    const METHOD_NAME: &'static str = "Credentials.ValidateEmailAddress#1";
    type Response = CCredentials_ValidateEmailAddress_Response;
}
