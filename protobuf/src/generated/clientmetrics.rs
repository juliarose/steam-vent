// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `clientmetrics.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:CClientMetrics_ClientBootstrap_RequestInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CClientMetrics_ClientBootstrap_RequestInfo {
    // message fields
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_RequestInfo.original_hostname)
    pub original_hostname: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_RequestInfo.actual_hostname)
    pub actual_hostname: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_RequestInfo.path)
    pub path: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_RequestInfo.base_name)
    pub base_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_RequestInfo.success)
    pub success: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_RequestInfo.status_code)
    pub status_code: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_RequestInfo.address_of_request_url)
    pub address_of_request_url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_RequestInfo.response_time_ms)
    pub response_time_ms: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_RequestInfo.bytes_received)
    pub bytes_received: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_RequestInfo.num_retries)
    pub num_retries: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CClientMetrics_ClientBootstrap_RequestInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CClientMetrics_ClientBootstrap_RequestInfo {
    fn default() -> &'a CClientMetrics_ClientBootstrap_RequestInfo {
        <CClientMetrics_ClientBootstrap_RequestInfo as ::protobuf::Message>::default_instance()
    }
}

impl CClientMetrics_ClientBootstrap_RequestInfo {
    pub fn new() -> CClientMetrics_ClientBootstrap_RequestInfo {
        ::std::default::Default::default()
    }

    // optional string original_hostname = 1;

    pub fn original_hostname(&self) -> &str {
        match self.original_hostname.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_original_hostname(&mut self) {
        self.original_hostname = ::std::option::Option::None;
    }

    pub fn has_original_hostname(&self) -> bool {
        self.original_hostname.is_some()
    }

    // Param is passed by value, moved
    pub fn set_original_hostname(&mut self, v: ::std::string::String) {
        self.original_hostname = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_original_hostname(&mut self) -> &mut ::std::string::String {
        if self.original_hostname.is_none() {
            self.original_hostname = ::std::option::Option::Some(::std::string::String::new());
        }
        self.original_hostname.as_mut().unwrap()
    }

    // Take field
    pub fn take_original_hostname(&mut self) -> ::std::string::String {
        self.original_hostname.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string actual_hostname = 2;

    pub fn actual_hostname(&self) -> &str {
        match self.actual_hostname.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_actual_hostname(&mut self) {
        self.actual_hostname = ::std::option::Option::None;
    }

    pub fn has_actual_hostname(&self) -> bool {
        self.actual_hostname.is_some()
    }

    // Param is passed by value, moved
    pub fn set_actual_hostname(&mut self, v: ::std::string::String) {
        self.actual_hostname = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_actual_hostname(&mut self) -> &mut ::std::string::String {
        if self.actual_hostname.is_none() {
            self.actual_hostname = ::std::option::Option::Some(::std::string::String::new());
        }
        self.actual_hostname.as_mut().unwrap()
    }

    // Take field
    pub fn take_actual_hostname(&mut self) -> ::std::string::String {
        self.actual_hostname.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string path = 3;

    pub fn path(&self) -> &str {
        match self.path.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_path(&mut self) {
        self.path = ::std::option::Option::None;
    }

    pub fn has_path(&self) -> bool {
        self.path.is_some()
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        if self.path.is_none() {
            self.path = ::std::option::Option::Some(::std::string::String::new());
        }
        self.path.as_mut().unwrap()
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        self.path.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string base_name = 4;

    pub fn base_name(&self) -> &str {
        match self.base_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_base_name(&mut self) {
        self.base_name = ::std::option::Option::None;
    }

    pub fn has_base_name(&self) -> bool {
        self.base_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_base_name(&mut self, v: ::std::string::String) {
        self.base_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_name(&mut self) -> &mut ::std::string::String {
        if self.base_name.is_none() {
            self.base_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.base_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_base_name(&mut self) -> ::std::string::String {
        self.base_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool success = 5;

    pub fn success(&self) -> bool {
        self.success.unwrap_or(false)
    }

    pub fn clear_success(&mut self) {
        self.success = ::std::option::Option::None;
    }

    pub fn has_success(&self) -> bool {
        self.success.is_some()
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = ::std::option::Option::Some(v);
    }

    // optional uint32 status_code = 6;

    pub fn status_code(&self) -> u32 {
        self.status_code.unwrap_or(0)
    }

    pub fn clear_status_code(&mut self) {
        self.status_code = ::std::option::Option::None;
    }

    pub fn has_status_code(&self) -> bool {
        self.status_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status_code(&mut self, v: u32) {
        self.status_code = ::std::option::Option::Some(v);
    }

    // optional string address_of_request_url = 7;

    pub fn address_of_request_url(&self) -> &str {
        match self.address_of_request_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_address_of_request_url(&mut self) {
        self.address_of_request_url = ::std::option::Option::None;
    }

    pub fn has_address_of_request_url(&self) -> bool {
        self.address_of_request_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address_of_request_url(&mut self, v: ::std::string::String) {
        self.address_of_request_url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address_of_request_url(&mut self) -> &mut ::std::string::String {
        if self.address_of_request_url.is_none() {
            self.address_of_request_url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.address_of_request_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_address_of_request_url(&mut self) -> ::std::string::String {
        self.address_of_request_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 response_time_ms = 8;

    pub fn response_time_ms(&self) -> u32 {
        self.response_time_ms.unwrap_or(0)
    }

    pub fn clear_response_time_ms(&mut self) {
        self.response_time_ms = ::std::option::Option::None;
    }

    pub fn has_response_time_ms(&self) -> bool {
        self.response_time_ms.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response_time_ms(&mut self, v: u32) {
        self.response_time_ms = ::std::option::Option::Some(v);
    }

    // optional uint64 bytes_received = 9;

    pub fn bytes_received(&self) -> u64 {
        self.bytes_received.unwrap_or(0)
    }

    pub fn clear_bytes_received(&mut self) {
        self.bytes_received = ::std::option::Option::None;
    }

    pub fn has_bytes_received(&self) -> bool {
        self.bytes_received.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bytes_received(&mut self, v: u64) {
        self.bytes_received = ::std::option::Option::Some(v);
    }

    // optional uint32 num_retries = 10;

    pub fn num_retries(&self) -> u32 {
        self.num_retries.unwrap_or(0)
    }

    pub fn clear_num_retries(&mut self) {
        self.num_retries = ::std::option::Option::None;
    }

    pub fn has_num_retries(&self) -> bool {
        self.num_retries.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_retries(&mut self, v: u32) {
        self.num_retries = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CClientMetrics_ClientBootstrap_RequestInfo {
    const NAME: &'static str = "CClientMetrics_ClientBootstrap_RequestInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.original_hostname = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.actual_hostname = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.path = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.base_name = ::std::option::Option::Some(is.read_string()?);
                },
                40 => {
                    self.success = ::std::option::Option::Some(is.read_bool()?);
                },
                48 => {
                    self.status_code = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    self.address_of_request_url = ::std::option::Option::Some(is.read_string()?);
                },
                64 => {
                    self.response_time_ms = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.bytes_received = ::std::option::Option::Some(is.read_uint64()?);
                },
                80 => {
                    self.num_retries = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.original_hostname.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.actual_hostname.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.path.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.base_name.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.success {
            my_size += 1 + 1;
        }
        if let Some(v) = self.status_code {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.address_of_request_url.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.response_time_ms {
            my_size += ::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.bytes_received {
            my_size += ::protobuf::rt::uint64_size(9, v);
        }
        if let Some(v) = self.num_retries {
            my_size += ::protobuf::rt::uint32_size(10, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.original_hostname.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.actual_hostname.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.path.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.base_name.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.success {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.status_code {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.address_of_request_url.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.response_time_ms {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.bytes_received {
            os.write_uint64(9, v)?;
        }
        if let Some(v) = self.num_retries {
            os.write_uint32(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CClientMetrics_ClientBootstrap_RequestInfo {
        CClientMetrics_ClientBootstrap_RequestInfo::new()
    }

    fn clear(&mut self) {
        self.original_hostname = ::std::option::Option::None;
        self.actual_hostname = ::std::option::Option::None;
        self.path = ::std::option::Option::None;
        self.base_name = ::std::option::Option::None;
        self.success = ::std::option::Option::None;
        self.status_code = ::std::option::Option::None;
        self.address_of_request_url = ::std::option::Option::None;
        self.response_time_ms = ::std::option::Option::None;
        self.bytes_received = ::std::option::Option::None;
        self.num_retries = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CClientMetrics_ClientBootstrap_RequestInfo {
        static instance: CClientMetrics_ClientBootstrap_RequestInfo = CClientMetrics_ClientBootstrap_RequestInfo {
            original_hostname: ::std::option::Option::None,
            actual_hostname: ::std::option::Option::None,
            path: ::std::option::Option::None,
            base_name: ::std::option::Option::None,
            success: ::std::option::Option::None,
            status_code: ::std::option::Option::None,
            address_of_request_url: ::std::option::Option::None,
            response_time_ms: ::std::option::Option::None,
            bytes_received: ::std::option::Option::None,
            num_retries: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CClientMetrics_ClientBootstrap_Summary)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CClientMetrics_ClientBootstrap_Summary {
    // message fields
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_Summary.launcher_type)
    pub launcher_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_Summary.steam_realm)
    pub steam_realm: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_Summary.beta_name)
    pub beta_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_Summary.download_completed)
    pub download_completed: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_Summary.total_time_ms)
    pub total_time_ms: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_Summary.manifest_requests)
    pub manifest_requests: ::std::vec::Vec<CClientMetrics_ClientBootstrap_RequestInfo>,
    // @@protoc_insertion_point(field:CClientMetrics_ClientBootstrap_Summary.package_requests)
    pub package_requests: ::std::vec::Vec<CClientMetrics_ClientBootstrap_RequestInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:CClientMetrics_ClientBootstrap_Summary.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CClientMetrics_ClientBootstrap_Summary {
    fn default() -> &'a CClientMetrics_ClientBootstrap_Summary {
        <CClientMetrics_ClientBootstrap_Summary as ::protobuf::Message>::default_instance()
    }
}

impl CClientMetrics_ClientBootstrap_Summary {
    pub fn new() -> CClientMetrics_ClientBootstrap_Summary {
        ::std::default::Default::default()
    }

    // optional uint32 launcher_type = 1;

    pub fn launcher_type(&self) -> u32 {
        self.launcher_type.unwrap_or(0)
    }

    pub fn clear_launcher_type(&mut self) {
        self.launcher_type = ::std::option::Option::None;
    }

    pub fn has_launcher_type(&self) -> bool {
        self.launcher_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_launcher_type(&mut self, v: u32) {
        self.launcher_type = ::std::option::Option::Some(v);
    }

    // optional uint32 steam_realm = 2;

    pub fn steam_realm(&self) -> u32 {
        self.steam_realm.unwrap_or(0)
    }

    pub fn clear_steam_realm(&mut self) {
        self.steam_realm = ::std::option::Option::None;
    }

    pub fn has_steam_realm(&self) -> bool {
        self.steam_realm.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steam_realm(&mut self, v: u32) {
        self.steam_realm = ::std::option::Option::Some(v);
    }

    // optional string beta_name = 3;

    pub fn beta_name(&self) -> &str {
        match self.beta_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_beta_name(&mut self) {
        self.beta_name = ::std::option::Option::None;
    }

    pub fn has_beta_name(&self) -> bool {
        self.beta_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beta_name(&mut self, v: ::std::string::String) {
        self.beta_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_beta_name(&mut self) -> &mut ::std::string::String {
        if self.beta_name.is_none() {
            self.beta_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.beta_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_beta_name(&mut self) -> ::std::string::String {
        self.beta_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool download_completed = 4;

    pub fn download_completed(&self) -> bool {
        self.download_completed.unwrap_or(false)
    }

    pub fn clear_download_completed(&mut self) {
        self.download_completed = ::std::option::Option::None;
    }

    pub fn has_download_completed(&self) -> bool {
        self.download_completed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_download_completed(&mut self, v: bool) {
        self.download_completed = ::std::option::Option::Some(v);
    }

    // optional uint32 total_time_ms = 6;

    pub fn total_time_ms(&self) -> u32 {
        self.total_time_ms.unwrap_or(0)
    }

    pub fn clear_total_time_ms(&mut self) {
        self.total_time_ms = ::std::option::Option::None;
    }

    pub fn has_total_time_ms(&self) -> bool {
        self.total_time_ms.is_some()
    }

    // Param is passed by value, moved
    pub fn set_total_time_ms(&mut self, v: u32) {
        self.total_time_ms = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CClientMetrics_ClientBootstrap_Summary {
    const NAME: &'static str = "CClientMetrics_ClientBootstrap_Summary";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.launcher_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.steam_realm = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.beta_name = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.download_completed = ::std::option::Option::Some(is.read_bool()?);
                },
                48 => {
                    self.total_time_ms = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    self.manifest_requests.push(is.read_message()?);
                },
                66 => {
                    self.package_requests.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.launcher_type {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.steam_realm {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.beta_name.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.download_completed {
            my_size += 1 + 1;
        }
        if let Some(v) = self.total_time_ms {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        for value in &self.manifest_requests {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.package_requests {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.launcher_type {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.steam_realm {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.beta_name.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.download_completed {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.total_time_ms {
            os.write_uint32(6, v)?;
        }
        for v in &self.manifest_requests {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        for v in &self.package_requests {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CClientMetrics_ClientBootstrap_Summary {
        CClientMetrics_ClientBootstrap_Summary::new()
    }

    fn clear(&mut self) {
        self.launcher_type = ::std::option::Option::None;
        self.steam_realm = ::std::option::Option::None;
        self.beta_name = ::std::option::Option::None;
        self.download_completed = ::std::option::Option::None;
        self.total_time_ms = ::std::option::Option::None;
        self.manifest_requests.clear();
        self.package_requests.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CClientMetrics_ClientBootstrap_Summary {
        static instance: CClientMetrics_ClientBootstrap_Summary = CClientMetrics_ClientBootstrap_Summary {
            launcher_type: ::std::option::Option::None,
            steam_realm: ::std::option::Option::None,
            beta_name: ::std::option::Option::None,
            download_completed: ::std::option::Option::None,
            total_time_ms: ::std::option::Option::None,
            manifest_requests: ::std::vec::Vec::new(),
            package_requests: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CClientMetrics_ContentDownloadResponse_Counts)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CClientMetrics_ContentDownloadResponse_Counts {
    // message fields
    // @@protoc_insertion_point(field:CClientMetrics_ContentDownloadResponse_Counts.class_100)
    pub class_100: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CClientMetrics_ContentDownloadResponse_Counts.class_200)
    pub class_200: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CClientMetrics_ContentDownloadResponse_Counts.class_300)
    pub class_300: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CClientMetrics_ContentDownloadResponse_Counts.class_400)
    pub class_400: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CClientMetrics_ContentDownloadResponse_Counts.class_500)
    pub class_500: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CClientMetrics_ContentDownloadResponse_Counts.no_response)
    pub no_response: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CClientMetrics_ContentDownloadResponse_Counts.class_unknown)
    pub class_unknown: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CClientMetrics_ContentDownloadResponse_Counts.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CClientMetrics_ContentDownloadResponse_Counts {
    fn default() -> &'a CClientMetrics_ContentDownloadResponse_Counts {
        <CClientMetrics_ContentDownloadResponse_Counts as ::protobuf::Message>::default_instance()
    }
}

impl CClientMetrics_ContentDownloadResponse_Counts {
    pub fn new() -> CClientMetrics_ContentDownloadResponse_Counts {
        ::std::default::Default::default()
    }

    // optional uint32 class_100 = 1;

    pub fn class_100(&self) -> u32 {
        self.class_100.unwrap_or(0)
    }

    pub fn clear_class_100(&mut self) {
        self.class_100 = ::std::option::Option::None;
    }

    pub fn has_class_100(&self) -> bool {
        self.class_100.is_some()
    }

    // Param is passed by value, moved
    pub fn set_class_100(&mut self, v: u32) {
        self.class_100 = ::std::option::Option::Some(v);
    }

    // optional uint32 class_200 = 2;

    pub fn class_200(&self) -> u32 {
        self.class_200.unwrap_or(0)
    }

    pub fn clear_class_200(&mut self) {
        self.class_200 = ::std::option::Option::None;
    }

    pub fn has_class_200(&self) -> bool {
        self.class_200.is_some()
    }

    // Param is passed by value, moved
    pub fn set_class_200(&mut self, v: u32) {
        self.class_200 = ::std::option::Option::Some(v);
    }

    // optional uint32 class_300 = 3;

    pub fn class_300(&self) -> u32 {
        self.class_300.unwrap_or(0)
    }

    pub fn clear_class_300(&mut self) {
        self.class_300 = ::std::option::Option::None;
    }

    pub fn has_class_300(&self) -> bool {
        self.class_300.is_some()
    }

    // Param is passed by value, moved
    pub fn set_class_300(&mut self, v: u32) {
        self.class_300 = ::std::option::Option::Some(v);
    }

    // optional uint32 class_400 = 4;

    pub fn class_400(&self) -> u32 {
        self.class_400.unwrap_or(0)
    }

    pub fn clear_class_400(&mut self) {
        self.class_400 = ::std::option::Option::None;
    }

    pub fn has_class_400(&self) -> bool {
        self.class_400.is_some()
    }

    // Param is passed by value, moved
    pub fn set_class_400(&mut self, v: u32) {
        self.class_400 = ::std::option::Option::Some(v);
    }

    // optional uint32 class_500 = 5;

    pub fn class_500(&self) -> u32 {
        self.class_500.unwrap_or(0)
    }

    pub fn clear_class_500(&mut self) {
        self.class_500 = ::std::option::Option::None;
    }

    pub fn has_class_500(&self) -> bool {
        self.class_500.is_some()
    }

    // Param is passed by value, moved
    pub fn set_class_500(&mut self, v: u32) {
        self.class_500 = ::std::option::Option::Some(v);
    }

    // optional uint32 no_response = 6;

    pub fn no_response(&self) -> u32 {
        self.no_response.unwrap_or(0)
    }

    pub fn clear_no_response(&mut self) {
        self.no_response = ::std::option::Option::None;
    }

    pub fn has_no_response(&self) -> bool {
        self.no_response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_no_response(&mut self, v: u32) {
        self.no_response = ::std::option::Option::Some(v);
    }

    // optional uint32 class_unknown = 7;

    pub fn class_unknown(&self) -> u32 {
        self.class_unknown.unwrap_or(0)
    }

    pub fn clear_class_unknown(&mut self) {
        self.class_unknown = ::std::option::Option::None;
    }

    pub fn has_class_unknown(&self) -> bool {
        self.class_unknown.is_some()
    }

    // Param is passed by value, moved
    pub fn set_class_unknown(&mut self, v: u32) {
        self.class_unknown = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CClientMetrics_ContentDownloadResponse_Counts {
    const NAME: &'static str = "CClientMetrics_ContentDownloadResponse_Counts";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.class_100 = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.class_200 = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.class_300 = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.class_400 = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.class_500 = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.no_response = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.class_unknown = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.class_100 {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.class_200 {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.class_300 {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.class_400 {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.class_500 {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.no_response {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.class_unknown {
            my_size += ::protobuf::rt::uint32_size(7, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.class_100 {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.class_200 {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.class_300 {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.class_400 {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.class_500 {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.no_response {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.class_unknown {
            os.write_uint32(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CClientMetrics_ContentDownloadResponse_Counts {
        CClientMetrics_ContentDownloadResponse_Counts::new()
    }

    fn clear(&mut self) {
        self.class_100 = ::std::option::Option::None;
        self.class_200 = ::std::option::Option::None;
        self.class_300 = ::std::option::Option::None;
        self.class_400 = ::std::option::Option::None;
        self.class_500 = ::std::option::Option::None;
        self.no_response = ::std::option::Option::None;
        self.class_unknown = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CClientMetrics_ContentDownloadResponse_Counts {
        static instance: CClientMetrics_ContentDownloadResponse_Counts = CClientMetrics_ContentDownloadResponse_Counts {
            class_100: ::std::option::Option::None,
            class_200: ::std::option::Option::None,
            class_300: ::std::option::Option::None,
            class_400: ::std::option::Option::None,
            class_500: ::std::option::Option::None,
            no_response: ::std::option::Option::None,
            class_unknown: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CClientMetrics_ContentDownloadResponse_HostCounts)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CClientMetrics_ContentDownloadResponse_HostCounts {
    // message fields
    // @@protoc_insertion_point(field:CClientMetrics_ContentDownloadResponse_HostCounts.hostname)
    pub hostname: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CClientMetrics_ContentDownloadResponse_HostCounts.source_type)
    pub source_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CClientMetrics_ContentDownloadResponse_HostCounts.counts)
    pub counts: ::protobuf::MessageField<CClientMetrics_ContentDownloadResponse_Counts>,
    // special fields
    // @@protoc_insertion_point(special_field:CClientMetrics_ContentDownloadResponse_HostCounts.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CClientMetrics_ContentDownloadResponse_HostCounts {
    fn default() -> &'a CClientMetrics_ContentDownloadResponse_HostCounts {
        <CClientMetrics_ContentDownloadResponse_HostCounts as ::protobuf::Message>::default_instance()
    }
}

impl CClientMetrics_ContentDownloadResponse_HostCounts {
    pub fn new() -> CClientMetrics_ContentDownloadResponse_HostCounts {
        ::std::default::Default::default()
    }

    // optional string hostname = 1;

    pub fn hostname(&self) -> &str {
        match self.hostname.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_hostname(&mut self) {
        self.hostname = ::std::option::Option::None;
    }

    pub fn has_hostname(&self) -> bool {
        self.hostname.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hostname(&mut self, v: ::std::string::String) {
        self.hostname = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hostname(&mut self) -> &mut ::std::string::String {
        if self.hostname.is_none() {
            self.hostname = ::std::option::Option::Some(::std::string::String::new());
        }
        self.hostname.as_mut().unwrap()
    }

    // Take field
    pub fn take_hostname(&mut self) -> ::std::string::String {
        self.hostname.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 source_type = 2;

    pub fn source_type(&self) -> u32 {
        self.source_type.unwrap_or(0)
    }

    pub fn clear_source_type(&mut self) {
        self.source_type = ::std::option::Option::None;
    }

    pub fn has_source_type(&self) -> bool {
        self.source_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_type(&mut self, v: u32) {
        self.source_type = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CClientMetrics_ContentDownloadResponse_HostCounts {
    const NAME: &'static str = "CClientMetrics_ContentDownloadResponse_HostCounts";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.hostname = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.source_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.counts)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.hostname.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.source_type {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.counts.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.hostname.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.source_type {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.counts.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CClientMetrics_ContentDownloadResponse_HostCounts {
        CClientMetrics_ContentDownloadResponse_HostCounts::new()
    }

    fn clear(&mut self) {
        self.hostname = ::std::option::Option::None;
        self.source_type = ::std::option::Option::None;
        self.counts.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CClientMetrics_ContentDownloadResponse_HostCounts {
        static instance: CClientMetrics_ContentDownloadResponse_HostCounts = CClientMetrics_ContentDownloadResponse_HostCounts {
            hostname: ::std::option::Option::None,
            source_type: ::std::option::Option::None,
            counts: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CClientMetrics_ContentDownloadResponse_Hosts)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CClientMetrics_ContentDownloadResponse_Hosts {
    // message fields
    // @@protoc_insertion_point(field:CClientMetrics_ContentDownloadResponse_Hosts.hosts)
    pub hosts: ::std::vec::Vec<CClientMetrics_ContentDownloadResponse_HostCounts>,
    // special fields
    // @@protoc_insertion_point(special_field:CClientMetrics_ContentDownloadResponse_Hosts.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CClientMetrics_ContentDownloadResponse_Hosts {
    fn default() -> &'a CClientMetrics_ContentDownloadResponse_Hosts {
        <CClientMetrics_ContentDownloadResponse_Hosts as ::protobuf::Message>::default_instance()
    }
}

impl CClientMetrics_ContentDownloadResponse_Hosts {
    pub fn new() -> CClientMetrics_ContentDownloadResponse_Hosts {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CClientMetrics_ContentDownloadResponse_Hosts {
    const NAME: &'static str = "CClientMetrics_ContentDownloadResponse_Hosts";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.hosts.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.hosts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.hosts {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CClientMetrics_ContentDownloadResponse_Hosts {
        CClientMetrics_ContentDownloadResponse_Hosts::new()
    }

    fn clear(&mut self) {
        self.hosts.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CClientMetrics_ContentDownloadResponse_Hosts {
        static instance: CClientMetrics_ContentDownloadResponse_Hosts = CClientMetrics_ContentDownloadResponse_Hosts {
            hosts: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}
impl crate::RpcMessage for CClientMetrics_ClientBootstrap_RequestInfo {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CClientMetrics_ClientBootstrap_Summary {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CClientMetrics_ContentDownloadResponse_Counts {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CClientMetrics_ContentDownloadResponse_HostCounts {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CClientMetrics_ContentDownloadResponse_Hosts {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
