// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_sitelicenseclient.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:CMsgClientSiteInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientSiteInfo {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientSiteInfo.site_id)
    pub site_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgClientSiteInfo.site_name)
    pub site_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgClientSiteInfo.allow_cached_credentials)
    pub allow_cached_credentials: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientSiteInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientSiteInfo {
    fn default() -> &'a CMsgClientSiteInfo {
        <CMsgClientSiteInfo as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientSiteInfo {
    pub fn new() -> CMsgClientSiteInfo {
        ::std::default::Default::default()
    }

    // optional uint64 site_id = 1;

    pub fn site_id(&self) -> u64 {
        self.site_id.unwrap_or(0)
    }

    pub fn clear_site_id(&mut self) {
        self.site_id = ::std::option::Option::None;
    }

    pub fn has_site_id(&self) -> bool {
        self.site_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_site_id(&mut self, v: u64) {
        self.site_id = ::std::option::Option::Some(v);
    }

    // optional string site_name = 2;

    pub fn site_name(&self) -> &str {
        match self.site_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_site_name(&mut self) {
        self.site_name = ::std::option::Option::None;
    }

    pub fn has_site_name(&self) -> bool {
        self.site_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_site_name(&mut self, v: ::std::string::String) {
        self.site_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_site_name(&mut self) -> &mut ::std::string::String {
        if self.site_name.is_none() {
            self.site_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.site_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_site_name(&mut self) -> ::std::string::String {
        self.site_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool allow_cached_credentials = 3;

    pub fn allow_cached_credentials(&self) -> bool {
        self.allow_cached_credentials.unwrap_or(false)
    }

    pub fn clear_allow_cached_credentials(&mut self) {
        self.allow_cached_credentials = ::std::option::Option::None;
    }

    pub fn has_allow_cached_credentials(&self) -> bool {
        self.allow_cached_credentials.is_some()
    }

    // Param is passed by value, moved
    pub fn set_allow_cached_credentials(&mut self, v: bool) {
        self.allow_cached_credentials = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CMsgClientSiteInfo {
    const NAME: &'static str = "CMsgClientSiteInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.site_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.site_name = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.allow_cached_credentials = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.site_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.site_name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.allow_cached_credentials {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.site_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.site_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.allow_cached_credentials {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientSiteInfo {
        CMsgClientSiteInfo::new()
    }

    fn clear(&mut self) {
        self.site_id = ::std::option::Option::None;
        self.site_name = ::std::option::Option::None;
        self.allow_cached_credentials = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientSiteInfo {
        static instance: CMsgClientSiteInfo = CMsgClientSiteInfo {
            site_id: ::std::option::Option::None,
            site_name: ::std::option::Option::None,
            allow_cached_credentials: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientSiteLicenseCheckout)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientSiteLicenseCheckout {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientSiteLicenseCheckout.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientSiteLicenseCheckout.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientSiteLicenseCheckout {
    fn default() -> &'a CMsgClientSiteLicenseCheckout {
        <CMsgClientSiteLicenseCheckout as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientSiteLicenseCheckout {
    pub fn new() -> CMsgClientSiteLicenseCheckout {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CMsgClientSiteLicenseCheckout {
    const NAME: &'static str = "CMsgClientSiteLicenseCheckout";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientSiteLicenseCheckout {
        CMsgClientSiteLicenseCheckout::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientSiteLicenseCheckout {
        static instance: CMsgClientSiteLicenseCheckout = CMsgClientSiteLicenseCheckout {
            appid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientSiteLicenseCheckoutResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientSiteLicenseCheckoutResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientSiteLicenseCheckoutResponse.eresult)
    pub eresult: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientSiteLicenseCheckoutResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientSiteLicenseCheckoutResponse {
    fn default() -> &'a CMsgClientSiteLicenseCheckoutResponse {
        <CMsgClientSiteLicenseCheckoutResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientSiteLicenseCheckoutResponse {
    pub fn new() -> CMsgClientSiteLicenseCheckoutResponse {
        ::std::default::Default::default()
    }

    // optional int32 eresult = 1;

    pub fn eresult(&self) -> i32 {
        self.eresult.unwrap_or(2i32)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CMsgClientSiteLicenseCheckoutResponse {
    const NAME: &'static str = "CMsgClientSiteLicenseCheckoutResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.eresult = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.eresult {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientSiteLicenseCheckoutResponse {
        CMsgClientSiteLicenseCheckoutResponse::new()
    }

    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientSiteLicenseCheckoutResponse {
        static instance: CMsgClientSiteLicenseCheckoutResponse = CMsgClientSiteLicenseCheckoutResponse {
            eresult: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientSiteLicenseGetAvailableSeats)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientSiteLicenseGetAvailableSeats {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientSiteLicenseGetAvailableSeats.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientSiteLicenseGetAvailableSeats.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientSiteLicenseGetAvailableSeats {
    fn default() -> &'a CMsgClientSiteLicenseGetAvailableSeats {
        <CMsgClientSiteLicenseGetAvailableSeats as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientSiteLicenseGetAvailableSeats {
    pub fn new() -> CMsgClientSiteLicenseGetAvailableSeats {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CMsgClientSiteLicenseGetAvailableSeats {
    const NAME: &'static str = "CMsgClientSiteLicenseGetAvailableSeats";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientSiteLicenseGetAvailableSeats {
        CMsgClientSiteLicenseGetAvailableSeats::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientSiteLicenseGetAvailableSeats {
        static instance: CMsgClientSiteLicenseGetAvailableSeats = CMsgClientSiteLicenseGetAvailableSeats {
            appid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientSiteLicenseGetAvailableSeatsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientSiteLicenseGetAvailableSeatsResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientSiteLicenseGetAvailableSeatsResponse.eresult)
    pub eresult: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgClientSiteLicenseGetAvailableSeatsResponse.seats)
    pub seats: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientSiteLicenseGetAvailableSeatsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientSiteLicenseGetAvailableSeatsResponse {
    fn default() -> &'a CMsgClientSiteLicenseGetAvailableSeatsResponse {
        <CMsgClientSiteLicenseGetAvailableSeatsResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientSiteLicenseGetAvailableSeatsResponse {
    pub fn new() -> CMsgClientSiteLicenseGetAvailableSeatsResponse {
        ::std::default::Default::default()
    }

    // optional int32 eresult = 1;

    pub fn eresult(&self) -> i32 {
        self.eresult.unwrap_or(2i32)
    }

    pub fn clear_eresult(&mut self) {
        self.eresult = ::std::option::Option::None;
    }

    pub fn has_eresult(&self) -> bool {
        self.eresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eresult(&mut self, v: i32) {
        self.eresult = ::std::option::Option::Some(v);
    }

    // optional uint32 seats = 2;

    pub fn seats(&self) -> u32 {
        self.seats.unwrap_or(0)
    }

    pub fn clear_seats(&mut self) {
        self.seats = ::std::option::Option::None;
    }

    pub fn has_seats(&self) -> bool {
        self.seats.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seats(&mut self, v: u32) {
        self.seats = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CMsgClientSiteLicenseGetAvailableSeatsResponse {
    const NAME: &'static str = "CMsgClientSiteLicenseGetAvailableSeatsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.eresult = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.seats = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.eresult {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.seats {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.eresult {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.seats {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientSiteLicenseGetAvailableSeatsResponse {
        CMsgClientSiteLicenseGetAvailableSeatsResponse::new()
    }

    fn clear(&mut self) {
        self.eresult = ::std::option::Option::None;
        self.seats = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientSiteLicenseGetAvailableSeatsResponse {
        static instance: CMsgClientSiteLicenseGetAvailableSeatsResponse = CMsgClientSiteLicenseGetAvailableSeatsResponse {
            eresult: ::std::option::Option::None,
            seats: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientSiteLicenseGetContentCacheInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientSiteLicenseGetContentCacheInfo {
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientSiteLicenseGetContentCacheInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientSiteLicenseGetContentCacheInfo {
    fn default() -> &'a CMsgClientSiteLicenseGetContentCacheInfo {
        <CMsgClientSiteLicenseGetContentCacheInfo as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientSiteLicenseGetContentCacheInfo {
    pub fn new() -> CMsgClientSiteLicenseGetContentCacheInfo {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CMsgClientSiteLicenseGetContentCacheInfo {
    const NAME: &'static str = "CMsgClientSiteLicenseGetContentCacheInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientSiteLicenseGetContentCacheInfo {
        CMsgClientSiteLicenseGetContentCacheInfo::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientSiteLicenseGetContentCacheInfo {
        static instance: CMsgClientSiteLicenseGetContentCacheInfo = CMsgClientSiteLicenseGetContentCacheInfo {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientSiteLicenseGetContentCacheInfoResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientSiteLicenseGetContentCacheInfoResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientSiteLicenseGetContentCacheInfoResponse.use_cache)
    pub use_cache: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgClientSiteLicenseGetContentCacheInfoResponse.ipv4_address)
    pub ipv4_address: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientSiteLicenseGetContentCacheInfoResponse.port_number)
    pub port_number: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientSiteLicenseGetContentCacheInfoResponse.p2p_group)
    pub p2p_group: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientSiteLicenseGetContentCacheInfoResponse.ip_address)
    pub ip_address: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientSiteLicenseGetContentCacheInfoResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientSiteLicenseGetContentCacheInfoResponse {
    fn default() -> &'a CMsgClientSiteLicenseGetContentCacheInfoResponse {
        <CMsgClientSiteLicenseGetContentCacheInfoResponse as ::protobuf::Message>::default_instance()
    }
}

impl CMsgClientSiteLicenseGetContentCacheInfoResponse {
    pub fn new() -> CMsgClientSiteLicenseGetContentCacheInfoResponse {
        ::std::default::Default::default()
    }

    // optional bool use_cache = 1;

    pub fn use_cache(&self) -> bool {
        self.use_cache.unwrap_or(false)
    }

    pub fn clear_use_cache(&mut self) {
        self.use_cache = ::std::option::Option::None;
    }

    pub fn has_use_cache(&self) -> bool {
        self.use_cache.is_some()
    }

    // Param is passed by value, moved
    pub fn set_use_cache(&mut self, v: bool) {
        self.use_cache = ::std::option::Option::Some(v);
    }

    // optional uint32 ipv4_address = 2;

    pub fn ipv4_address(&self) -> u32 {
        self.ipv4_address.unwrap_or(0)
    }

    pub fn clear_ipv4_address(&mut self) {
        self.ipv4_address = ::std::option::Option::None;
    }

    pub fn has_ipv4_address(&self) -> bool {
        self.ipv4_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ipv4_address(&mut self, v: u32) {
        self.ipv4_address = ::std::option::Option::Some(v);
    }

    // optional uint32 port_number = 3;

    pub fn port_number(&self) -> u32 {
        self.port_number.unwrap_or(0)
    }

    pub fn clear_port_number(&mut self) {
        self.port_number = ::std::option::Option::None;
    }

    pub fn has_port_number(&self) -> bool {
        self.port_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_port_number(&mut self, v: u32) {
        self.port_number = ::std::option::Option::Some(v);
    }

    // optional uint32 p2p_group = 4;

    pub fn p2p_group(&self) -> u32 {
        self.p2p_group.unwrap_or(0)
    }

    pub fn clear_p2p_group(&mut self) {
        self.p2p_group = ::std::option::Option::None;
    }

    pub fn has_p2p_group(&self) -> bool {
        self.p2p_group.is_some()
    }

    // Param is passed by value, moved
    pub fn set_p2p_group(&mut self, v: u32) {
        self.p2p_group = ::std::option::Option::Some(v);
    }

    // optional string ip_address = 5;

    pub fn ip_address(&self) -> &str {
        match self.ip_address.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_ip_address(&mut self) {
        self.ip_address = ::std::option::Option::None;
    }

    pub fn has_ip_address(&self) -> bool {
        self.ip_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ip_address(&mut self, v: ::std::string::String) {
        self.ip_address = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ip_address(&mut self) -> &mut ::std::string::String {
        if self.ip_address.is_none() {
            self.ip_address = ::std::option::Option::Some(::std::string::String::new());
        }
        self.ip_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_ip_address(&mut self) -> ::std::string::String {
        self.ip_address.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CMsgClientSiteLicenseGetContentCacheInfoResponse {
    const NAME: &'static str = "CMsgClientSiteLicenseGetContentCacheInfoResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.use_cache = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.ipv4_address = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.port_number = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.p2p_group = ::std::option::Option::Some(is.read_uint32()?);
                },
                42 => {
                    self.ip_address = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.use_cache {
            my_size += 1 + 1;
        }
        if let Some(v) = self.ipv4_address {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.port_number {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.p2p_group {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.ip_address.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.use_cache {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.ipv4_address {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.port_number {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.p2p_group {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.ip_address.as_ref() {
            os.write_string(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientSiteLicenseGetContentCacheInfoResponse {
        CMsgClientSiteLicenseGetContentCacheInfoResponse::new()
    }

    fn clear(&mut self) {
        self.use_cache = ::std::option::Option::None;
        self.ipv4_address = ::std::option::Option::None;
        self.port_number = ::std::option::Option::None;
        self.p2p_group = ::std::option::Option::None;
        self.ip_address = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientSiteLicenseGetContentCacheInfoResponse {
        static instance: CMsgClientSiteLicenseGetContentCacheInfoResponse = CMsgClientSiteLicenseGetContentCacheInfoResponse {
            use_cache: ::std::option::Option::None,
            ipv4_address: ::std::option::Option::None,
            port_number: ::std::option::Option::None,
            p2p_group: ::std::option::Option::None,
            ip_address: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}
#[allow(unused_imports)]
use crate::steammessages_base::*;
impl crate::RpcMessage for CMsgClientSiteInfo {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CMsgClientSiteLicenseCheckout {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessageWithKind for CMsgClientSiteLicenseCheckout {
    const KIND: crate::enums_clientserver::EMsg = crate::enums_clientserver::EMsg::k_EMsgClientSiteLicenseCheckout;
}
impl crate::RpcMessage for CMsgClientSiteLicenseCheckoutResponse {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessageWithKind for CMsgClientSiteLicenseCheckoutResponse {
    const KIND: crate::enums_clientserver::EMsg = crate::enums_clientserver::EMsg::k_EMsgClientSiteLicenseCheckoutResponse;
}
impl crate::RpcMessage for CMsgClientSiteLicenseGetAvailableSeats {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessageWithKind for CMsgClientSiteLicenseGetAvailableSeats {
    const KIND: crate::enums_clientserver::EMsg = crate::enums_clientserver::EMsg::k_EMsgClientSiteLicenseGetAvailableSeats;
}
impl crate::RpcMessage for CMsgClientSiteLicenseGetAvailableSeatsResponse {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessageWithKind for CMsgClientSiteLicenseGetAvailableSeatsResponse {
    const KIND: crate::enums_clientserver::EMsg = crate::enums_clientserver::EMsg::k_EMsgClientSiteLicenseGetAvailableSeatsResponse;
}
impl crate::RpcMessage for CMsgClientSiteLicenseGetContentCacheInfo {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessageWithKind for CMsgClientSiteLicenseGetContentCacheInfo {
    const KIND: crate::enums_clientserver::EMsg = crate::enums_clientserver::EMsg::k_EMsgClientSiteLicenseGetContentCacheInfo;
}
impl crate::RpcMessage for CMsgClientSiteLicenseGetContentCacheInfoResponse {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessageWithKind for CMsgClientSiteLicenseGetContentCacheInfoResponse {
    const KIND: crate::enums_clientserver::EMsg = crate::enums_clientserver::EMsg::k_EMsgClientSiteLicenseGetContentCacheInfoResponse;
}
