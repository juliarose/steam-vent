// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_partnerapps.steamclient.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

#[doc = "Request upload token for steampipe depot upload"]
// @@protoc_insertion_point(message:CPartnerApps_RequestUploadToken_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_RequestUploadToken_Request {
    // message fields
    // @@protoc_insertion_point(field:CPartnerApps_RequestUploadToken_Request.filename)
    pub filename: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPartnerApps_RequestUploadToken_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_RequestUploadToken_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_RequestUploadToken_Request {
    fn default() -> &'a CPartnerApps_RequestUploadToken_Request {
        <CPartnerApps_RequestUploadToken_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_RequestUploadToken_Request {
    pub fn new() -> CPartnerApps_RequestUploadToken_Request {
        ::std::default::Default::default()
    }

    // optional string filename = 1;

    pub fn filename(&self) -> &str {
        match self.filename.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_filename(&mut self) {
        self.filename = ::std::option::Option::None;
    }

    pub fn has_filename(&self) -> bool {
        self.filename.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filename(&mut self, v: ::std::string::String) {
        self.filename = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filename(&mut self) -> &mut ::std::string::String {
        if self.filename.is_none() {
            self.filename = ::std::option::Option::Some(::std::string::String::new());
        }
        self.filename.as_mut().unwrap()
    }

    // Take field
    pub fn take_filename(&mut self) -> ::std::string::String {
        self.filename.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CPartnerApps_RequestUploadToken_Request {
    const NAME: &'static str = "CPartnerApps_RequestUploadToken_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.filename = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.filename.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.filename.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_RequestUploadToken_Request {
        CPartnerApps_RequestUploadToken_Request::new()
    }

    fn clear(&mut self) {
        self.filename = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_RequestUploadToken_Request {
        static instance: CPartnerApps_RequestUploadToken_Request = CPartnerApps_RequestUploadToken_Request {
            filename: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CPartnerApps_RequestUploadToken_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_RequestUploadToken_Response {
    // message fields
    // @@protoc_insertion_point(field:CPartnerApps_RequestUploadToken_Response.upload_token)
    pub upload_token: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPartnerApps_RequestUploadToken_Response.location)
    pub location: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPartnerApps_RequestUploadToken_Response.routing_id)
    pub routing_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_RequestUploadToken_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_RequestUploadToken_Response {
    fn default() -> &'a CPartnerApps_RequestUploadToken_Response {
        <CPartnerApps_RequestUploadToken_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_RequestUploadToken_Response {
    pub fn new() -> CPartnerApps_RequestUploadToken_Response {
        ::std::default::Default::default()
    }

    // optional uint64 upload_token = 1;

    pub fn upload_token(&self) -> u64 {
        self.upload_token.unwrap_or(0)
    }

    pub fn clear_upload_token(&mut self) {
        self.upload_token = ::std::option::Option::None;
    }

    pub fn has_upload_token(&self) -> bool {
        self.upload_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upload_token(&mut self, v: u64) {
        self.upload_token = ::std::option::Option::Some(v);
    }

    // optional string location = 2;

    pub fn location(&self) -> &str {
        match self.location.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_location(&mut self) {
        self.location = ::std::option::Option::None;
    }

    pub fn has_location(&self) -> bool {
        self.location.is_some()
    }

    // Param is passed by value, moved
    pub fn set_location(&mut self, v: ::std::string::String) {
        self.location = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_location(&mut self) -> &mut ::std::string::String {
        if self.location.is_none() {
            self.location = ::std::option::Option::Some(::std::string::String::new());
        }
        self.location.as_mut().unwrap()
    }

    // Take field
    pub fn take_location(&mut self) -> ::std::string::String {
        self.location.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 routing_id = 3;

    pub fn routing_id(&self) -> u64 {
        self.routing_id.unwrap_or(0)
    }

    pub fn clear_routing_id(&mut self) {
        self.routing_id = ::std::option::Option::None;
    }

    pub fn has_routing_id(&self) -> bool {
        self.routing_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_routing_id(&mut self, v: u64) {
        self.routing_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CPartnerApps_RequestUploadToken_Response {
    const NAME: &'static str = "CPartnerApps_RequestUploadToken_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.upload_token = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.location = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.routing_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.upload_token {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.location.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.routing_id {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.upload_token {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.location.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.routing_id {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_RequestUploadToken_Response {
        CPartnerApps_RequestUploadToken_Response::new()
    }

    fn clear(&mut self) {
        self.upload_token = ::std::option::Option::None;
        self.location = ::std::option::Option::None;
        self.routing_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_RequestUploadToken_Response {
        static instance: CPartnerApps_RequestUploadToken_Response = CPartnerApps_RequestUploadToken_Response {
            upload_token: ::std::option::Option::None,
            location: ::std::option::Option::None,
            routing_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Commit method for custom executable file processing"]
// @@protoc_insertion_point(message:CPartnerApps_FinishUpload_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_FinishUpload_Request {
    // message fields
    // @@protoc_insertion_point(field:CPartnerApps_FinishUpload_Request.upload_token)
    pub upload_token: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPartnerApps_FinishUpload_Request.routing_id)
    pub routing_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPartnerApps_FinishUpload_Request.app_id)
    pub app_id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_FinishUpload_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_FinishUpload_Request {
    fn default() -> &'a CPartnerApps_FinishUpload_Request {
        <CPartnerApps_FinishUpload_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_FinishUpload_Request {
    pub fn new() -> CPartnerApps_FinishUpload_Request {
        ::std::default::Default::default()
    }

    // optional uint64 upload_token = 1;

    pub fn upload_token(&self) -> u64 {
        self.upload_token.unwrap_or(0)
    }

    pub fn clear_upload_token(&mut self) {
        self.upload_token = ::std::option::Option::None;
    }

    pub fn has_upload_token(&self) -> bool {
        self.upload_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upload_token(&mut self, v: u64) {
        self.upload_token = ::std::option::Option::Some(v);
    }

    // optional uint64 routing_id = 2;

    pub fn routing_id(&self) -> u64 {
        self.routing_id.unwrap_or(0)
    }

    pub fn clear_routing_id(&mut self) {
        self.routing_id = ::std::option::Option::None;
    }

    pub fn has_routing_id(&self) -> bool {
        self.routing_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_routing_id(&mut self, v: u64) {
        self.routing_id = ::std::option::Option::Some(v);
    }

    // optional uint32 app_id = 3;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CPartnerApps_FinishUpload_Request {
    const NAME: &'static str = "CPartnerApps_FinishUpload_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.upload_token = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.routing_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.upload_token {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.routing_id {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.upload_token {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.routing_id {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_FinishUpload_Request {
        CPartnerApps_FinishUpload_Request::new()
    }

    fn clear(&mut self) {
        self.upload_token = ::std::option::Option::None;
        self.routing_id = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_FinishUpload_Request {
        static instance: CPartnerApps_FinishUpload_Request = CPartnerApps_FinishUpload_Request {
            upload_token: ::std::option::Option::None,
            routing_id: ::std::option::Option::None,
            app_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CPartnerApps_FinishUploadKVSign_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_FinishUploadKVSign_Response {
    // message fields
    // @@protoc_insertion_point(field:CPartnerApps_FinishUploadKVSign_Response.signed_installscript)
    pub signed_installscript: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_FinishUploadKVSign_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_FinishUploadKVSign_Response {
    fn default() -> &'a CPartnerApps_FinishUploadKVSign_Response {
        <CPartnerApps_FinishUploadKVSign_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_FinishUploadKVSign_Response {
    pub fn new() -> CPartnerApps_FinishUploadKVSign_Response {
        ::std::default::Default::default()
    }

    // optional string signed_installscript = 1;

    pub fn signed_installscript(&self) -> &str {
        match self.signed_installscript.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_signed_installscript(&mut self) {
        self.signed_installscript = ::std::option::Option::None;
    }

    pub fn has_signed_installscript(&self) -> bool {
        self.signed_installscript.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signed_installscript(&mut self, v: ::std::string::String) {
        self.signed_installscript = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signed_installscript(&mut self) -> &mut ::std::string::String {
        if self.signed_installscript.is_none() {
            self.signed_installscript = ::std::option::Option::Some(::std::string::String::new());
        }
        self.signed_installscript.as_mut().unwrap()
    }

    // Take field
    pub fn take_signed_installscript(&mut self) -> ::std::string::String {
        self.signed_installscript.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CPartnerApps_FinishUploadKVSign_Response {
    const NAME: &'static str = "CPartnerApps_FinishUploadKVSign_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.signed_installscript = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.signed_installscript.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.signed_installscript.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_FinishUploadKVSign_Response {
        CPartnerApps_FinishUploadKVSign_Response::new()
    }

    fn clear(&mut self) {
        self.signed_installscript = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_FinishUploadKVSign_Response {
        static instance: CPartnerApps_FinishUploadKVSign_Response = CPartnerApps_FinishUploadKVSign_Response {
            signed_installscript: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Commit method for executable file processing"]
// @@protoc_insertion_point(message:CPartnerApps_FinishUploadLegacyDRM_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_FinishUploadLegacyDRM_Request {
    // message fields
    // @@protoc_insertion_point(field:CPartnerApps_FinishUploadLegacyDRM_Request.upload_token)
    pub upload_token: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPartnerApps_FinishUploadLegacyDRM_Request.routing_id)
    pub routing_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPartnerApps_FinishUploadLegacyDRM_Request.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPartnerApps_FinishUploadLegacyDRM_Request.flags)
    pub flags: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPartnerApps_FinishUploadLegacyDRM_Request.tool_name)
    pub tool_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPartnerApps_FinishUploadLegacyDRM_Request.use_cloud)
    pub use_cloud: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_FinishUploadLegacyDRM_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_FinishUploadLegacyDRM_Request {
    fn default() -> &'a CPartnerApps_FinishUploadLegacyDRM_Request {
        <CPartnerApps_FinishUploadLegacyDRM_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_FinishUploadLegacyDRM_Request {
    pub fn new() -> CPartnerApps_FinishUploadLegacyDRM_Request {
        ::std::default::Default::default()
    }

    // optional uint64 upload_token = 1;

    pub fn upload_token(&self) -> u64 {
        self.upload_token.unwrap_or(0)
    }

    pub fn clear_upload_token(&mut self) {
        self.upload_token = ::std::option::Option::None;
    }

    pub fn has_upload_token(&self) -> bool {
        self.upload_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upload_token(&mut self, v: u64) {
        self.upload_token = ::std::option::Option::Some(v);
    }

    // optional uint64 routing_id = 2;

    pub fn routing_id(&self) -> u64 {
        self.routing_id.unwrap_or(0)
    }

    pub fn clear_routing_id(&mut self) {
        self.routing_id = ::std::option::Option::None;
    }

    pub fn has_routing_id(&self) -> bool {
        self.routing_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_routing_id(&mut self, v: u64) {
        self.routing_id = ::std::option::Option::Some(v);
    }

    // optional uint32 app_id = 3;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional uint32 flags = 4;

    pub fn flags(&self) -> u32 {
        self.flags.unwrap_or(0)
    }

    pub fn clear_flags(&mut self) {
        self.flags = ::std::option::Option::None;
    }

    pub fn has_flags(&self) -> bool {
        self.flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_flags(&mut self, v: u32) {
        self.flags = ::std::option::Option::Some(v);
    }

    // optional string tool_name = 5;

    pub fn tool_name(&self) -> &str {
        match self.tool_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_tool_name(&mut self) {
        self.tool_name = ::std::option::Option::None;
    }

    pub fn has_tool_name(&self) -> bool {
        self.tool_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tool_name(&mut self, v: ::std::string::String) {
        self.tool_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tool_name(&mut self) -> &mut ::std::string::String {
        if self.tool_name.is_none() {
            self.tool_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.tool_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_tool_name(&mut self) -> ::std::string::String {
        self.tool_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool use_cloud = 6;

    pub fn use_cloud(&self) -> bool {
        self.use_cloud.unwrap_or(false)
    }

    pub fn clear_use_cloud(&mut self) {
        self.use_cloud = ::std::option::Option::None;
    }

    pub fn has_use_cloud(&self) -> bool {
        self.use_cloud.is_some()
    }

    // Param is passed by value, moved
    pub fn set_use_cloud(&mut self, v: bool) {
        self.use_cloud = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CPartnerApps_FinishUploadLegacyDRM_Request {
    const NAME: &'static str = "CPartnerApps_FinishUploadLegacyDRM_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.upload_token = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.routing_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                42 => {
                    self.tool_name = ::std::option::Option::Some(is.read_string()?);
                },
                48 => {
                    self.use_cloud = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.upload_token {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.routing_id {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.flags {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.tool_name.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.use_cloud {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.upload_token {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.routing_id {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.flags {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.tool_name.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.use_cloud {
            os.write_bool(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_FinishUploadLegacyDRM_Request {
        CPartnerApps_FinishUploadLegacyDRM_Request::new()
    }

    fn clear(&mut self) {
        self.upload_token = ::std::option::Option::None;
        self.routing_id = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.flags = ::std::option::Option::None;
        self.tool_name = ::std::option::Option::None;
        self.use_cloud = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_FinishUploadLegacyDRM_Request {
        static instance: CPartnerApps_FinishUploadLegacyDRM_Request = CPartnerApps_FinishUploadLegacyDRM_Request {
            upload_token: ::std::option::Option::None,
            routing_id: ::std::option::Option::None,
            app_id: ::std::option::Option::None,
            flags: ::std::option::Option::None,
            tool_name: ::std::option::Option::None,
            use_cloud: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CPartnerApps_FinishUploadLegacyDRM_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_FinishUploadLegacyDRM_Response {
    // message fields
    // @@protoc_insertion_point(field:CPartnerApps_FinishUploadLegacyDRM_Response.file_id)
    pub file_id: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_FinishUploadLegacyDRM_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_FinishUploadLegacyDRM_Response {
    fn default() -> &'a CPartnerApps_FinishUploadLegacyDRM_Response {
        <CPartnerApps_FinishUploadLegacyDRM_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_FinishUploadLegacyDRM_Response {
    pub fn new() -> CPartnerApps_FinishUploadLegacyDRM_Response {
        ::std::default::Default::default()
    }

    // optional string file_id = 1;

    pub fn file_id(&self) -> &str {
        match self.file_id.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_file_id(&mut self) {
        self.file_id = ::std::option::Option::None;
    }

    pub fn has_file_id(&self) -> bool {
        self.file_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_id(&mut self, v: ::std::string::String) {
        self.file_id = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_id(&mut self) -> &mut ::std::string::String {
        if self.file_id.is_none() {
            self.file_id = ::std::option::Option::Some(::std::string::String::new());
        }
        self.file_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_id(&mut self) -> ::std::string::String {
        self.file_id.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CPartnerApps_FinishUploadLegacyDRM_Response {
    const NAME: &'static str = "CPartnerApps_FinishUploadLegacyDRM_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.file_id = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.file_id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.file_id.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_FinishUploadLegacyDRM_Response {
        CPartnerApps_FinishUploadLegacyDRM_Response::new()
    }

    fn clear(&mut self) {
        self.file_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_FinishUploadLegacyDRM_Response {
        static instance: CPartnerApps_FinishUploadLegacyDRM_Response = CPartnerApps_FinishUploadLegacyDRM_Response {
            file_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CPartnerApps_FinishUpload_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_FinishUpload_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_FinishUpload_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_FinishUpload_Response {
    fn default() -> &'a CPartnerApps_FinishUpload_Response {
        <CPartnerApps_FinishUpload_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_FinishUpload_Response {
    pub fn new() -> CPartnerApps_FinishUpload_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CPartnerApps_FinishUpload_Response {
    const NAME: &'static str = "CPartnerApps_FinishUpload_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_FinishUpload_Response {
        CPartnerApps_FinishUpload_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_FinishUpload_Response {
        static instance: CPartnerApps_FinishUpload_Response = CPartnerApps_FinishUpload_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Commit method for custom executable file processing"]
// @@protoc_insertion_point(message:CPartnerApps_FinishUploadDepot_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_FinishUploadDepot_Request {
    // message fields
    // @@protoc_insertion_point(field:CPartnerApps_FinishUploadDepot_Request.upload_token)
    pub upload_token: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPartnerApps_FinishUploadDepot_Request.routing_id)
    pub routing_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPartnerApps_FinishUploadDepot_Request.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPartnerApps_FinishUploadDepot_Request.depot_id)
    pub depot_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPartnerApps_FinishUploadDepot_Request.build_flags)
    pub build_flags: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_FinishUploadDepot_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_FinishUploadDepot_Request {
    fn default() -> &'a CPartnerApps_FinishUploadDepot_Request {
        <CPartnerApps_FinishUploadDepot_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_FinishUploadDepot_Request {
    pub fn new() -> CPartnerApps_FinishUploadDepot_Request {
        ::std::default::Default::default()
    }

    // optional uint64 upload_token = 1;

    pub fn upload_token(&self) -> u64 {
        self.upload_token.unwrap_or(0)
    }

    pub fn clear_upload_token(&mut self) {
        self.upload_token = ::std::option::Option::None;
    }

    pub fn has_upload_token(&self) -> bool {
        self.upload_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upload_token(&mut self, v: u64) {
        self.upload_token = ::std::option::Option::Some(v);
    }

    // optional uint64 routing_id = 2;

    pub fn routing_id(&self) -> u64 {
        self.routing_id.unwrap_or(0)
    }

    pub fn clear_routing_id(&mut self) {
        self.routing_id = ::std::option::Option::None;
    }

    pub fn has_routing_id(&self) -> bool {
        self.routing_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_routing_id(&mut self, v: u64) {
        self.routing_id = ::std::option::Option::Some(v);
    }

    // optional uint32 app_id = 3;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional uint32 depot_id = 4;

    pub fn depot_id(&self) -> u32 {
        self.depot_id.unwrap_or(0)
    }

    pub fn clear_depot_id(&mut self) {
        self.depot_id = ::std::option::Option::None;
    }

    pub fn has_depot_id(&self) -> bool {
        self.depot_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_depot_id(&mut self, v: u32) {
        self.depot_id = ::std::option::Option::Some(v);
    }

    // optional uint32 build_flags = 5;

    pub fn build_flags(&self) -> u32 {
        self.build_flags.unwrap_or(0)
    }

    pub fn clear_build_flags(&mut self) {
        self.build_flags = ::std::option::Option::None;
    }

    pub fn has_build_flags(&self) -> bool {
        self.build_flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_build_flags(&mut self, v: u32) {
        self.build_flags = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CPartnerApps_FinishUploadDepot_Request {
    const NAME: &'static str = "CPartnerApps_FinishUploadDepot_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.upload_token = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.routing_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.depot_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.build_flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.upload_token {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.routing_id {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.depot_id {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.build_flags {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.upload_token {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.routing_id {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.depot_id {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.build_flags {
            os.write_uint32(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_FinishUploadDepot_Request {
        CPartnerApps_FinishUploadDepot_Request::new()
    }

    fn clear(&mut self) {
        self.upload_token = ::std::option::Option::None;
        self.routing_id = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.depot_id = ::std::option::Option::None;
        self.build_flags = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_FinishUploadDepot_Request {
        static instance: CPartnerApps_FinishUploadDepot_Request = CPartnerApps_FinishUploadDepot_Request {
            upload_token: ::std::option::Option::None,
            routing_id: ::std::option::Option::None,
            app_id: ::std::option::Option::None,
            depot_id: ::std::option::Option::None,
            build_flags: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CPartnerApps_FinishUploadDepot_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_FinishUploadDepot_Response {
    // message fields
    // @@protoc_insertion_point(field:CPartnerApps_FinishUploadDepot_Response.build_routing_id)
    pub build_routing_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_FinishUploadDepot_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_FinishUploadDepot_Response {
    fn default() -> &'a CPartnerApps_FinishUploadDepot_Response {
        <CPartnerApps_FinishUploadDepot_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_FinishUploadDepot_Response {
    pub fn new() -> CPartnerApps_FinishUploadDepot_Response {
        ::std::default::Default::default()
    }

    // optional uint64 build_routing_id = 1;

    pub fn build_routing_id(&self) -> u64 {
        self.build_routing_id.unwrap_or(0)
    }

    pub fn clear_build_routing_id(&mut self) {
        self.build_routing_id = ::std::option::Option::None;
    }

    pub fn has_build_routing_id(&self) -> bool {
        self.build_routing_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_build_routing_id(&mut self, v: u64) {
        self.build_routing_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CPartnerApps_FinishUploadDepot_Response {
    const NAME: &'static str = "CPartnerApps_FinishUploadDepot_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.build_routing_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.build_routing_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.build_routing_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_FinishUploadDepot_Response {
        CPartnerApps_FinishUploadDepot_Response::new()
    }

    fn clear(&mut self) {
        self.build_routing_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_FinishUploadDepot_Response {
        static instance: CPartnerApps_FinishUploadDepot_Response = CPartnerApps_FinishUploadDepot_Response {
            build_routing_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Get build status for previously uploaded depot ZIP"]
// @@protoc_insertion_point(message:CPartnerApps_GetDepotBuildResult_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_GetDepotBuildResult_Request {
    // message fields
    // @@protoc_insertion_point(field:CPartnerApps_GetDepotBuildResult_Request.upload_token)
    pub upload_token: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPartnerApps_GetDepotBuildResult_Request.routing_id)
    pub routing_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_GetDepotBuildResult_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_GetDepotBuildResult_Request {
    fn default() -> &'a CPartnerApps_GetDepotBuildResult_Request {
        <CPartnerApps_GetDepotBuildResult_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_GetDepotBuildResult_Request {
    pub fn new() -> CPartnerApps_GetDepotBuildResult_Request {
        ::std::default::Default::default()
    }

    // optional uint64 upload_token = 1;

    pub fn upload_token(&self) -> u64 {
        self.upload_token.unwrap_or(0)
    }

    pub fn clear_upload_token(&mut self) {
        self.upload_token = ::std::option::Option::None;
    }

    pub fn has_upload_token(&self) -> bool {
        self.upload_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upload_token(&mut self, v: u64) {
        self.upload_token = ::std::option::Option::Some(v);
    }

    // optional uint64 routing_id = 2;

    pub fn routing_id(&self) -> u64 {
        self.routing_id.unwrap_or(0)
    }

    pub fn clear_routing_id(&mut self) {
        self.routing_id = ::std::option::Option::None;
    }

    pub fn has_routing_id(&self) -> bool {
        self.routing_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_routing_id(&mut self, v: u64) {
        self.routing_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CPartnerApps_GetDepotBuildResult_Request {
    const NAME: &'static str = "CPartnerApps_GetDepotBuildResult_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.upload_token = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.routing_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.upload_token {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.routing_id {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.upload_token {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.routing_id {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_GetDepotBuildResult_Request {
        CPartnerApps_GetDepotBuildResult_Request::new()
    }

    fn clear(&mut self) {
        self.upload_token = ::std::option::Option::None;
        self.routing_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_GetDepotBuildResult_Request {
        static instance: CPartnerApps_GetDepotBuildResult_Request = CPartnerApps_GetDepotBuildResult_Request {
            upload_token: ::std::option::Option::None,
            routing_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CPartnerApps_GetDepotBuildResult_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_GetDepotBuildResult_Response {
    // message fields
    // @@protoc_insertion_point(field:CPartnerApps_GetDepotBuildResult_Response.manifest_id)
    pub manifest_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPartnerApps_GetDepotBuildResult_Response.error_msg)
    pub error_msg: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_GetDepotBuildResult_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_GetDepotBuildResult_Response {
    fn default() -> &'a CPartnerApps_GetDepotBuildResult_Response {
        <CPartnerApps_GetDepotBuildResult_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_GetDepotBuildResult_Response {
    pub fn new() -> CPartnerApps_GetDepotBuildResult_Response {
        ::std::default::Default::default()
    }

    // optional uint64 manifest_id = 1;

    pub fn manifest_id(&self) -> u64 {
        self.manifest_id.unwrap_or(0)
    }

    pub fn clear_manifest_id(&mut self) {
        self.manifest_id = ::std::option::Option::None;
    }

    pub fn has_manifest_id(&self) -> bool {
        self.manifest_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_manifest_id(&mut self, v: u64) {
        self.manifest_id = ::std::option::Option::Some(v);
    }

    // optional string error_msg = 2;

    pub fn error_msg(&self) -> &str {
        match self.error_msg.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_error_msg(&mut self) {
        self.error_msg = ::std::option::Option::None;
    }

    pub fn has_error_msg(&self) -> bool {
        self.error_msg.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error_msg(&mut self, v: ::std::string::String) {
        self.error_msg = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error_msg(&mut self) -> &mut ::std::string::String {
        if self.error_msg.is_none() {
            self.error_msg = ::std::option::Option::Some(::std::string::String::new());
        }
        self.error_msg.as_mut().unwrap()
    }

    // Take field
    pub fn take_error_msg(&mut self) -> ::std::string::String {
        self.error_msg.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CPartnerApps_GetDepotBuildResult_Response {
    const NAME: &'static str = "CPartnerApps_GetDepotBuildResult_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.manifest_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.error_msg = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.manifest_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.error_msg.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.manifest_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.error_msg.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_GetDepotBuildResult_Response {
        CPartnerApps_GetDepotBuildResult_Response::new()
    }

    fn clear(&mut self) {
        self.manifest_id = ::std::option::Option::None;
        self.error_msg = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_GetDepotBuildResult_Response {
        static instance: CPartnerApps_GetDepotBuildResult_Response = CPartnerApps_GetDepotBuildResult_Response {
            manifest_id: ::std::option::Option::None,
            error_msg: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "Finds N most recent prior uploads by appid"]
// @@protoc_insertion_point(message:CPartnerApps_FindDRMUploads_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_FindDRMUploads_Request {
    // message fields
    // @@protoc_insertion_point(field:CPartnerApps_FindDRMUploads_Request.app_id)
    pub app_id: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_FindDRMUploads_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_FindDRMUploads_Request {
    fn default() -> &'a CPartnerApps_FindDRMUploads_Request {
        <CPartnerApps_FindDRMUploads_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_FindDRMUploads_Request {
    pub fn new() -> CPartnerApps_FindDRMUploads_Request {
        ::std::default::Default::default()
    }

    // optional int32 app_id = 1;

    pub fn app_id(&self) -> i32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: i32) {
        self.app_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CPartnerApps_FindDRMUploads_Request {
    const NAME: &'static str = "CPartnerApps_FindDRMUploads_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.app_id = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.app_id {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_FindDRMUploads_Request {
        CPartnerApps_FindDRMUploads_Request::new()
    }

    fn clear(&mut self) {
        self.app_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_FindDRMUploads_Request {
        static instance: CPartnerApps_FindDRMUploads_Request = CPartnerApps_FindDRMUploads_Request {
            app_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CPartnerApps_ExistingDRMUpload)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_ExistingDRMUpload {
    // message fields
    // @@protoc_insertion_point(field:CPartnerApps_ExistingDRMUpload.file_id)
    pub file_id: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPartnerApps_ExistingDRMUpload.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPartnerApps_ExistingDRMUpload.actor_id)
    pub actor_id: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CPartnerApps_ExistingDRMUpload.supplied_name)
    pub supplied_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPartnerApps_ExistingDRMUpload.flags)
    pub flags: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPartnerApps_ExistingDRMUpload.mod_type)
    pub mod_type: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPartnerApps_ExistingDRMUpload.timestamp)
    pub timestamp: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPartnerApps_ExistingDRMUpload.orig_file_id)
    pub orig_file_id: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_ExistingDRMUpload.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_ExistingDRMUpload {
    fn default() -> &'a CPartnerApps_ExistingDRMUpload {
        <CPartnerApps_ExistingDRMUpload as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_ExistingDRMUpload {
    pub fn new() -> CPartnerApps_ExistingDRMUpload {
        ::std::default::Default::default()
    }

    // optional string file_id = 1;

    pub fn file_id(&self) -> &str {
        match self.file_id.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_file_id(&mut self) {
        self.file_id = ::std::option::Option::None;
    }

    pub fn has_file_id(&self) -> bool {
        self.file_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_id(&mut self, v: ::std::string::String) {
        self.file_id = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_id(&mut self) -> &mut ::std::string::String {
        if self.file_id.is_none() {
            self.file_id = ::std::option::Option::Some(::std::string::String::new());
        }
        self.file_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_id(&mut self) -> ::std::string::String {
        self.file_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 app_id = 2;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional int32 actor_id = 3;

    pub fn actor_id(&self) -> i32 {
        self.actor_id.unwrap_or(0)
    }

    pub fn clear_actor_id(&mut self) {
        self.actor_id = ::std::option::Option::None;
    }

    pub fn has_actor_id(&self) -> bool {
        self.actor_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_actor_id(&mut self, v: i32) {
        self.actor_id = ::std::option::Option::Some(v);
    }

    // optional string supplied_name = 5;

    pub fn supplied_name(&self) -> &str {
        match self.supplied_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_supplied_name(&mut self) {
        self.supplied_name = ::std::option::Option::None;
    }

    pub fn has_supplied_name(&self) -> bool {
        self.supplied_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_supplied_name(&mut self, v: ::std::string::String) {
        self.supplied_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_supplied_name(&mut self) -> &mut ::std::string::String {
        if self.supplied_name.is_none() {
            self.supplied_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.supplied_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_supplied_name(&mut self) -> ::std::string::String {
        self.supplied_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 flags = 6;

    pub fn flags(&self) -> u32 {
        self.flags.unwrap_or(0)
    }

    pub fn clear_flags(&mut self) {
        self.flags = ::std::option::Option::None;
    }

    pub fn has_flags(&self) -> bool {
        self.flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_flags(&mut self, v: u32) {
        self.flags = ::std::option::Option::Some(v);
    }

    // optional string mod_type = 7;

    pub fn mod_type(&self) -> &str {
        match self.mod_type.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_mod_type(&mut self) {
        self.mod_type = ::std::option::Option::None;
    }

    pub fn has_mod_type(&self) -> bool {
        self.mod_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mod_type(&mut self, v: ::std::string::String) {
        self.mod_type = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mod_type(&mut self) -> &mut ::std::string::String {
        if self.mod_type.is_none() {
            self.mod_type = ::std::option::Option::Some(::std::string::String::new());
        }
        self.mod_type.as_mut().unwrap()
    }

    // Take field
    pub fn take_mod_type(&mut self) -> ::std::string::String {
        self.mod_type.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed32 timestamp = 8;

    pub fn timestamp(&self) -> u32 {
        self.timestamp.unwrap_or(0)
    }

    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u32) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    // optional string orig_file_id = 9;

    pub fn orig_file_id(&self) -> &str {
        match self.orig_file_id.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_orig_file_id(&mut self) {
        self.orig_file_id = ::std::option::Option::None;
    }

    pub fn has_orig_file_id(&self) -> bool {
        self.orig_file_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_orig_file_id(&mut self, v: ::std::string::String) {
        self.orig_file_id = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_orig_file_id(&mut self) -> &mut ::std::string::String {
        if self.orig_file_id.is_none() {
            self.orig_file_id = ::std::option::Option::Some(::std::string::String::new());
        }
        self.orig_file_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_orig_file_id(&mut self) -> ::std::string::String {
        self.orig_file_id.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CPartnerApps_ExistingDRMUpload {
    const NAME: &'static str = "CPartnerApps_ExistingDRMUpload";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.file_id = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.actor_id = ::std::option::Option::Some(is.read_int32()?);
                },
                42 => {
                    self.supplied_name = ::std::option::Option::Some(is.read_string()?);
                },
                48 => {
                    self.flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    self.mod_type = ::std::option::Option::Some(is.read_string()?);
                },
                69 => {
                    self.timestamp = ::std::option::Option::Some(is.read_fixed32()?);
                },
                74 => {
                    self.orig_file_id = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.file_id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.actor_id {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        if let Some(v) = self.supplied_name.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.flags {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.mod_type.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.timestamp {
            my_size += 1 + 4;
        }
        if let Some(v) = self.orig_file_id.as_ref() {
            my_size += ::protobuf::rt::string_size(9, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.file_id.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.actor_id {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.supplied_name.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.flags {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.mod_type.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.timestamp {
            os.write_fixed32(8, v)?;
        }
        if let Some(v) = self.orig_file_id.as_ref() {
            os.write_string(9, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_ExistingDRMUpload {
        CPartnerApps_ExistingDRMUpload::new()
    }

    fn clear(&mut self) {
        self.file_id = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.actor_id = ::std::option::Option::None;
        self.supplied_name = ::std::option::Option::None;
        self.flags = ::std::option::Option::None;
        self.mod_type = ::std::option::Option::None;
        self.timestamp = ::std::option::Option::None;
        self.orig_file_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_ExistingDRMUpload {
        static instance: CPartnerApps_ExistingDRMUpload = CPartnerApps_ExistingDRMUpload {
            file_id: ::std::option::Option::None,
            app_id: ::std::option::Option::None,
            actor_id: ::std::option::Option::None,
            supplied_name: ::std::option::Option::None,
            flags: ::std::option::Option::None,
            mod_type: ::std::option::Option::None,
            timestamp: ::std::option::Option::None,
            orig_file_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CPartnerApps_FindDRMUploads_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_FindDRMUploads_Response {
    // message fields
    // @@protoc_insertion_point(field:CPartnerApps_FindDRMUploads_Response.uploads)
    pub uploads: ::std::vec::Vec<CPartnerApps_ExistingDRMUpload>,
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_FindDRMUploads_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_FindDRMUploads_Response {
    fn default() -> &'a CPartnerApps_FindDRMUploads_Response {
        <CPartnerApps_FindDRMUploads_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_FindDRMUploads_Response {
    pub fn new() -> CPartnerApps_FindDRMUploads_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CPartnerApps_FindDRMUploads_Response {
    const NAME: &'static str = "CPartnerApps_FindDRMUploads_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.uploads.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.uploads {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.uploads {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_FindDRMUploads_Response {
        CPartnerApps_FindDRMUploads_Response::new()
    }

    fn clear(&mut self) {
        self.uploads.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_FindDRMUploads_Response {
        static instance: CPartnerApps_FindDRMUploads_Response = CPartnerApps_FindDRMUploads_Response {
            uploads: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CPartnerApps_Download_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_Download_Request {
    // message fields
    // @@protoc_insertion_point(field:CPartnerApps_Download_Request.file_id)
    pub file_id: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPartnerApps_Download_Request.app_id)
    pub app_id: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_Download_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_Download_Request {
    fn default() -> &'a CPartnerApps_Download_Request {
        <CPartnerApps_Download_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_Download_Request {
    pub fn new() -> CPartnerApps_Download_Request {
        ::std::default::Default::default()
    }

    // optional string file_id = 1;

    pub fn file_id(&self) -> &str {
        match self.file_id.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_file_id(&mut self) {
        self.file_id = ::std::option::Option::None;
    }

    pub fn has_file_id(&self) -> bool {
        self.file_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_id(&mut self, v: ::std::string::String) {
        self.file_id = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_id(&mut self) -> &mut ::std::string::String {
        if self.file_id.is_none() {
            self.file_id = ::std::option::Option::Some(::std::string::String::new());
        }
        self.file_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_id(&mut self) -> ::std::string::String {
        self.file_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 app_id = 2;

    pub fn app_id(&self) -> i32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: i32) {
        self.app_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CPartnerApps_Download_Request {
    const NAME: &'static str = "CPartnerApps_Download_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.file_id = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.app_id = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.file_id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.file_id.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_int32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_Download_Request {
        CPartnerApps_Download_Request::new()
    }

    fn clear(&mut self) {
        self.file_id = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_Download_Request {
        static instance: CPartnerApps_Download_Request = CPartnerApps_Download_Request {
            file_id: ::std::option::Option::None,
            app_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CPartnerApps_Download_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPartnerApps_Download_Response {
    // message fields
    // @@protoc_insertion_point(field:CPartnerApps_Download_Response.download_url)
    pub download_url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPartnerApps_Download_Response.app_id)
    pub app_id: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPartnerApps_Download_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPartnerApps_Download_Response {
    fn default() -> &'a CPartnerApps_Download_Response {
        <CPartnerApps_Download_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPartnerApps_Download_Response {
    pub fn new() -> CPartnerApps_Download_Response {
        ::std::default::Default::default()
    }

    // optional string download_url = 1;

    pub fn download_url(&self) -> &str {
        match self.download_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_download_url(&mut self) {
        self.download_url = ::std::option::Option::None;
    }

    pub fn has_download_url(&self) -> bool {
        self.download_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_download_url(&mut self, v: ::std::string::String) {
        self.download_url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_download_url(&mut self) -> &mut ::std::string::String {
        if self.download_url.is_none() {
            self.download_url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.download_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_download_url(&mut self) -> ::std::string::String {
        self.download_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 app_id = 2;

    pub fn app_id(&self) -> i32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: i32) {
        self.app_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CPartnerApps_Download_Response {
    const NAME: &'static str = "CPartnerApps_Download_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.download_url = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.app_id = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.download_url.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.app_id {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.download_url.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_int32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPartnerApps_Download_Response {
        CPartnerApps_Download_Response::new()
    }

    fn clear(&mut self) {
        self.download_url = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPartnerApps_Download_Response {
        static instance: CPartnerApps_Download_Response = CPartnerApps_Download_Response {
            download_url: ::std::option::Option::None,
            app_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}
#[allow(unused_imports)]
use crate::steammessages_base::*;
#[allow(unused_imports)]
use crate::steammessages_unified_base_steamclient::*;
impl crate::RpcMessage for CPartnerApps_RequestUploadToken_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CPartnerApps_RequestUploadToken_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CPartnerApps_FinishUpload_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CPartnerApps_FinishUploadKVSign_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CPartnerApps_FinishUploadLegacyDRM_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CPartnerApps_FinishUploadLegacyDRM_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CPartnerApps_FinishUpload_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CPartnerApps_FinishUploadDepot_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CPartnerApps_FinishUploadDepot_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CPartnerApps_GetDepotBuildResult_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CPartnerApps_GetDepotBuildResult_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CPartnerApps_FindDRMUploads_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CPartnerApps_ExistingDRMUpload {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CPartnerApps_FindDRMUploads_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CPartnerApps_Download_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CPartnerApps_Download_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
///Service methods for app management by partners
struct PartnerApps {}
impl crate::RpcService for PartnerApps {
    const SERVICE_NAME: &'static str = "PartnerApps";
}
impl crate::RpcMethod for CPartnerApps_Download_Request {
    const METHOD_NAME: &'static str = "PartnerApps.Download#1";
    type Response = CPartnerApps_Download_Response;
}
impl crate::RpcMethod for CPartnerApps_FindDRMUploads_Request {
    const METHOD_NAME: &'static str = "PartnerApps.FindDRMUploads#1";
    type Response = CPartnerApps_FindDRMUploads_Response;
}
impl crate::RpcMethod for CPartnerApps_FinishUploadDepot_Request {
    const METHOD_NAME: &'static str = "PartnerApps.FinishUploadDepotUpload#1";
    type Response = CPartnerApps_FinishUploadDepot_Response;
}
impl crate::RpcMethod for CPartnerApps_FinishUploadLegacyDRM_Request {
    const METHOD_NAME: &'static str = "PartnerApps.FinishUploadDRMUpload#1";
    type Response = CPartnerApps_FinishUploadLegacyDRM_Response;
}
impl crate::RpcMethod for CPartnerApps_FinishUpload_Request {
    const METHOD_NAME: &'static str = "PartnerApps.FinishUploadKVSign#1";
    type Response = CPartnerApps_FinishUploadKVSign_Response;
}
impl crate::RpcMethod for CPartnerApps_GetDepotBuildResult_Request {
    const METHOD_NAME: &'static str = "PartnerApps.GetDepotBuildResult#1";
    type Response = CPartnerApps_GetDepotBuildResult_Response;
}
impl crate::RpcMethod for CPartnerApps_RequestUploadToken_Request {
    const METHOD_NAME: &'static str = "PartnerApps.RequestKVSignUploadToken#1";
    type Response = CPartnerApps_RequestUploadToken_Response;
}
