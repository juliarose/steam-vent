// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_star.steamclient.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:CSTAR_KeyValueQuery)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSTAR_KeyValueQuery {
    // message fields
    // @@protoc_insertion_point(field:CSTAR_KeyValueQuery.key)
    pub key: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CSTAR_KeyValueQuery.value)
    pub value: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CSTAR_KeyValueQuery.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSTAR_KeyValueQuery {
    fn default() -> &'a CSTAR_KeyValueQuery {
        <CSTAR_KeyValueQuery as ::protobuf::Message>::default_instance()
    }
}

impl CSTAR_KeyValueQuery {
    pub fn new() -> CSTAR_KeyValueQuery {
        ::std::default::Default::default()
    }

    // optional string key = 1;

    pub fn key(&self) -> &str {
        match self.key.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_key(&mut self) {
        self.key = ::std::option::Option::None;
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        if self.key.is_none() {
            self.key = ::std::option::Option::Some(::std::string::String::new());
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        self.key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string value = 2;

    pub fn value(&self) -> &str {
        match self.value.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        if self.value.is_none() {
            self.value = ::std::option::Option::Some(::std::string::String::new());
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        self.value.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CSTAR_KeyValueQuery {
    const NAME: &'static str = "CSTAR_KeyValueQuery";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.value = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.key.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.value.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.key.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.value.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSTAR_KeyValueQuery {
        CSTAR_KeyValueQuery::new()
    }

    fn clear(&mut self) {
        self.key = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSTAR_KeyValueQuery {
        static instance: CSTAR_KeyValueQuery = CSTAR_KeyValueQuery {
            key: ::std::option::Option::None,
            value: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CSTAR_GlyphQueryParams)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSTAR_GlyphQueryParams {
    // message fields
    // @@protoc_insertion_point(field:CSTAR_GlyphQueryParams.bundle_id)
    pub bundle_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSTAR_GlyphQueryParams.queries)
    pub queries: ::std::vec::Vec<CSTAR_KeyValueQuery>,
    // special fields
    // @@protoc_insertion_point(special_field:CSTAR_GlyphQueryParams.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSTAR_GlyphQueryParams {
    fn default() -> &'a CSTAR_GlyphQueryParams {
        <CSTAR_GlyphQueryParams as ::protobuf::Message>::default_instance()
    }
}

impl CSTAR_GlyphQueryParams {
    pub fn new() -> CSTAR_GlyphQueryParams {
        ::std::default::Default::default()
    }

    // optional uint64 bundle_id = 1;

    pub fn bundle_id(&self) -> u64 {
        self.bundle_id.unwrap_or(0)
    }

    pub fn clear_bundle_id(&mut self) {
        self.bundle_id = ::std::option::Option::None;
    }

    pub fn has_bundle_id(&self) -> bool {
        self.bundle_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bundle_id(&mut self, v: u64) {
        self.bundle_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CSTAR_GlyphQueryParams {
    const NAME: &'static str = "CSTAR_GlyphQueryParams";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.bundle_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.queries.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.bundle_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        for value in &self.queries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.bundle_id {
            os.write_uint64(1, v)?;
        }
        for v in &self.queries {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSTAR_GlyphQueryParams {
        CSTAR_GlyphQueryParams::new()
    }

    fn clear(&mut self) {
        self.bundle_id = ::std::option::Option::None;
        self.queries.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSTAR_GlyphQueryParams {
        static instance: CSTAR_GlyphQueryParams = CSTAR_GlyphQueryParams {
            bundle_id: ::std::option::Option::None,
            queries: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CSTAR_ReadGlyphData_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSTAR_ReadGlyphData_Request {
    // message fields
    // @@protoc_insertion_point(field:CSTAR_ReadGlyphData_Request.query_params)
    pub query_params: ::protobuf::MessageField<CSTAR_GlyphQueryParams>,
    // @@protoc_insertion_point(field:CSTAR_ReadGlyphData_Request.last_modified_time_lower_limit)
    pub last_modified_time_lower_limit: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CSTAR_ReadGlyphData_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSTAR_ReadGlyphData_Request {
    fn default() -> &'a CSTAR_ReadGlyphData_Request {
        <CSTAR_ReadGlyphData_Request as ::protobuf::Message>::default_instance()
    }
}

impl CSTAR_ReadGlyphData_Request {
    pub fn new() -> CSTAR_ReadGlyphData_Request {
        ::std::default::Default::default()
    }

    // optional string last_modified_time_lower_limit = 2;

    pub fn last_modified_time_lower_limit(&self) -> &str {
        match self.last_modified_time_lower_limit.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_last_modified_time_lower_limit(&mut self) {
        self.last_modified_time_lower_limit = ::std::option::Option::None;
    }

    pub fn has_last_modified_time_lower_limit(&self) -> bool {
        self.last_modified_time_lower_limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_modified_time_lower_limit(&mut self, v: ::std::string::String) {
        self.last_modified_time_lower_limit = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_modified_time_lower_limit(&mut self) -> &mut ::std::string::String {
        if self.last_modified_time_lower_limit.is_none() {
            self.last_modified_time_lower_limit = ::std::option::Option::Some(::std::string::String::new());
        }
        self.last_modified_time_lower_limit.as_mut().unwrap()
    }

    // Take field
    pub fn take_last_modified_time_lower_limit(&mut self) -> ::std::string::String {
        self.last_modified_time_lower_limit.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CSTAR_ReadGlyphData_Request {
    const NAME: &'static str = "CSTAR_ReadGlyphData_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.query_params)?;
                },
                18 => {
                    self.last_modified_time_lower_limit = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.query_params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.last_modified_time_lower_limit.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.query_params.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.last_modified_time_lower_limit.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSTAR_ReadGlyphData_Request {
        CSTAR_ReadGlyphData_Request::new()
    }

    fn clear(&mut self) {
        self.query_params.clear();
        self.last_modified_time_lower_limit = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSTAR_ReadGlyphData_Request {
        static instance: CSTAR_ReadGlyphData_Request = CSTAR_ReadGlyphData_Request {
            query_params: ::protobuf::MessageField::none(),
            last_modified_time_lower_limit: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CSTAR_GlyphData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSTAR_GlyphData {
    // message fields
    // @@protoc_insertion_point(field:CSTAR_GlyphData.glyph_guid)
    pub glyph_guid: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:CSTAR_GlyphData.glyph_last_modified)
    pub glyph_last_modified: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CSTAR_GlyphData.glyph_json_data)
    pub glyph_json_data: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CSTAR_GlyphData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSTAR_GlyphData {
    fn default() -> &'a CSTAR_GlyphData {
        <CSTAR_GlyphData as ::protobuf::Message>::default_instance()
    }
}

impl CSTAR_GlyphData {
    pub fn new() -> CSTAR_GlyphData {
        ::std::default::Default::default()
    }

    // optional bytes glyph_guid = 1;

    pub fn glyph_guid(&self) -> &[u8] {
        match self.glyph_guid.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_glyph_guid(&mut self) {
        self.glyph_guid = ::std::option::Option::None;
    }

    pub fn has_glyph_guid(&self) -> bool {
        self.glyph_guid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_glyph_guid(&mut self, v: ::std::vec::Vec<u8>) {
        self.glyph_guid = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_glyph_guid(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.glyph_guid.is_none() {
            self.glyph_guid = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.glyph_guid.as_mut().unwrap()
    }

    // Take field
    pub fn take_glyph_guid(&mut self) -> ::std::vec::Vec<u8> {
        self.glyph_guid.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string glyph_last_modified = 2;

    pub fn glyph_last_modified(&self) -> &str {
        match self.glyph_last_modified.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_glyph_last_modified(&mut self) {
        self.glyph_last_modified = ::std::option::Option::None;
    }

    pub fn has_glyph_last_modified(&self) -> bool {
        self.glyph_last_modified.is_some()
    }

    // Param is passed by value, moved
    pub fn set_glyph_last_modified(&mut self, v: ::std::string::String) {
        self.glyph_last_modified = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_glyph_last_modified(&mut self) -> &mut ::std::string::String {
        if self.glyph_last_modified.is_none() {
            self.glyph_last_modified = ::std::option::Option::Some(::std::string::String::new());
        }
        self.glyph_last_modified.as_mut().unwrap()
    }

    // Take field
    pub fn take_glyph_last_modified(&mut self) -> ::std::string::String {
        self.glyph_last_modified.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string glyph_json_data = 3;

    pub fn glyph_json_data(&self) -> &str {
        match self.glyph_json_data.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_glyph_json_data(&mut self) {
        self.glyph_json_data = ::std::option::Option::None;
    }

    pub fn has_glyph_json_data(&self) -> bool {
        self.glyph_json_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_glyph_json_data(&mut self, v: ::std::string::String) {
        self.glyph_json_data = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_glyph_json_data(&mut self) -> &mut ::std::string::String {
        if self.glyph_json_data.is_none() {
            self.glyph_json_data = ::std::option::Option::Some(::std::string::String::new());
        }
        self.glyph_json_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_glyph_json_data(&mut self) -> ::std::string::String {
        self.glyph_json_data.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CSTAR_GlyphData {
    const NAME: &'static str = "CSTAR_GlyphData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.glyph_guid = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.glyph_last_modified = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.glyph_json_data = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.glyph_guid.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.glyph_last_modified.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.glyph_json_data.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.glyph_guid.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.glyph_last_modified.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.glyph_json_data.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSTAR_GlyphData {
        CSTAR_GlyphData::new()
    }

    fn clear(&mut self) {
        self.glyph_guid = ::std::option::Option::None;
        self.glyph_last_modified = ::std::option::Option::None;
        self.glyph_json_data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSTAR_GlyphData {
        static instance: CSTAR_GlyphData = CSTAR_GlyphData {
            glyph_guid: ::std::option::Option::None,
            glyph_last_modified: ::std::option::Option::None,
            glyph_json_data: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CSTAR_WriteGlyphData_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSTAR_WriteGlyphData_Request {
    // message fields
    // @@protoc_insertion_point(field:CSTAR_WriteGlyphData_Request.bundle_id)
    pub bundle_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSTAR_WriteGlyphData_Request.glyph_data)
    pub glyph_data: ::std::vec::Vec<CSTAR_GlyphData>,
    // special fields
    // @@protoc_insertion_point(special_field:CSTAR_WriteGlyphData_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSTAR_WriteGlyphData_Request {
    fn default() -> &'a CSTAR_WriteGlyphData_Request {
        <CSTAR_WriteGlyphData_Request as ::protobuf::Message>::default_instance()
    }
}

impl CSTAR_WriteGlyphData_Request {
    pub fn new() -> CSTAR_WriteGlyphData_Request {
        ::std::default::Default::default()
    }

    // optional uint64 bundle_id = 1;

    pub fn bundle_id(&self) -> u64 {
        self.bundle_id.unwrap_or(0)
    }

    pub fn clear_bundle_id(&mut self) {
        self.bundle_id = ::std::option::Option::None;
    }

    pub fn has_bundle_id(&self) -> bool {
        self.bundle_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bundle_id(&mut self, v: u64) {
        self.bundle_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CSTAR_WriteGlyphData_Request {
    const NAME: &'static str = "CSTAR_WriteGlyphData_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.bundle_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.glyph_data.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.bundle_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        for value in &self.glyph_data {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.bundle_id {
            os.write_uint64(1, v)?;
        }
        for v in &self.glyph_data {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSTAR_WriteGlyphData_Request {
        CSTAR_WriteGlyphData_Request::new()
    }

    fn clear(&mut self) {
        self.bundle_id = ::std::option::Option::None;
        self.glyph_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSTAR_WriteGlyphData_Request {
        static instance: CSTAR_WriteGlyphData_Request = CSTAR_WriteGlyphData_Request {
            bundle_id: ::std::option::Option::None,
            glyph_data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[doc = "processes a generic message"]
// @@protoc_insertion_point(message:CSTAR_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSTAR_Request {
    // message fields
    // @@protoc_insertion_point(field:CSTAR_Request.read_glyph_data)
    pub read_glyph_data: ::protobuf::MessageField<CSTAR_ReadGlyphData_Request>,
    // @@protoc_insertion_point(field:CSTAR_Request.write_glyph_data)
    pub write_glyph_data: ::protobuf::MessageField<CSTAR_WriteGlyphData_Request>,
    // special fields
    // @@protoc_insertion_point(special_field:CSTAR_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSTAR_Request {
    fn default() -> &'a CSTAR_Request {
        <CSTAR_Request as ::protobuf::Message>::default_instance()
    }
}

impl CSTAR_Request {
    pub fn new() -> CSTAR_Request {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CSTAR_Request {
    const NAME: &'static str = "CSTAR_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.read_glyph_data)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.write_glyph_data)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.read_glyph_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.write_glyph_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.read_glyph_data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.write_glyph_data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSTAR_Request {
        CSTAR_Request::new()
    }

    fn clear(&mut self) {
        self.read_glyph_data.clear();
        self.write_glyph_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSTAR_Request {
        static instance: CSTAR_Request = CSTAR_Request {
            read_glyph_data: ::protobuf::MessageField::none(),
            write_glyph_data: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CSTAR_ReadGlyphData_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSTAR_ReadGlyphData_Response {
    // message fields
    // @@protoc_insertion_point(field:CSTAR_ReadGlyphData_Response.bundle_id)
    pub bundle_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSTAR_ReadGlyphData_Response.glyph_data)
    pub glyph_data: ::std::vec::Vec<CSTAR_GlyphData>,
    // special fields
    // @@protoc_insertion_point(special_field:CSTAR_ReadGlyphData_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSTAR_ReadGlyphData_Response {
    fn default() -> &'a CSTAR_ReadGlyphData_Response {
        <CSTAR_ReadGlyphData_Response as ::protobuf::Message>::default_instance()
    }
}

impl CSTAR_ReadGlyphData_Response {
    pub fn new() -> CSTAR_ReadGlyphData_Response {
        ::std::default::Default::default()
    }

    // optional uint64 bundle_id = 1;

    pub fn bundle_id(&self) -> u64 {
        self.bundle_id.unwrap_or(0)
    }

    pub fn clear_bundle_id(&mut self) {
        self.bundle_id = ::std::option::Option::None;
    }

    pub fn has_bundle_id(&self) -> bool {
        self.bundle_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bundle_id(&mut self, v: u64) {
        self.bundle_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CSTAR_ReadGlyphData_Response {
    const NAME: &'static str = "CSTAR_ReadGlyphData_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.bundle_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.glyph_data.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.bundle_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        for value in &self.glyph_data {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.bundle_id {
            os.write_uint64(1, v)?;
        }
        for v in &self.glyph_data {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSTAR_ReadGlyphData_Response {
        CSTAR_ReadGlyphData_Response::new()
    }

    fn clear(&mut self) {
        self.bundle_id = ::std::option::Option::None;
        self.glyph_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSTAR_ReadGlyphData_Response {
        static instance: CSTAR_ReadGlyphData_Response = CSTAR_ReadGlyphData_Response {
            bundle_id: ::std::option::Option::None,
            glyph_data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CSTAR_WriteGlyphData_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSTAR_WriteGlyphData_Response {
    // message fields
    // @@protoc_insertion_point(field:CSTAR_WriteGlyphData_Response.result)
    pub result: ::std::vec::Vec<::protobuf::EnumOrUnknown<E_STAR_GlyphWriteResult>>,
    // special fields
    // @@protoc_insertion_point(special_field:CSTAR_WriteGlyphData_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSTAR_WriteGlyphData_Response {
    fn default() -> &'a CSTAR_WriteGlyphData_Response {
        <CSTAR_WriteGlyphData_Response as ::protobuf::Message>::default_instance()
    }
}

impl CSTAR_WriteGlyphData_Response {
    pub fn new() -> CSTAR_WriteGlyphData_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CSTAR_WriteGlyphData_Response {
    const NAME: &'static str = "CSTAR_WriteGlyphData_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result.push(is.read_enum_or_unknown()?);
                },
                10 => {
                    ::protobuf::rt::read_repeated_packed_enum_or_unknown_into(is, &mut self.result)?
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.result {
            my_size += ::protobuf::rt::int32_size(1, value.value());
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.result {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(v))?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSTAR_WriteGlyphData_Response {
        CSTAR_WriteGlyphData_Response::new()
    }

    fn clear(&mut self) {
        self.result.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSTAR_WriteGlyphData_Response {
        static instance: CSTAR_WriteGlyphData_Response = CSTAR_WriteGlyphData_Response {
            result: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CSTAR_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSTAR_Response {
    // message fields
    // @@protoc_insertion_point(field:CSTAR_Response.read_glyph_data)
    pub read_glyph_data: ::protobuf::MessageField<CSTAR_ReadGlyphData_Response>,
    // @@protoc_insertion_point(field:CSTAR_Response.write_glyph_data)
    pub write_glyph_data: ::protobuf::MessageField<CSTAR_WriteGlyphData_Response>,
    // special fields
    // @@protoc_insertion_point(special_field:CSTAR_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSTAR_Response {
    fn default() -> &'a CSTAR_Response {
        <CSTAR_Response as ::protobuf::Message>::default_instance()
    }
}

impl CSTAR_Response {
    pub fn new() -> CSTAR_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CSTAR_Response {
    const NAME: &'static str = "CSTAR_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.read_glyph_data)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.write_glyph_data)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.read_glyph_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.write_glyph_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.read_glyph_data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.write_glyph_data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSTAR_Response {
        CSTAR_Response::new()
    }

    fn clear(&mut self) {
        self.read_glyph_data.clear();
        self.write_glyph_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSTAR_Response {
        static instance: CSTAR_Response = CSTAR_Response {
            read_glyph_data: ::protobuf::MessageField::none(),
            write_glyph_data: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:E_STAR_GlyphWriteResult)
pub enum E_STAR_GlyphWriteResult {
    // @@protoc_insertion_point(enum_value:E_STAR_GlyphWriteResult.k_E_STAR_GlyphWriteResult_Success)
    k_E_STAR_GlyphWriteResult_Success = 0,
    // @@protoc_insertion_point(enum_value:E_STAR_GlyphWriteResult.k_E_STAR_GlyphWriteResult_InvalidMessage)
    k_E_STAR_GlyphWriteResult_InvalidMessage = 1,
    // @@protoc_insertion_point(enum_value:E_STAR_GlyphWriteResult.k_E_STAR_GlyphWriteResult_InvalidJSON)
    k_E_STAR_GlyphWriteResult_InvalidJSON = 2,
    // @@protoc_insertion_point(enum_value:E_STAR_GlyphWriteResult.k_E_STAR_GlyphWriteResult_SQLError)
    k_E_STAR_GlyphWriteResult_SQLError = 3,
}

impl ::protobuf::Enum for E_STAR_GlyphWriteResult {
    const NAME: &'static str = "E_STAR_GlyphWriteResult";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<E_STAR_GlyphWriteResult> {
        match value {
            0 => ::std::option::Option::Some(E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_Success),
            1 => ::std::option::Option::Some(E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_InvalidMessage),
            2 => ::std::option::Option::Some(E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_InvalidJSON),
            3 => ::std::option::Option::Some(E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_SQLError),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<E_STAR_GlyphWriteResult> {
        match str {
            "k_E_STAR_GlyphWriteResult_Success" => ::std::option::Option::Some(E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_Success),
            "k_E_STAR_GlyphWriteResult_InvalidMessage" => ::std::option::Option::Some(E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_InvalidMessage),
            "k_E_STAR_GlyphWriteResult_InvalidJSON" => ::std::option::Option::Some(E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_InvalidJSON),
            "k_E_STAR_GlyphWriteResult_SQLError" => ::std::option::Option::Some(E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_SQLError),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [E_STAR_GlyphWriteResult] = &[
        E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_Success,
        E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_InvalidMessage,
        E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_InvalidJSON,
        E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_SQLError,
    ];
}

impl ::std::default::Default for E_STAR_GlyphWriteResult {
    fn default() -> Self {
        E_STAR_GlyphWriteResult::k_E_STAR_GlyphWriteResult_Success
    }
}

#[allow(unused_imports)]
use crate::steammessages_base::*;
#[allow(unused_imports)]
use crate::steammessages_unified_base_steamclient::*;
impl crate::RpcMessage for CSTAR_KeyValueQuery {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CSTAR_GlyphQueryParams {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CSTAR_ReadGlyphData_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CSTAR_GlyphData {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CSTAR_WriteGlyphData_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CSTAR_Request {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CSTAR_ReadGlyphData_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CSTAR_WriteGlyphData_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
impl crate::RpcMessage for CSTAR_Response {
    fn parse(reader: &mut dyn std::io::Read) -> protobuf::Result<Self> {
        <Self as protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> protobuf::Result<()> {
        use protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use protobuf::Message;
        self.compute_size() as usize
    }
}
///service for reading/writing STAR data
struct STAR {}
impl crate::RpcService for STAR {
    const SERVICE_NAME: &'static str = "STAR";
}
impl crate::RpcMethod for CSTAR_Request {
    const METHOD_NAME: &'static str = "STAR.ProcessMessage#1";
    type Response = CSTAR_Response;
}
